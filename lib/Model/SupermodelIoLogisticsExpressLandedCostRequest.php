<?php
/**
 * SupermodelIoLogisticsExpressLandedCostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressLandedCostRequest Class Doc Comment
 *
 * @category Class
 * @description Landed cost request model description
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressLandedCostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressLandedCostRequestModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressLandedCostRequestModelFields
    {
        return new SupermodelIoLogisticsExpressLandedCostRequestModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressLandedCostRequestModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressLandedCostRequestModelAttributes
    {
        return new SupermodelIoLogisticsExpressLandedCostRequestModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressLandedCostRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_details' => '\MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails',
        'accounts' => '\MyDHL\Model\SupermodelIoLogisticsExpressAccount[]',
        'product_code' => 'string',
        'local_product_code' => 'string',
        'unit_of_measurement' => 'string',
        'currency_code' => 'string',
        'is_customs_declarable' => 'bool',
        'is_dtp_requested' => 'bool',
        'is_insurance_requested' => 'bool',
        'get_cost_breakdown' => 'bool',
        'charges' => '\MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestChargesInner[]',
        'shipment_purpose' => 'string',
        'transportation_mode' => 'string',
        'merchant_selected_carrier_name' => 'string',
        'packages' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]',
        'items' => '\MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInner[]',
        'get_tariff_formula' => 'bool',
        'get_quotation_id' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_details' => null,
        'accounts' => null,
        'product_code' => null,
        'local_product_code' => null,
        'unit_of_measurement' => null,
        'currency_code' => null,
        'is_customs_declarable' => null,
        'is_dtp_requested' => null,
        'is_insurance_requested' => null,
        'get_cost_breakdown' => null,
        'charges' => null,
        'shipment_purpose' => null,
        'transportation_mode' => null,
        'merchant_selected_carrier_name' => null,
        'packages' => null,
        'items' => null,
        'get_tariff_formula' => null,
        'get_quotation_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_details' => false,
		'accounts' => false,
		'product_code' => false,
		'local_product_code' => false,
		'unit_of_measurement' => false,
		'currency_code' => false,
		'is_customs_declarable' => false,
		'is_dtp_requested' => false,
		'is_insurance_requested' => false,
		'get_cost_breakdown' => false,
		'charges' => false,
		'shipment_purpose' => false,
		'transportation_mode' => false,
		'merchant_selected_carrier_name' => false,
		'packages' => false,
		'items' => false,
		'get_tariff_formula' => false,
		'get_quotation_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_details' => 'customerDetails',
        'accounts' => 'accounts',
        'product_code' => 'productCode',
        'local_product_code' => 'localProductCode',
        'unit_of_measurement' => 'unitOfMeasurement',
        'currency_code' => 'currencyCode',
        'is_customs_declarable' => 'isCustomsDeclarable',
        'is_dtp_requested' => 'isDTPRequested',
        'is_insurance_requested' => 'isInsuranceRequested',
        'get_cost_breakdown' => 'getCostBreakdown',
        'charges' => 'charges',
        'shipment_purpose' => 'shipmentPurpose',
        'transportation_mode' => 'transportationMode',
        'merchant_selected_carrier_name' => 'merchantSelectedCarrierName',
        'packages' => 'packages',
        'items' => 'items',
        'get_tariff_formula' => 'getTariffFormula',
        'get_quotation_id' => 'getQuotationID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_details' => 'setCustomerDetails',
        'accounts' => 'setAccounts',
        'product_code' => 'setProductCode',
        'local_product_code' => 'setLocalProductCode',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'currency_code' => 'setCurrencyCode',
        'is_customs_declarable' => 'setIsCustomsDeclarable',
        'is_dtp_requested' => 'setIsDtpRequested',
        'is_insurance_requested' => 'setIsInsuranceRequested',
        'get_cost_breakdown' => 'setGetCostBreakdown',
        'charges' => 'setCharges',
        'shipment_purpose' => 'setShipmentPurpose',
        'transportation_mode' => 'setTransportationMode',
        'merchant_selected_carrier_name' => 'setMerchantSelectedCarrierName',
        'packages' => 'setPackages',
        'items' => 'setItems',
        'get_tariff_formula' => 'setGetTariffFormula',
        'get_quotation_id' => 'setGetQuotationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_details' => 'getCustomerDetails',
        'accounts' => 'getAccounts',
        'product_code' => 'getProductCode',
        'local_product_code' => 'getLocalProductCode',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'currency_code' => 'getCurrencyCode',
        'is_customs_declarable' => 'getIsCustomsDeclarable',
        'is_dtp_requested' => 'getIsDtpRequested',
        'is_insurance_requested' => 'getIsInsuranceRequested',
        'get_cost_breakdown' => 'getGetCostBreakdown',
        'charges' => 'getCharges',
        'shipment_purpose' => 'getShipmentPurpose',
        'transportation_mode' => 'getTransportationMode',
        'merchant_selected_carrier_name' => 'getMerchantSelectedCarrierName',
        'packages' => 'getPackages',
        'items' => 'getItems',
        'get_tariff_formula' => 'getGetTariffFormula',
        'get_quotation_id' => 'getGetQuotationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASUREMENT_METRIC = 'metric';
    public const UNIT_OF_MEASUREMENT_IMPERIAL = 'imperial';
    public const SHIPMENT_PURPOSE_COMMERCIAL = 'commercial';
    public const SHIPMENT_PURPOSE_PERSONAL = 'personal';
    public const TRANSPORTATION_MODE_AIR = 'air';
    public const TRANSPORTATION_MODE_OCEAN = 'ocean';
    public const TRANSPORTATION_MODE_GROUND = 'ground';
    public const MERCHANT_SELECTED_CARRIER_NAME_DHL = 'DHL';
    public const MERCHANT_SELECTED_CARRIER_NAME_UPS = 'UPS';
    public const MERCHANT_SELECTED_CARRIER_NAME_FEDEX = 'FEDEX';
    public const MERCHANT_SELECTED_CARRIER_NAME_TNT = 'TNT';
    public const MERCHANT_SELECTED_CARRIER_NAME_POST = 'POST';
    public const MERCHANT_SELECTED_CARRIER_NAME_OTHERS = 'OTHERS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_METRIC,
            self::UNIT_OF_MEASUREMENT_IMPERIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentPurposeAllowableValues()
    {
        return [
            self::SHIPMENT_PURPOSE_COMMERCIAL,
            self::SHIPMENT_PURPOSE_PERSONAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportationModeAllowableValues()
    {
        return [
            self::TRANSPORTATION_MODE_AIR,
            self::TRANSPORTATION_MODE_OCEAN,
            self::TRANSPORTATION_MODE_GROUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMerchantSelectedCarrierNameAllowableValues()
    {
        return [
            self::MERCHANT_SELECTED_CARRIER_NAME_DHL,
            self::MERCHANT_SELECTED_CARRIER_NAME_UPS,
            self::MERCHANT_SELECTED_CARRIER_NAME_FEDEX,
            self::MERCHANT_SELECTED_CARRIER_NAME_TNT,
            self::MERCHANT_SELECTED_CARRIER_NAME_POST,
            self::MERCHANT_SELECTED_CARRIER_NAME_OTHERS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('local_product_code', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('is_customs_declarable', $data ?? [], null);
        $this->setIfExists('is_dtp_requested', $data ?? [], null);
        $this->setIfExists('is_insurance_requested', $data ?? [], null);
        $this->setIfExists('get_cost_breakdown', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('shipment_purpose', $data ?? [], null);
        $this->setIfExists('transportation_mode', $data ?? [], null);
        $this->setIfExists('merchant_selected_carrier_name', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('get_tariff_formula', $data ?? [], null);
        $this->setIfExists('get_quotation_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_details'] === null) {
            $invalidProperties[] = "'customer_details' can't be null";
        }
        if ($this->container['accounts'] === null) {
            $invalidProperties[] = "'accounts' can't be null";
        }
        if ((count($this->container['accounts']) > 5)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['is_customs_declarable'] === null) {
            $invalidProperties[] = "'is_customs_declarable' can't be null";
        }
        if ($this->container['get_cost_breakdown'] === null) {
            $invalidProperties[] = "'get_cost_breakdown' can't be null";
        }
        if (!is_null($this->container['charges']) && (count($this->container['charges']) > 20)) {
            $invalidProperties[] = "invalid value for 'charges', number of items must be less than or equal to 20.";
        }

        $allowedValues = $this->getShipmentPurposeAllowableValues();
        if (!is_null($this->container['shipment_purpose']) && !in_array($this->container['shipment_purpose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_purpose', must be one of '%s'",
                $this->container['shipment_purpose'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransportationModeAllowableValues();
        if (!is_null($this->container['transportation_mode']) && !in_array($this->container['transportation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transportation_mode', must be one of '%s'",
                $this->container['transportation_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMerchantSelectedCarrierNameAllowableValues();
        if (!is_null($this->container['merchant_selected_carrier_name']) && !in_array($this->container['merchant_selected_carrier_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'merchant_selected_carrier_name', must be one of '%s'",
                $this->container['merchant_selected_carrier_name'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        if ((count($this->container['packages']) > 999)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['packages']) < 1)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be greater than or equal to 1.";
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ((count($this->container['items']) > 1000)) {
            $invalidProperties[] = "invalid value for 'items', number of items must be less than or equal to 1000.";
        }

        if ((count($this->container['items']) < 1)) {
            $invalidProperties[] = "invalid value for 'items', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_details
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        if (is_null($customer_details)) {
            throw new \InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressAccount[] $accounts Please enter all the DHL Express accounts and types to be used for this shipment
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }

        if ((count($accounts) > 5)) {
            throw new \InvalidArgumentException('invalid value for $accounts when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be less than or equal to 5.');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Please enter DHL Express Global Product code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be bigger than or equal to 1.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets local_product_code
     *
     * @return string|null
     */
    public function getLocalProductCode()
    {
        return $this->container['local_product_code'];
    }

    /**
     * Sets local_product_code
     *
     * @param string|null $local_product_code Please enter DHL Express Local Product code
     *
     * @return self
     */
    public function setLocalProductCode($local_product_code)
    {
        if (is_null($local_product_code)) {
            throw new \InvalidArgumentException('non-nullable local_product_code cannot be null');
        }
        if ((mb_strlen($local_product_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($local_product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be bigger than or equal to 1.');
        }

        $this->container['local_product_code'] = $local_product_code;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement Please enter Unit of measurement - metric,imperial
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Currency code for the item price (the product being sold) and freight charge. The Landed Cost calculation result will be returned in this defined currency
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling SupermodelIoLogisticsExpressLandedCostRequest., must be bigger than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_customs_declarable
     *
     * @return bool
     */
    public function getIsCustomsDeclarable()
    {
        return $this->container['is_customs_declarable'];
    }

    /**
     * Sets is_customs_declarable
     *
     * @param bool $is_customs_declarable Set this to true is shipment contains declarable content
     *
     * @return self
     */
    public function setIsCustomsDeclarable($is_customs_declarable)
    {
        if (is_null($is_customs_declarable)) {
            throw new \InvalidArgumentException('non-nullable is_customs_declarable cannot be null');
        }
        $this->container['is_customs_declarable'] = $is_customs_declarable;

        return $this;
    }

    /**
     * Gets is_dtp_requested
     *
     * @return bool|null
     */
    public function getIsDtpRequested()
    {
        return $this->container['is_dtp_requested'];
    }

    /**
     * Sets is_dtp_requested
     *
     * @param bool|null $is_dtp_requested Set this to true if you want DHL EXpress product Duties and Taxes Paid outside shipment destination
     *
     * @return self
     */
    public function setIsDtpRequested($is_dtp_requested)
    {
        if (is_null($is_dtp_requested)) {
            throw new \InvalidArgumentException('non-nullable is_dtp_requested cannot be null');
        }
        $this->container['is_dtp_requested'] = $is_dtp_requested;

        return $this;
    }

    /**
     * Gets is_insurance_requested
     *
     * @return bool|null
     */
    public function getIsInsuranceRequested()
    {
        return $this->container['is_insurance_requested'];
    }

    /**
     * Sets is_insurance_requested
     *
     * @param bool|null $is_insurance_requested Set this true if you ask for DHL Express insurance service
     *
     * @return self
     */
    public function setIsInsuranceRequested($is_insurance_requested)
    {
        if (is_null($is_insurance_requested)) {
            throw new \InvalidArgumentException('non-nullable is_insurance_requested cannot be null');
        }
        $this->container['is_insurance_requested'] = $is_insurance_requested;

        return $this;
    }

    /**
     * Gets get_cost_breakdown
     *
     * @return bool
     */
    public function getGetCostBreakdown()
    {
        return $this->container['get_cost_breakdown'];
    }

    /**
     * Sets get_cost_breakdown
     *
     * @param bool $get_cost_breakdown Allowed values 'true' - item cost breakdown will be returned, 'false' - item cost breakdown will not be returned
     *
     * @return self
     */
    public function setGetCostBreakdown($get_cost_breakdown)
    {
        if (is_null($get_cost_breakdown)) {
            throw new \InvalidArgumentException('non-nullable get_cost_breakdown cannot be null');
        }
        $this->container['get_cost_breakdown'] = $get_cost_breakdown;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestChargesInner[]|null
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestChargesInner[]|null $charges Please provide any additional charges you would like to include in total cost calculation
     *
     * @return self
     */
    public function setCharges($charges)
    {
        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }

        if ((count($charges) > 20)) {
            throw new \InvalidArgumentException('invalid value for $charges when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be less than or equal to 20.');
        }
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets shipment_purpose
     *
     * @return string|null
     */
    public function getShipmentPurpose()
    {
        return $this->container['shipment_purpose'];
    }

    /**
     * Sets shipment_purpose
     *
     * @param string|null $shipment_purpose Possible values:<BR>      commercial: B2B<BR>      personal: B2C<BR>      commercia': B2B<BR>      personal: B2C
     *
     * @return self
     */
    public function setShipmentPurpose($shipment_purpose)
    {
        if (is_null($shipment_purpose)) {
            throw new \InvalidArgumentException('non-nullable shipment_purpose cannot be null');
        }
        $allowedValues = $this->getShipmentPurposeAllowableValues();
        if (!in_array($shipment_purpose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_purpose', must be one of '%s'",
                    $shipment_purpose,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_purpose'] = $shipment_purpose;

        return $this;
    }

    /**
     * Gets transportation_mode
     *
     * @return string|null
     */
    public function getTransportationMode()
    {
        return $this->container['transportation_mode'];
    }

    /**
     * Sets transportation_mode
     *
     * @param string|null $transportation_mode transportation_mode
     *
     * @return self
     */
    public function setTransportationMode($transportation_mode)
    {
        if (is_null($transportation_mode)) {
            throw new \InvalidArgumentException('non-nullable transportation_mode cannot be null');
        }
        $allowedValues = $this->getTransportationModeAllowableValues();
        if (!in_array($transportation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transportation_mode', must be one of '%s'",
                    $transportation_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transportation_mode'] = $transportation_mode;

        return $this;
    }

    /**
     * Gets merchant_selected_carrier_name
     *
     * @return string|null
     */
    public function getMerchantSelectedCarrierName()
    {
        return $this->container['merchant_selected_carrier_name'];
    }

    /**
     * Sets merchant_selected_carrier_name
     *
     * @param string|null $merchant_selected_carrier_name Carrier being used to ship with. Allowed values are:<BR>      'DHL','UPS','FEDEX','TNT','POST',<BR>      'OTHERS'
     *
     * @return self
     */
    public function setMerchantSelectedCarrierName($merchant_selected_carrier_name)
    {
        if (is_null($merchant_selected_carrier_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_selected_carrier_name cannot be null');
        }
        $allowedValues = $this->getMerchantSelectedCarrierNameAllowableValues();
        if (!in_array($merchant_selected_carrier_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'merchant_selected_carrier_name', must be one of '%s'",
                    $merchant_selected_carrier_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['merchant_selected_carrier_name'] = $merchant_selected_carrier_name;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[] $packages Here you can define properties per package
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }

        if ((count($packages) > 999)) {
            throw new \InvalidArgumentException('invalid value for $packages when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be less than or equal to 999.');
        }
        if ((count($packages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packages when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInner[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInner[] $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }

        if ((count($items) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $items when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be less than or equal to 1000.');
        }
        if ((count($items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $items when calling SupermodelIoLogisticsExpressLandedCostRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets get_tariff_formula
     *
     * @return bool|null
     */
    public function getGetTariffFormula()
    {
        return $this->container['get_tariff_formula'];
    }

    /**
     * Sets get_tariff_formula
     *
     * @param bool|null $get_tariff_formula Allowed values 'true' - tariff formula on item and shipment level will be returned, 'false' - tariff formula on item and shipment level will not be returned
     *
     * @return self
     */
    public function setGetTariffFormula($get_tariff_formula)
    {
        if (is_null($get_tariff_formula)) {
            throw new \InvalidArgumentException('non-nullable get_tariff_formula cannot be null');
        }
        $this->container['get_tariff_formula'] = $get_tariff_formula;

        return $this;
    }

    /**
     * Gets get_quotation_id
     *
     * @return bool|null
     */
    public function getGetQuotationId()
    {
        return $this->container['get_quotation_id'];
    }

    /**
     * Sets get_quotation_id
     *
     * @param bool|null $get_quotation_id Allowed values 'true' - quotation ID on shipment level will be returned, 'false' - quotation ID on shipment level will not be returned
     *
     * @return self
     */
    public function setGetQuotationId($get_quotation_id)
    {
        if (is_null($get_quotation_id)) {
            throw new \InvalidArgumentException('non-nullable get_quotation_id cannot be null');
        }
        $this->container['get_quotation_id'] = $get_quotation_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



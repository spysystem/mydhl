<?php
/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery Class Doc Comment
 *
 * @category Class
 * @description Here you can provide data in case you wish to use DHL Express On demand delivery service
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelFields
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelAttributes
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDeliveryModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressCreateShipmentRequest_onDemandDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_option' => 'string',
        'location' => 'string',
        'special_instructions' => 'string',
        'gate_code' => 'string',
        'where_to_leave' => 'string',
        'neighbour_name' => 'string',
        'neighbour_house_number' => 'string',
        'authorizer_name' => 'string',
        'service_point_id' => 'string',
        'requested_delivery_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_option' => null,
        'location' => null,
        'special_instructions' => null,
        'gate_code' => null,
        'where_to_leave' => null,
        'neighbour_name' => null,
        'neighbour_house_number' => null,
        'authorizer_name' => null,
        'service_point_id' => null,
        'requested_delivery_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_option' => false,
		'location' => false,
		'special_instructions' => false,
		'gate_code' => false,
		'where_to_leave' => false,
		'neighbour_name' => false,
		'neighbour_house_number' => false,
		'authorizer_name' => false,
		'service_point_id' => false,
		'requested_delivery_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_option' => 'deliveryOption',
        'location' => 'location',
        'special_instructions' => 'specialInstructions',
        'gate_code' => 'gateCode',
        'where_to_leave' => 'whereToLeave',
        'neighbour_name' => 'neighbourName',
        'neighbour_house_number' => 'neighbourHouseNumber',
        'authorizer_name' => 'authorizerName',
        'service_point_id' => 'servicePointId',
        'requested_delivery_date' => 'requestedDeliveryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_option' => 'setDeliveryOption',
        'location' => 'setLocation',
        'special_instructions' => 'setSpecialInstructions',
        'gate_code' => 'setGateCode',
        'where_to_leave' => 'setWhereToLeave',
        'neighbour_name' => 'setNeighbourName',
        'neighbour_house_number' => 'setNeighbourHouseNumber',
        'authorizer_name' => 'setAuthorizerName',
        'service_point_id' => 'setServicePointId',
        'requested_delivery_date' => 'setRequestedDeliveryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_option' => 'getDeliveryOption',
        'location' => 'getLocation',
        'special_instructions' => 'getSpecialInstructions',
        'gate_code' => 'getGateCode',
        'where_to_leave' => 'getWhereToLeave',
        'neighbour_name' => 'getNeighbourName',
        'neighbour_house_number' => 'getNeighbourHouseNumber',
        'authorizer_name' => 'getAuthorizerName',
        'service_point_id' => 'getServicePointId',
        'requested_delivery_date' => 'getRequestedDeliveryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_OPTION_SERVICEPOINT = 'servicepoint';
    public const DELIVERY_OPTION_NEIGHBOUR = 'neighbour';
    public const DELIVERY_OPTION_SIGNATURE_RELEASE = 'signatureRelease';
    public const WHERE_TO_LEAVE_CONCIERGE = 'concierge';
    public const WHERE_TO_LEAVE_NEIGHBOUR = 'neighbour';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryOptionAllowableValues()
    {
        return [
            self::DELIVERY_OPTION_SERVICEPOINT,
            self::DELIVERY_OPTION_NEIGHBOUR,
            self::DELIVERY_OPTION_SIGNATURE_RELEASE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhereToLeaveAllowableValues()
    {
        return [
            self::WHERE_TO_LEAVE_CONCIERGE,
            self::WHERE_TO_LEAVE_NEIGHBOUR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_option', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('special_instructions', $data ?? [], null);
        $this->setIfExists('gate_code', $data ?? [], null);
        $this->setIfExists('where_to_leave', $data ?? [], null);
        $this->setIfExists('neighbour_name', $data ?? [], null);
        $this->setIfExists('neighbour_house_number', $data ?? [], null);
        $this->setIfExists('authorizer_name', $data ?? [], null);
        $this->setIfExists('service_point_id', $data ?? [], null);
        $this->setIfExists('requested_delivery_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['delivery_option'] === null) {
            $invalidProperties[] = "'delivery_option' can't be null";
        }
        $allowedValues = $this->getDeliveryOptionAllowableValues();
        if (!is_null($this->container['delivery_option']) && !in_array($this->container['delivery_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_option', must be one of '%s'",
                $this->container['delivery_option'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 15)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) < 1)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['special_instructions']) && (mb_strlen($this->container['special_instructions']) > 110)) {
            $invalidProperties[] = "invalid value for 'special_instructions', the character length must be smaller than or equal to 110.";
        }

        if (!is_null($this->container['special_instructions']) && (mb_strlen($this->container['special_instructions']) < 1)) {
            $invalidProperties[] = "invalid value for 'special_instructions', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gate_code']) && (mb_strlen($this->container['gate_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'gate_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['gate_code']) && (mb_strlen($this->container['gate_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'gate_code', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getWhereToLeaveAllowableValues();
        if (!is_null($this->container['where_to_leave']) && !in_array($this->container['where_to_leave'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'where_to_leave', must be one of '%s'",
                $this->container['where_to_leave'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['neighbour_name']) && (mb_strlen($this->container['neighbour_name']) > 20)) {
            $invalidProperties[] = "invalid value for 'neighbour_name', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['neighbour_name']) && (mb_strlen($this->container['neighbour_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'neighbour_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['neighbour_house_number']) && (mb_strlen($this->container['neighbour_house_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'neighbour_house_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['neighbour_house_number']) && (mb_strlen($this->container['neighbour_house_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'neighbour_house_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['authorizer_name']) && (mb_strlen($this->container['authorizer_name']) > 20)) {
            $invalidProperties[] = "invalid value for 'authorizer_name', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['authorizer_name']) && (mb_strlen($this->container['authorizer_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'authorizer_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['service_point_id']) && (mb_strlen($this->container['service_point_id']) > 6)) {
            $invalidProperties[] = "invalid value for 'service_point_id', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['service_point_id']) && (mb_strlen($this->container['service_point_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'service_point_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['requested_delivery_date']) && (mb_strlen($this->container['requested_delivery_date']) > 29)) {
            $invalidProperties[] = "invalid value for 'requested_delivery_date', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['requested_delivery_date']) && (mb_strlen($this->container['requested_delivery_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'requested_delivery_date', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_option
     *
     * @return string
     */
    public function getDeliveryOption()
    {
        return $this->container['delivery_option'];
    }

    /**
     * Sets delivery_option
     *
     * @param string $delivery_option Please choose from one of the delivery options
     *
     * @return self
     */
    public function setDeliveryOption($delivery_option)
    {
        if (is_null($delivery_option)) {
            throw new \InvalidArgumentException('non-nullable delivery_option cannot be null');
        }
        $allowedValues = $this->getDeliveryOptionAllowableValues();
        if (!in_array($delivery_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_option', must be one of '%s'",
                    $delivery_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_option'] = $delivery_option;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location If delivery option is signatureDelivery please specify location where to leave the shipment
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        if ((mb_strlen($location) > 15)) {
            throw new \InvalidArgumentException('invalid length for $location when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($location) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return string|null
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param string|null $special_instructions Please enter additional information that might be useful for the DHL Express courier
     *
     * @return self
     */
    public function setSpecialInstructions($special_instructions)
    {
        if (is_null($special_instructions)) {
            throw new \InvalidArgumentException('non-nullable special_instructions cannot be null');
        }
        if ((mb_strlen($special_instructions) > 110)) {
            throw new \InvalidArgumentException('invalid length for $special_instructions when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 110.');
        }
        if ((mb_strlen($special_instructions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $special_instructions when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets gate_code
     *
     * @return string|null
     */
    public function getGateCode()
    {
        return $this->container['gate_code'];
    }

    /**
     * Sets gate_code
     *
     * @param string|null $gate_code Please provide entry code to gain access to an apartment complex or gate
     *
     * @return self
     */
    public function setGateCode($gate_code)
    {
        if (is_null($gate_code)) {
            throw new \InvalidArgumentException('non-nullable gate_code cannot be null');
        }
        if ((mb_strlen($gate_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $gate_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($gate_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gate_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['gate_code'] = $gate_code;

        return $this;
    }

    /**
     * Gets where_to_leave
     *
     * @return string|null
     */
    public function getWhereToLeave()
    {
        return $this->container['where_to_leave'];
    }

    /**
     * Sets where_to_leave
     *
     * @param string|null $where_to_leave In ase your deliveryOption is 'neighbour' please specify where to leave the package
     *
     * @return self
     */
    public function setWhereToLeave($where_to_leave)
    {
        if (is_null($where_to_leave)) {
            throw new \InvalidArgumentException('non-nullable where_to_leave cannot be null');
        }
        $allowedValues = $this->getWhereToLeaveAllowableValues();
        if (!in_array($where_to_leave, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'where_to_leave', must be one of '%s'",
                    $where_to_leave,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['where_to_leave'] = $where_to_leave;

        return $this;
    }

    /**
     * Gets neighbour_name
     *
     * @return string|null
     */
    public function getNeighbourName()
    {
        return $this->container['neighbour_name'];
    }

    /**
     * Sets neighbour_name
     *
     * @param string|null $neighbour_name In case you wish to leave the package with neighbour please provide the neighbour's name
     *
     * @return self
     */
    public function setNeighbourName($neighbour_name)
    {
        if (is_null($neighbour_name)) {
            throw new \InvalidArgumentException('non-nullable neighbour_name cannot be null');
        }
        if ((mb_strlen($neighbour_name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $neighbour_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($neighbour_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $neighbour_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['neighbour_name'] = $neighbour_name;

        return $this;
    }

    /**
     * Gets neighbour_house_number
     *
     * @return string|null
     */
    public function getNeighbourHouseNumber()
    {
        return $this->container['neighbour_house_number'];
    }

    /**
     * Sets neighbour_house_number
     *
     * @param string|null $neighbour_house_number In case you wish to leave the package with neighbour please provide the neighbour's house number
     *
     * @return self
     */
    public function setNeighbourHouseNumber($neighbour_house_number)
    {
        if (is_null($neighbour_house_number)) {
            throw new \InvalidArgumentException('non-nullable neighbour_house_number cannot be null');
        }
        if ((mb_strlen($neighbour_house_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $neighbour_house_number when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($neighbour_house_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $neighbour_house_number when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['neighbour_house_number'] = $neighbour_house_number;

        return $this;
    }

    /**
     * Gets authorizer_name
     *
     * @return string|null
     */
    public function getAuthorizerName()
    {
        return $this->container['authorizer_name'];
    }

    /**
     * Sets authorizer_name
     *
     * @param string|null $authorizer_name In case your delivery option is 'signatureRelease' please provide name of the person who is authorized to sign and receive the package
     *
     * @return self
     */
    public function setAuthorizerName($authorizer_name)
    {
        if (is_null($authorizer_name)) {
            throw new \InvalidArgumentException('non-nullable authorizer_name cannot be null');
        }
        if ((mb_strlen($authorizer_name) > 20)) {
            throw new \InvalidArgumentException('invalid length for $authorizer_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($authorizer_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $authorizer_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['authorizer_name'] = $authorizer_name;

        return $this;
    }

    /**
     * Gets service_point_id
     *
     * @return string|null
     */
    public function getServicePointId()
    {
        return $this->container['service_point_id'];
    }

    /**
     * Sets service_point_id
     *
     * @param string|null $service_point_id In case your delivery option is 'servicepoint' please provide unique DHL Express Service point location ID of where the parcel should be delieverd (please contact your local DHL Express Account Manager to obtain the list of the servicepoint IDs)
     *
     * @return self
     */
    public function setServicePointId($service_point_id)
    {
        if (is_null($service_point_id)) {
            throw new \InvalidArgumentException('non-nullable service_point_id cannot be null');
        }
        if ((mb_strlen($service_point_id) > 6)) {
            throw new \InvalidArgumentException('invalid length for $service_point_id when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($service_point_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $service_point_id when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['service_point_id'] = $service_point_id;

        return $this;
    }

    /**
     * Gets requested_delivery_date
     *
     * @return string|null
     */
    public function getRequestedDeliveryDate()
    {
        return $this->container['requested_delivery_date'];
    }

    /**
     * Sets requested_delivery_date
     *
     * @param string|null $requested_delivery_date for future use
     *
     * @return self
     */
    public function setRequestedDeliveryDate($requested_delivery_date)
    {
        if (is_null($requested_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable requested_delivery_date cannot be null');
        }
        if ((mb_strlen($requested_delivery_date) > 29)) {
            throw new \InvalidArgumentException('invalid length for $requested_delivery_date when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($requested_delivery_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $requested_delivery_date when calling SupermodelIoLogisticsExpressCreateShipmentRequestOnDemandDelivery., must be bigger than or equal to 1.');
        }

        $this->container['requested_delivery_date'] = $requested_delivery_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



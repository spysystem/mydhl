<?php
/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties Class Doc Comment
 *
 * @category Class
 * @description Here you can modify label, waybillDoc, invoice and receipt properties
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelFields
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelAttributes
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressCreateShipmentRequest_outputImageProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'printer_dpi' => 'float',
        'customer_barcodes' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner[]',
        'customer_logos' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner[]',
        'encoding_format' => 'string',
        'image_options' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner[]',
        'split_transport_and_waybill_doc_labels' => 'bool',
        'all_documents_in_one_image' => 'bool',
        'split_documents_by_pages' => 'bool',
        'split_invoice_and_receipt' => 'bool',
        'receipt_and_labels_in_one_image' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'printer_dpi' => null,
        'customer_barcodes' => null,
        'customer_logos' => null,
        'encoding_format' => null,
        'image_options' => null,
        'split_transport_and_waybill_doc_labels' => null,
        'all_documents_in_one_image' => null,
        'split_documents_by_pages' => null,
        'split_invoice_and_receipt' => null,
        'receipt_and_labels_in_one_image' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'printer_dpi' => false,
		'customer_barcodes' => false,
		'customer_logos' => false,
		'encoding_format' => false,
		'image_options' => false,
		'split_transport_and_waybill_doc_labels' => false,
		'all_documents_in_one_image' => false,
		'split_documents_by_pages' => false,
		'split_invoice_and_receipt' => false,
		'receipt_and_labels_in_one_image' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'printer_dpi' => 'printerDPI',
        'customer_barcodes' => 'customerBarcodes',
        'customer_logos' => 'customerLogos',
        'encoding_format' => 'encodingFormat',
        'image_options' => 'imageOptions',
        'split_transport_and_waybill_doc_labels' => 'splitTransportAndWaybillDocLabels',
        'all_documents_in_one_image' => 'allDocumentsInOneImage',
        'split_documents_by_pages' => 'splitDocumentsByPages',
        'split_invoice_and_receipt' => 'splitInvoiceAndReceipt',
        'receipt_and_labels_in_one_image' => 'receiptAndLabelsInOneImage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'printer_dpi' => 'setPrinterDpi',
        'customer_barcodes' => 'setCustomerBarcodes',
        'customer_logos' => 'setCustomerLogos',
        'encoding_format' => 'setEncodingFormat',
        'image_options' => 'setImageOptions',
        'split_transport_and_waybill_doc_labels' => 'setSplitTransportAndWaybillDocLabels',
        'all_documents_in_one_image' => 'setAllDocumentsInOneImage',
        'split_documents_by_pages' => 'setSplitDocumentsByPages',
        'split_invoice_and_receipt' => 'setSplitInvoiceAndReceipt',
        'receipt_and_labels_in_one_image' => 'setReceiptAndLabelsInOneImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'printer_dpi' => 'getPrinterDpi',
        'customer_barcodes' => 'getCustomerBarcodes',
        'customer_logos' => 'getCustomerLogos',
        'encoding_format' => 'getEncodingFormat',
        'image_options' => 'getImageOptions',
        'split_transport_and_waybill_doc_labels' => 'getSplitTransportAndWaybillDocLabels',
        'all_documents_in_one_image' => 'getAllDocumentsInOneImage',
        'split_documents_by_pages' => 'getSplitDocumentsByPages',
        'split_invoice_and_receipt' => 'getSplitInvoiceAndReceipt',
        'receipt_and_labels_in_one_image' => 'getReceiptAndLabelsInOneImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PRINTER_DPI_200 = 200;
    public const PRINTER_DPI_300 = 300;
    public const ENCODING_FORMAT_PDF = 'pdf';
    public const ENCODING_FORMAT_ZPL = 'zpl';
    public const ENCODING_FORMAT_LP2 = 'lp2';
    public const ENCODING_FORMAT_EPL = 'epl';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPrinterDpiAllowableValues()
    {
        return [
            self::PRINTER_DPI_200,
            self::PRINTER_DPI_300,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncodingFormatAllowableValues()
    {
        return [
            self::ENCODING_FORMAT_PDF,
            self::ENCODING_FORMAT_ZPL,
            self::ENCODING_FORMAT_LP2,
            self::ENCODING_FORMAT_EPL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('printer_dpi', $data ?? [], null);
        $this->setIfExists('customer_barcodes', $data ?? [], null);
        $this->setIfExists('customer_logos', $data ?? [], null);
        $this->setIfExists('encoding_format', $data ?? [], 'pdf');
        $this->setIfExists('image_options', $data ?? [], null);
        $this->setIfExists('split_transport_and_waybill_doc_labels', $data ?? [], null);
        $this->setIfExists('all_documents_in_one_image', $data ?? [], null);
        $this->setIfExists('split_documents_by_pages', $data ?? [], null);
        $this->setIfExists('split_invoice_and_receipt', $data ?? [], null);
        $this->setIfExists('receipt_and_labels_in_one_image', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPrinterDpiAllowableValues();
        if (!is_null($this->container['printer_dpi']) && !in_array($this->container['printer_dpi'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'printer_dpi', must be one of '%s'",
                $this->container['printer_dpi'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_barcodes']) && (count($this->container['customer_barcodes']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_barcodes', number of items must be less than or equal to 1.";
        }

        if (!is_null($this->container['customer_logos']) && (count($this->container['customer_logos']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_logos', number of items must be less than or equal to 1.";
        }

        $allowedValues = $this->getEncodingFormatAllowableValues();
        if (!is_null($this->container['encoding_format']) && !in_array($this->container['encoding_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encoding_format', must be one of '%s'",
                $this->container['encoding_format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['image_options']) && (count($this->container['image_options']) > 20)) {
            $invalidProperties[] = "invalid value for 'image_options', number of items must be less than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets printer_dpi
     *
     * @return float|null
     */
    public function getPrinterDpi()
    {
        return $this->container['printer_dpi'];
    }

    /**
     * Sets printer_dpi
     *
     * @param float|null $printer_dpi Printer DPI Resolution for X-axis and Y-axis (in DPI) for transport label and waybill document output
     *
     * @return self
     */
    public function setPrinterDpi($printer_dpi)
    {
        if (is_null($printer_dpi)) {
            throw new \InvalidArgumentException('non-nullable printer_dpi cannot be null');
        }
        $allowedValues = $this->getPrinterDpiAllowableValues();
        if (!in_array($printer_dpi, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'printer_dpi', must be one of '%s'",
                    $printer_dpi,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['printer_dpi'] = $printer_dpi;

        return $this;
    }

    /**
     * Gets customer_barcodes
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner[]|null
     */
    public function getCustomerBarcodes()
    {
        return $this->container['customer_barcodes'];
    }

    /**
     * Sets customer_barcodes
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodesInner[]|null $customer_barcodes Customer barcodes to be printed on supported transport label templates
     *
     * @return self
     */
    public function setCustomerBarcodes($customer_barcodes)
    {
        if (is_null($customer_barcodes)) {
            throw new \InvalidArgumentException('non-nullable customer_barcodes cannot be null');
        }

        if ((count($customer_barcodes) > 1)) {
            throw new \InvalidArgumentException('invalid value for $customer_barcodes when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties., number of items must be less than or equal to 1.');
        }
        $this->container['customer_barcodes'] = $customer_barcodes;

        return $this;
    }

    /**
     * Gets customer_logos
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner[]|null
     */
    public function getCustomerLogos()
    {
        return $this->container['customer_logos'];
    }

    /**
     * Sets customer_logos
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogosInner[]|null $customer_logos Customer Logo Image to be printed on transport label
     *
     * @return self
     */
    public function setCustomerLogos($customer_logos)
    {
        if (is_null($customer_logos)) {
            throw new \InvalidArgumentException('non-nullable customer_logos cannot be null');
        }

        if ((count($customer_logos) > 1)) {
            throw new \InvalidArgumentException('invalid value for $customer_logos when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties., number of items must be less than or equal to 1.');
        }
        $this->container['customer_logos'] = $customer_logos;

        return $this;
    }

    /**
     * Gets encoding_format
     *
     * @return string|null
     */
    public function getEncodingFormat()
    {
        return $this->container['encoding_format'];
    }

    /**
     * Sets encoding_format
     *
     * @param string|null $encoding_format Please provide the format of the output documents. Note that invoice and receipt will always come back as PDF
     *
     * @return self
     */
    public function setEncodingFormat($encoding_format)
    {
        if (is_null($encoding_format)) {
            throw new \InvalidArgumentException('non-nullable encoding_format cannot be null');
        }
        $allowedValues = $this->getEncodingFormatAllowableValues();
        if (!in_array($encoding_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encoding_format', must be one of '%s'",
                    $encoding_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encoding_format'] = $encoding_format;

        return $this;
    }

    /**
     * Gets image_options
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner[]|null
     */
    public function getImageOptions()
    {
        return $this->container['image_options'];
    }

    /**
     * Sets image_options
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner[]|null $image_options Here the image options are defined for label, waybillDoc, invoice, receipt and QRcode
     *
     * @return self
     */
    public function setImageOptions($image_options)
    {
        if (is_null($image_options)) {
            throw new \InvalidArgumentException('non-nullable image_options cannot be null');
        }

        if ((count($image_options) > 20)) {
            throw new \InvalidArgumentException('invalid value for $image_options when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties., number of items must be less than or equal to 20.');
        }
        $this->container['image_options'] = $image_options;

        return $this;
    }

    /**
     * Gets split_transport_and_waybill_doc_labels
     *
     * @return bool|null
     */
    public function getSplitTransportAndWaybillDocLabels()
    {
        return $this->container['split_transport_and_waybill_doc_labels'];
    }

    /**
     * Sets split_transport_and_waybill_doc_labels
     *
     * @param bool|null $split_transport_and_waybill_doc_labels When set to true it will generate a single PDF or thermal output file for the Transport Label, a single PDF or thermal output file for the Waybill document and a single PDF file consisting of Commercial Invoice and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.
     *
     * @return self
     */
    public function setSplitTransportAndWaybillDocLabels($split_transport_and_waybill_doc_labels)
    {
        if (is_null($split_transport_and_waybill_doc_labels)) {
            throw new \InvalidArgumentException('non-nullable split_transport_and_waybill_doc_labels cannot be null');
        }
        $this->container['split_transport_and_waybill_doc_labels'] = $split_transport_and_waybill_doc_labels;

        return $this;
    }

    /**
     * Gets all_documents_in_one_image
     *
     * @return bool|null
     */
    public function getAllDocumentsInOneImage()
    {
        return $this->container['all_documents_in_one_image'];
    }

    /**
     * Sets all_documents_in_one_image
     *
     * @param bool|null $all_documents_in_one_image When set to true it will generate a single PDF or thermal output image file consists of Transport Label, Waybill Document, Shipment Receipt and Commercial Invoice.<BR>          The default value is false, where a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned.
     *
     * @return self
     */
    public function setAllDocumentsInOneImage($all_documents_in_one_image)
    {
        if (is_null($all_documents_in_one_image)) {
            throw new \InvalidArgumentException('non-nullable all_documents_in_one_image cannot be null');
        }
        $this->container['all_documents_in_one_image'] = $all_documents_in_one_image;

        return $this;
    }

    /**
     * Gets split_documents_by_pages
     *
     * @return bool|null
     */
    public function getSplitDocumentsByPages()
    {
        return $this->container['split_documents_by_pages'];
    }

    /**
     * Sets split_documents_by_pages
     *
     * @param bool|null $split_documents_by_pages When set to true it will generate a single PDF or thermal output image file for each page for the Transport Label and single PDF or thermal output image file for Waybill Document will be returned in the create shipment response. The default value is false, a single PDF or thermal output image file for each page for Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.
     *
     * @return self
     */
    public function setSplitDocumentsByPages($split_documents_by_pages)
    {
        if (is_null($split_documents_by_pages)) {
            throw new \InvalidArgumentException('non-nullable split_documents_by_pages cannot be null');
        }
        $this->container['split_documents_by_pages'] = $split_documents_by_pages;

        return $this;
    }

    /**
     * Gets split_invoice_and_receipt
     *
     * @return bool|null
     */
    public function getSplitInvoiceAndReceipt()
    {
        return $this->container['split_invoice_and_receipt'];
    }

    /**
     * Sets split_invoice_and_receipt
     *
     * @param bool|null $split_invoice_and_receipt When set to true it will generate a single PDF or thermal output image file consisting of Transport Label + Waybill Document, a single file consist of Commercial Invoice and a single file consist of Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned in create shipment response.
     *
     * @return self
     */
    public function setSplitInvoiceAndReceipt($split_invoice_and_receipt)
    {
        if (is_null($split_invoice_and_receipt)) {
            throw new \InvalidArgumentException('non-nullable split_invoice_and_receipt cannot be null');
        }
        $this->container['split_invoice_and_receipt'] = $split_invoice_and_receipt;

        return $this;
    }

    /**
     * Gets receipt_and_labels_in_one_image
     *
     * @return bool|null
     */
    public function getReceiptAndLabelsInOneImage()
    {
        return $this->container['receipt_and_labels_in_one_image'];
    }

    /**
     * Sets receipt_and_labels_in_one_image
     *
     * @param bool|null $receipt_and_labels_in_one_image When set to true it will generate a single PDF file consisting of Transport Label, Waybill Document and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF file for Shipment Receipt will be returned in create shipment response.  Applicable only when #/outputImageProperties/imageOptions/0/typeCode is 'receipt' and #/outputImageProperties/encodingFormat is PDF.
     *
     * @return self
     */
    public function setReceiptAndLabelsInOneImage($receipt_and_labels_in_one_image)
    {
        if (is_null($receipt_and_labels_in_one_image)) {
            throw new \InvalidArgumentException('non-nullable receipt_and_labels_in_one_image cannot be null');
        }
        $this->container['receipt_and_labels_in_one_image'] = $receipt_and_labels_in_one_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



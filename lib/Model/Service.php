<?php
/**
 * Service
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * Service Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Service implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ServiceModelFields
      */
    public static function GetModelFields(): ServiceModelFields
    {
        return new ServiceModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ServiceModelAttributes
      */
    public static function GetModelAttributes(): ServiceModelAttributes
    {
        return new ServiceModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_type' => 'string',
        'delivery_time' => 'string',
        'delivery_type' => 'string',
        'cutoff_time' => 'string',
        'cutoff_time_gmt' => 'string',
        'cutoff_time_offset' => 'string',
        'next_business_day_ind' => 'string',
        'pickup_window_earliest_time' => 'string',
        'pickup_window_latest_time' => 'string',
        'service_name' => 'string',
        'local_service_type' => 'string',
        'local_service_country_code' => 'string',
        'network_type_code' => 'string',
        'customer_aggreement_ind' => 'string',
        'total_transit_days' => 'int',
        'pickup_additional_dates' => 'int',
        'delivery_additional_days' => 'int',
        'volumetric_weight' => 'float',
        'quoted_weight' => 'float',
        'unit_of_measurement' => 'string',
        'pickup_day_of_week' => 'string',
        'destination_day_of_week' => 'string',
        'pricing_date' => 'string',
        'origin_service_area' => '\MyDHL\Model\ServiceArea',
        'destination_service_area' => '\MyDHL\Model\ServiceArea',
        'charges' => '\MyDHL\Model\Charges',
        'total_charge_types' => '\MyDHL\Model\TotalChargeTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_type' => null,
        'delivery_time' => null,
        'delivery_type' => null,
        'cutoff_time' => null,
        'cutoff_time_gmt' => null,
        'cutoff_time_offset' => null,
        'next_business_day_ind' => null,
        'pickup_window_earliest_time' => null,
        'pickup_window_latest_time' => null,
        'service_name' => null,
        'local_service_type' => null,
        'local_service_country_code' => null,
        'network_type_code' => null,
        'customer_aggreement_ind' => null,
        'total_transit_days' => null,
        'pickup_additional_dates' => null,
        'delivery_additional_days' => null,
        'volumetric_weight' => null,
        'quoted_weight' => null,
        'unit_of_measurement' => null,
        'pickup_day_of_week' => null,
        'destination_day_of_week' => null,
        'pricing_date' => null,
        'origin_service_area' => null,
        'destination_service_area' => null,
        'charges' => null,
        'total_charge_types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_type' => false,
		'delivery_time' => false,
		'delivery_type' => false,
		'cutoff_time' => false,
		'cutoff_time_gmt' => false,
		'cutoff_time_offset' => false,
		'next_business_day_ind' => false,
		'pickup_window_earliest_time' => false,
		'pickup_window_latest_time' => false,
		'service_name' => false,
		'local_service_type' => false,
		'local_service_country_code' => false,
		'network_type_code' => false,
		'customer_aggreement_ind' => false,
		'total_transit_days' => false,
		'pickup_additional_dates' => false,
		'delivery_additional_days' => false,
		'volumetric_weight' => false,
		'quoted_weight' => false,
		'unit_of_measurement' => false,
		'pickup_day_of_week' => false,
		'destination_day_of_week' => false,
		'pricing_date' => false,
		'origin_service_area' => false,
		'destination_service_area' => false,
		'charges' => false,
		'total_charge_types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_type' => '@type',
        'delivery_time' => 'DeliveryTime',
        'delivery_type' => 'DeliveryType',
        'cutoff_time' => 'CutoffTime',
        'cutoff_time_gmt' => 'CutoffTimeGMT',
        'cutoff_time_offset' => 'CutoffTimeOffset',
        'next_business_day_ind' => 'NextBusinessDayInd',
        'pickup_window_earliest_time' => 'PickupWindowEarliestTime',
        'pickup_window_latest_time' => 'PickupWindowLatestTime',
        'service_name' => 'ServiceName',
        'local_service_type' => 'LocalServiceType',
        'local_service_country_code' => 'LocalServiceCountryCode',
        'network_type_code' => 'NetworkTypeCode',
        'customer_aggreement_ind' => 'CustomerAggreementInd',
        'total_transit_days' => 'TotalTransitDays',
        'pickup_additional_dates' => 'PickupAdditionalDates',
        'delivery_additional_days' => 'DeliveryAdditionalDays',
        'volumetric_weight' => 'VolumetricWeight',
        'quoted_weight' => 'QuotedWeight',
        'unit_of_measurement' => 'UnitOfMeasurement',
        'pickup_day_of_week' => 'PickupDayOfWeek',
        'destination_day_of_week' => 'DestinationDayOfWeek',
        'pricing_date' => 'PricingDate',
        'origin_service_area' => 'OriginServiceArea',
        'destination_service_area' => 'DestinationServiceArea',
        'charges' => 'Charges',
        'total_charge_types' => 'TotalChargeTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_type' => 'setAtType',
        'delivery_time' => 'setDeliveryTime',
        'delivery_type' => 'setDeliveryType',
        'cutoff_time' => 'setCutoffTime',
        'cutoff_time_gmt' => 'setCutoffTimeGmt',
        'cutoff_time_offset' => 'setCutoffTimeOffset',
        'next_business_day_ind' => 'setNextBusinessDayInd',
        'pickup_window_earliest_time' => 'setPickupWindowEarliestTime',
        'pickup_window_latest_time' => 'setPickupWindowLatestTime',
        'service_name' => 'setServiceName',
        'local_service_type' => 'setLocalServiceType',
        'local_service_country_code' => 'setLocalServiceCountryCode',
        'network_type_code' => 'setNetworkTypeCode',
        'customer_aggreement_ind' => 'setCustomerAggreementInd',
        'total_transit_days' => 'setTotalTransitDays',
        'pickup_additional_dates' => 'setPickupAdditionalDates',
        'delivery_additional_days' => 'setDeliveryAdditionalDays',
        'volumetric_weight' => 'setVolumetricWeight',
        'quoted_weight' => 'setQuotedWeight',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'pickup_day_of_week' => 'setPickupDayOfWeek',
        'destination_day_of_week' => 'setDestinationDayOfWeek',
        'pricing_date' => 'setPricingDate',
        'origin_service_area' => 'setOriginServiceArea',
        'destination_service_area' => 'setDestinationServiceArea',
        'charges' => 'setCharges',
        'total_charge_types' => 'setTotalChargeTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_type' => 'getAtType',
        'delivery_time' => 'getDeliveryTime',
        'delivery_type' => 'getDeliveryType',
        'cutoff_time' => 'getCutoffTime',
        'cutoff_time_gmt' => 'getCutoffTimeGmt',
        'cutoff_time_offset' => 'getCutoffTimeOffset',
        'next_business_day_ind' => 'getNextBusinessDayInd',
        'pickup_window_earliest_time' => 'getPickupWindowEarliestTime',
        'pickup_window_latest_time' => 'getPickupWindowLatestTime',
        'service_name' => 'getServiceName',
        'local_service_type' => 'getLocalServiceType',
        'local_service_country_code' => 'getLocalServiceCountryCode',
        'network_type_code' => 'getNetworkTypeCode',
        'customer_aggreement_ind' => 'getCustomerAggreementInd',
        'total_transit_days' => 'getTotalTransitDays',
        'pickup_additional_dates' => 'getPickupAdditionalDates',
        'delivery_additional_days' => 'getDeliveryAdditionalDays',
        'volumetric_weight' => 'getVolumetricWeight',
        'quoted_weight' => 'getQuotedWeight',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'pickup_day_of_week' => 'getPickupDayOfWeek',
        'destination_day_of_week' => 'getDestinationDayOfWeek',
        'pricing_date' => 'getPricingDate',
        'origin_service_area' => 'getOriginServiceArea',
        'destination_service_area' => 'getDestinationServiceArea',
        'charges' => 'getCharges',
        'total_charge_types' => 'getTotalChargeTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NEXT_BUSINESS_DAY_IND_Y = 'Y';
    public const NEXT_BUSINESS_DAY_IND_N = 'N';
    public const UNIT_OF_MEASUREMENT_SI = 'SI';
    public const UNIT_OF_MEASUREMENT_SU = 'SU';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextBusinessDayIndAllowableValues()
    {
        return [
            self::NEXT_BUSINESS_DAY_IND_Y,
            self::NEXT_BUSINESS_DAY_IND_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_SI,
            self::UNIT_OF_MEASUREMENT_SU,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('cutoff_time', $data ?? [], null);
        $this->setIfExists('cutoff_time_gmt', $data ?? [], null);
        $this->setIfExists('cutoff_time_offset', $data ?? [], null);
        $this->setIfExists('next_business_day_ind', $data ?? [], null);
        $this->setIfExists('pickup_window_earliest_time', $data ?? [], null);
        $this->setIfExists('pickup_window_latest_time', $data ?? [], null);
        $this->setIfExists('service_name', $data ?? [], null);
        $this->setIfExists('local_service_type', $data ?? [], null);
        $this->setIfExists('local_service_country_code', $data ?? [], null);
        $this->setIfExists('network_type_code', $data ?? [], null);
        $this->setIfExists('customer_aggreement_ind', $data ?? [], null);
        $this->setIfExists('total_transit_days', $data ?? [], null);
        $this->setIfExists('pickup_additional_dates', $data ?? [], null);
        $this->setIfExists('delivery_additional_days', $data ?? [], null);
        $this->setIfExists('volumetric_weight', $data ?? [], null);
        $this->setIfExists('quoted_weight', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('pickup_day_of_week', $data ?? [], null);
        $this->setIfExists('destination_day_of_week', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('origin_service_area', $data ?? [], null);
        $this->setIfExists('destination_service_area', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('total_charge_types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNextBusinessDayIndAllowableValues();
        if (!is_null($this->container['next_business_day_ind']) && !in_array($this->container['next_business_day_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_business_day_ind', must be one of '%s'",
                $this->container['next_business_day_ind'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {

        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }

        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return string|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param string|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {

        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }

        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type delivery_type
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {

        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }

        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets cutoff_time
     *
     * @return string|null
     */
    public function getCutoffTime()
    {
        return $this->container['cutoff_time'];
    }

    /**
     * Sets cutoff_time
     *
     * @param string|null $cutoff_time cutoff_time
     *
     * @return self
     */
    public function setCutoffTime($cutoff_time)
    {

        if (is_null($cutoff_time)) {
            throw new \InvalidArgumentException('non-nullable cutoff_time cannot be null');
        }

        $this->container['cutoff_time'] = $cutoff_time;

        return $this;
    }

    /**
     * Gets cutoff_time_gmt
     *
     * @return string|null
     */
    public function getCutoffTimeGmt()
    {
        return $this->container['cutoff_time_gmt'];
    }

    /**
     * Sets cutoff_time_gmt
     *
     * @param string|null $cutoff_time_gmt cutoff_time_gmt
     *
     * @return self
     */
    public function setCutoffTimeGmt($cutoff_time_gmt)
    {

        if (is_null($cutoff_time_gmt)) {
            throw new \InvalidArgumentException('non-nullable cutoff_time_gmt cannot be null');
        }

        $this->container['cutoff_time_gmt'] = $cutoff_time_gmt;

        return $this;
    }

    /**
     * Gets cutoff_time_offset
     *
     * @return string|null
     */
    public function getCutoffTimeOffset()
    {
        return $this->container['cutoff_time_offset'];
    }

    /**
     * Sets cutoff_time_offset
     *
     * @param string|null $cutoff_time_offset cutoff_time_offset
     *
     * @return self
     */
    public function setCutoffTimeOffset($cutoff_time_offset)
    {

        if (is_null($cutoff_time_offset)) {
            throw new \InvalidArgumentException('non-nullable cutoff_time_offset cannot be null');
        }

        $this->container['cutoff_time_offset'] = $cutoff_time_offset;

        return $this;
    }

    /**
     * Gets next_business_day_ind
     *
     * @return string|null
     */
    public function getNextBusinessDayInd()
    {
        return $this->container['next_business_day_ind'];
    }

    /**
     * Sets next_business_day_ind
     *
     * @param string|null $next_business_day_ind next_business_day_ind
     *
     * @return self
     */
    public function setNextBusinessDayInd($next_business_day_ind)
    {
        $allowedValues = $this->getNextBusinessDayIndAllowableValues();
        if (!is_null($next_business_day_ind) && !in_array($next_business_day_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_business_day_ind', must be one of '%s'",
                    $next_business_day_ind,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($next_business_day_ind)) {
            throw new \InvalidArgumentException('non-nullable next_business_day_ind cannot be null');
        }

        $this->container['next_business_day_ind'] = $next_business_day_ind;

        return $this;
    }

    /**
     * Gets pickup_window_earliest_time
     *
     * @return string|null
     */
    public function getPickupWindowEarliestTime()
    {
        return $this->container['pickup_window_earliest_time'];
    }

    /**
     * Sets pickup_window_earliest_time
     *
     * @param string|null $pickup_window_earliest_time pickup_window_earliest_time
     *
     * @return self
     */
    public function setPickupWindowEarliestTime($pickup_window_earliest_time)
    {

        if (is_null($pickup_window_earliest_time)) {
            throw new \InvalidArgumentException('non-nullable pickup_window_earliest_time cannot be null');
        }

        $this->container['pickup_window_earliest_time'] = $pickup_window_earliest_time;

        return $this;
    }

    /**
     * Gets pickup_window_latest_time
     *
     * @return string|null
     */
    public function getPickupWindowLatestTime()
    {
        return $this->container['pickup_window_latest_time'];
    }

    /**
     * Sets pickup_window_latest_time
     *
     * @param string|null $pickup_window_latest_time pickup_window_latest_time
     *
     * @return self
     */
    public function setPickupWindowLatestTime($pickup_window_latest_time)
    {

        if (is_null($pickup_window_latest_time)) {
            throw new \InvalidArgumentException('non-nullable pickup_window_latest_time cannot be null');
        }

        $this->container['pickup_window_latest_time'] = $pickup_window_latest_time;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name service_name
     *
     * @return self
     */
    public function setServiceName($service_name)
    {

        if (is_null($service_name)) {
            throw new \InvalidArgumentException('non-nullable service_name cannot be null');
        }

        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets local_service_type
     *
     * @return string|null
     */
    public function getLocalServiceType()
    {
        return $this->container['local_service_type'];
    }

    /**
     * Sets local_service_type
     *
     * @param string|null $local_service_type local_service_type
     *
     * @return self
     */
    public function setLocalServiceType($local_service_type)
    {

        if (is_null($local_service_type)) {
            throw new \InvalidArgumentException('non-nullable local_service_type cannot be null');
        }

        $this->container['local_service_type'] = $local_service_type;

        return $this;
    }

    /**
     * Gets local_service_country_code
     *
     * @return string|null
     */
    public function getLocalServiceCountryCode()
    {
        return $this->container['local_service_country_code'];
    }

    /**
     * Sets local_service_country_code
     *
     * @param string|null $local_service_country_code local_service_country_code
     *
     * @return self
     */
    public function setLocalServiceCountryCode($local_service_country_code)
    {

        if (is_null($local_service_country_code)) {
            throw new \InvalidArgumentException('non-nullable local_service_country_code cannot be null');
        }

        $this->container['local_service_country_code'] = $local_service_country_code;

        return $this;
    }

    /**
     * Gets network_type_code
     *
     * @return string|null
     */
    public function getNetworkTypeCode()
    {
        return $this->container['network_type_code'];
    }

    /**
     * Sets network_type_code
     *
     * @param string|null $network_type_code network_type_code
     *
     * @return self
     */
    public function setNetworkTypeCode($network_type_code)
    {

        if (is_null($network_type_code)) {
            throw new \InvalidArgumentException('non-nullable network_type_code cannot be null');
        }

        $this->container['network_type_code'] = $network_type_code;

        return $this;
    }

    /**
     * Gets customer_aggreement_ind
     *
     * @return string|null
     */
    public function getCustomerAggreementInd()
    {
        return $this->container['customer_aggreement_ind'];
    }

    /**
     * Sets customer_aggreement_ind
     *
     * @param string|null $customer_aggreement_ind customer_aggreement_ind
     *
     * @return self
     */
    public function setCustomerAggreementInd($customer_aggreement_ind)
    {

        if (is_null($customer_aggreement_ind)) {
            throw new \InvalidArgumentException('non-nullable customer_aggreement_ind cannot be null');
        }

        $this->container['customer_aggreement_ind'] = $customer_aggreement_ind;

        return $this;
    }

    /**
     * Gets total_transit_days
     *
     * @return int|null
     */
    public function getTotalTransitDays()
    {
        return $this->container['total_transit_days'];
    }

    /**
     * Sets total_transit_days
     *
     * @param int|null $total_transit_days total_transit_days
     *
     * @return self
     */
    public function setTotalTransitDays($total_transit_days)
    {

        if (is_null($total_transit_days)) {
            throw new \InvalidArgumentException('non-nullable total_transit_days cannot be null');
        }

        $this->container['total_transit_days'] = $total_transit_days;

        return $this;
    }

    /**
     * Gets pickup_additional_dates
     *
     * @return int|null
     */
    public function getPickupAdditionalDates()
    {
        return $this->container['pickup_additional_dates'];
    }

    /**
     * Sets pickup_additional_dates
     *
     * @param int|null $pickup_additional_dates pickup_additional_dates
     *
     * @return self
     */
    public function setPickupAdditionalDates($pickup_additional_dates)
    {

        if (is_null($pickup_additional_dates)) {
            throw new \InvalidArgumentException('non-nullable pickup_additional_dates cannot be null');
        }

        $this->container['pickup_additional_dates'] = $pickup_additional_dates;

        return $this;
    }

    /**
     * Gets delivery_additional_days
     *
     * @return int|null
     */
    public function getDeliveryAdditionalDays()
    {
        return $this->container['delivery_additional_days'];
    }

    /**
     * Sets delivery_additional_days
     *
     * @param int|null $delivery_additional_days delivery_additional_days
     *
     * @return self
     */
    public function setDeliveryAdditionalDays($delivery_additional_days)
    {

        if (is_null($delivery_additional_days)) {
            throw new \InvalidArgumentException('non-nullable delivery_additional_days cannot be null');
        }

        $this->container['delivery_additional_days'] = $delivery_additional_days;

        return $this;
    }

    /**
     * Gets volumetric_weight
     *
     * @return float|null
     */
    public function getVolumetricWeight()
    {
        return $this->container['volumetric_weight'];
    }

    /**
     * Sets volumetric_weight
     *
     * @param float|null $volumetric_weight volumetric_weight
     *
     * @return self
     */
    public function setVolumetricWeight($volumetric_weight)
    {

        if (is_null($volumetric_weight)) {
            throw new \InvalidArgumentException('non-nullable volumetric_weight cannot be null');
        }

        $this->container['volumetric_weight'] = $volumetric_weight;

        return $this;
    }

    /**
     * Gets quoted_weight
     *
     * @return float|null
     */
    public function getQuotedWeight()
    {
        return $this->container['quoted_weight'];
    }

    /**
     * Sets quoted_weight
     *
     * @param float|null $quoted_weight quoted_weight
     *
     * @return self
     */
    public function setQuotedWeight($quoted_weight)
    {

        if (is_null($quoted_weight)) {
            throw new \InvalidArgumentException('non-nullable quoted_weight cannot be null');
        }

        $this->container['quoted_weight'] = $quoted_weight;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string|null
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string|null $unit_of_measurement unit_of_measurement
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($unit_of_measurement) && !in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }

        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets pickup_day_of_week
     *
     * @return string|null
     */
    public function getPickupDayOfWeek()
    {
        return $this->container['pickup_day_of_week'];
    }

    /**
     * Sets pickup_day_of_week
     *
     * @param string|null $pickup_day_of_week pickup_day_of_week
     *
     * @return self
     */
    public function setPickupDayOfWeek($pickup_day_of_week)
    {

        if (is_null($pickup_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable pickup_day_of_week cannot be null');
        }

        $this->container['pickup_day_of_week'] = $pickup_day_of_week;

        return $this;
    }

    /**
     * Gets destination_day_of_week
     *
     * @return string|null
     */
    public function getDestinationDayOfWeek()
    {
        return $this->container['destination_day_of_week'];
    }

    /**
     * Sets destination_day_of_week
     *
     * @param string|null $destination_day_of_week destination_day_of_week
     *
     * @return self
     */
    public function setDestinationDayOfWeek($destination_day_of_week)
    {

        if (is_null($destination_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable destination_day_of_week cannot be null');
        }

        $this->container['destination_day_of_week'] = $destination_day_of_week;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return string|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param string|null $pricing_date pricing_date
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {

        if (is_null($pricing_date)) {
            throw new \InvalidArgumentException('non-nullable pricing_date cannot be null');
        }

        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets origin_service_area
     *
     * @return \MyDHL\Model\ServiceArea|null
     */
    public function getOriginServiceArea()
    {
        return $this->container['origin_service_area'];
    }

    /**
     * Sets origin_service_area
     *
     * @param \MyDHL\Model\ServiceArea|null $origin_service_area origin_service_area
     *
     * @return self
     */
    public function setOriginServiceArea($origin_service_area)
    {

        if (is_null($origin_service_area)) {
            throw new \InvalidArgumentException('non-nullable origin_service_area cannot be null');
        }

        $this->container['origin_service_area'] = $origin_service_area;

        return $this;
    }

    /**
     * Gets destination_service_area
     *
     * @return \MyDHL\Model\ServiceArea|null
     */
    public function getDestinationServiceArea()
    {
        return $this->container['destination_service_area'];
    }

    /**
     * Sets destination_service_area
     *
     * @param \MyDHL\Model\ServiceArea|null $destination_service_area destination_service_area
     *
     * @return self
     */
    public function setDestinationServiceArea($destination_service_area)
    {

        if (is_null($destination_service_area)) {
            throw new \InvalidArgumentException('non-nullable destination_service_area cannot be null');
        }

        $this->container['destination_service_area'] = $destination_service_area;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \MyDHL\Model\Charges|null
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \MyDHL\Model\Charges|null $charges charges
     *
     * @return self
     */
    public function setCharges($charges)
    {

        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }

        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets total_charge_types
     *
     * @return \MyDHL\Model\TotalChargeTypes[]|null
     */
    public function getTotalChargeTypes()
    {
        return $this->container['total_charge_types'];
    }

    /**
     * Sets total_charge_types
     *
     * @param \MyDHL\Model\TotalChargeTypes[]|null $total_charge_types total_charge_types
     *
     * @return self
     */
    public function setTotalChargeTypes($total_charge_types)
    {

        if (is_null($total_charge_types)) {
            throw new \InvalidArgumentException('non-nullable total_charge_types cannot be null');
        }

        $this->container['total_charge_types'] = $total_charge_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



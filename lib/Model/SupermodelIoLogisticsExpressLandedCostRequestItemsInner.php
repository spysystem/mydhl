<?php
/**
 * SupermodelIoLogisticsExpressLandedCostRequestItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressLandedCostRequestItemsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressLandedCostRequestItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelFields
    {
        return new SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressLandedCostRequestItemsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressLandedCostRequest_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'float',
        'name' => 'string',
        'description' => 'string',
        'manufacturer_country' => 'string',
        'part_number' => 'string',
        'quantity' => 'float',
        'quantity_type' => 'string',
        'unit_price' => 'float',
        'unit_price_currency_code' => 'string',
        'customs_value' => 'float',
        'customs_value_currency_code' => 'string',
        'commodity_code' => 'string',
        'weight' => 'float',
        'weight_unit_of_measurement' => 'string',
        'category' => 'string',
        'brand' => 'string',
        'goods_characteristics' => '\MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerGoodsCharacteristicsInner[]',
        'additional_quantity_definitions' => '\MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerAdditionalQuantityDefinitionsInner[]',
        'estimated_tariff_rate_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'name' => null,
        'description' => null,
        'manufacturer_country' => null,
        'part_number' => null,
        'quantity' => null,
        'quantity_type' => null,
        'unit_price' => null,
        'unit_price_currency_code' => null,
        'customs_value' => null,
        'customs_value_currency_code' => null,
        'commodity_code' => null,
        'weight' => null,
        'weight_unit_of_measurement' => null,
        'category' => null,
        'brand' => null,
        'goods_characteristics' => null,
        'additional_quantity_definitions' => null,
        'estimated_tariff_rate_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'name' => false,
		'description' => false,
		'manufacturer_country' => false,
		'part_number' => false,
		'quantity' => false,
		'quantity_type' => false,
		'unit_price' => false,
		'unit_price_currency_code' => false,
		'customs_value' => false,
		'customs_value_currency_code' => false,
		'commodity_code' => false,
		'weight' => false,
		'weight_unit_of_measurement' => false,
		'category' => false,
		'brand' => false,
		'goods_characteristics' => false,
		'additional_quantity_definitions' => false,
		'estimated_tariff_rate_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'name' => 'name',
        'description' => 'description',
        'manufacturer_country' => 'manufacturerCountry',
        'part_number' => 'partNumber',
        'quantity' => 'quantity',
        'quantity_type' => 'quantityType',
        'unit_price' => 'unitPrice',
        'unit_price_currency_code' => 'unitPriceCurrencyCode',
        'customs_value' => 'customsValue',
        'customs_value_currency_code' => 'customsValueCurrencyCode',
        'commodity_code' => 'commodityCode',
        'weight' => 'weight',
        'weight_unit_of_measurement' => 'weightUnitOfMeasurement',
        'category' => 'category',
        'brand' => 'brand',
        'goods_characteristics' => 'goodsCharacteristics',
        'additional_quantity_definitions' => 'additionalQuantityDefinitions',
        'estimated_tariff_rate_type' => 'estimatedTariffRateType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'name' => 'setName',
        'description' => 'setDescription',
        'manufacturer_country' => 'setManufacturerCountry',
        'part_number' => 'setPartNumber',
        'quantity' => 'setQuantity',
        'quantity_type' => 'setQuantityType',
        'unit_price' => 'setUnitPrice',
        'unit_price_currency_code' => 'setUnitPriceCurrencyCode',
        'customs_value' => 'setCustomsValue',
        'customs_value_currency_code' => 'setCustomsValueCurrencyCode',
        'commodity_code' => 'setCommodityCode',
        'weight' => 'setWeight',
        'weight_unit_of_measurement' => 'setWeightUnitOfMeasurement',
        'category' => 'setCategory',
        'brand' => 'setBrand',
        'goods_characteristics' => 'setGoodsCharacteristics',
        'additional_quantity_definitions' => 'setAdditionalQuantityDefinitions',
        'estimated_tariff_rate_type' => 'setEstimatedTariffRateType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'name' => 'getName',
        'description' => 'getDescription',
        'manufacturer_country' => 'getManufacturerCountry',
        'part_number' => 'getPartNumber',
        'quantity' => 'getQuantity',
        'quantity_type' => 'getQuantityType',
        'unit_price' => 'getUnitPrice',
        'unit_price_currency_code' => 'getUnitPriceCurrencyCode',
        'customs_value' => 'getCustomsValue',
        'customs_value_currency_code' => 'getCustomsValueCurrencyCode',
        'commodity_code' => 'getCommodityCode',
        'weight' => 'getWeight',
        'weight_unit_of_measurement' => 'getWeightUnitOfMeasurement',
        'category' => 'getCategory',
        'brand' => 'getBrand',
        'goods_characteristics' => 'getGoodsCharacteristics',
        'additional_quantity_definitions' => 'getAdditionalQuantityDefinitions',
        'estimated_tariff_rate_type' => 'getEstimatedTariffRateType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const QUANTITY_TYPE_PRT = 'prt';
    public const QUANTITY_TYPE_BOX = 'box';
    public const WEIGHT_UNIT_OF_MEASUREMENT_METRIC = 'metric';
    public const WEIGHT_UNIT_OF_MEASUREMENT_IMPERIAL = 'imperial';
    public const ESTIMATED_TARIFF_RATE_TYPE_DEFAULT_RATE = 'default_rate';
    public const ESTIMATED_TARIFF_RATE_TYPE_DERIVED_RATE = 'derived_rate';
    public const ESTIMATED_TARIFF_RATE_TYPE_HIGHEST_RATE = 'highest_rate';
    public const ESTIMATED_TARIFF_RATE_TYPE_CENTER_RATE = 'center_rate';
    public const ESTIMATED_TARIFF_RATE_TYPE_LOWEST_RATE = 'lowest_rate';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuantityTypeAllowableValues()
    {
        return [
            self::QUANTITY_TYPE_PRT,
            self::QUANTITY_TYPE_BOX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightUnitOfMeasurementAllowableValues()
    {
        return [
            self::WEIGHT_UNIT_OF_MEASUREMENT_METRIC,
            self::WEIGHT_UNIT_OF_MEASUREMENT_IMPERIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEstimatedTariffRateTypeAllowableValues()
    {
        return [
            self::ESTIMATED_TARIFF_RATE_TYPE_DEFAULT_RATE,
            self::ESTIMATED_TARIFF_RATE_TYPE_DERIVED_RATE,
            self::ESTIMATED_TARIFF_RATE_TYPE_HIGHEST_RATE,
            self::ESTIMATED_TARIFF_RATE_TYPE_CENTER_RATE,
            self::ESTIMATED_TARIFF_RATE_TYPE_LOWEST_RATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('manufacturer_country', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantity_type', $data ?? [], null);
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('unit_price_currency_code', $data ?? [], null);
        $this->setIfExists('customs_value', $data ?? [], null);
        $this->setIfExists('customs_value_currency_code', $data ?? [], null);
        $this->setIfExists('commodity_code', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit_of_measurement', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('goods_characteristics', $data ?? [], null);
        $this->setIfExists('additional_quantity_definitions', $data ?? [], null);
        $this->setIfExists('estimated_tariff_rate_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if (($this->container['number'] > 1000)) {
            $invalidProperties[] = "invalid value for 'number', must be smaller than or equal to 1000.";
        }

        if (($this->container['number'] < 1)) {
            $invalidProperties[] = "invalid value for 'number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 512)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['manufacturer_country']) && (mb_strlen($this->container['manufacturer_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'manufacturer_country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['manufacturer_country']) && (mb_strlen($this->container['manufacturer_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'manufacturer_country', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['part_number']) && (mb_strlen($this->container['part_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'part_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['part_number']) && (mb_strlen($this->container['part_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'part_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 999999999999.";
        }

        $allowedValues = $this->getQuantityTypeAllowableValues();
        if (!is_null($this->container['quantity_type']) && !in_array($this->container['quantity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quantity_type', must be one of '%s'",
                $this->container['quantity_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['quantity_type']) && (mb_strlen($this->container['quantity_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'quantity_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['quantity_type']) && (mb_strlen($this->container['quantity_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'quantity_type', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if (($this->container['unit_price'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 999999999999999.";
        }

        if ($this->container['unit_price_currency_code'] === null) {
            $invalidProperties[] = "'unit_price_currency_code' can't be null";
        }
        if ((mb_strlen($this->container['unit_price_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'unit_price_currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['unit_price_currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'unit_price_currency_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['customs_value']) && ($this->container['customs_value'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'customs_value', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['customs_value_currency_code']) && (mb_strlen($this->container['customs_value_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'customs_value_currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['customs_value_currency_code']) && (mb_strlen($this->container['customs_value_currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'customs_value_currency_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['commodity_code']) && (mb_strlen($this->container['commodity_code']) > 18)) {
            $invalidProperties[] = "invalid value for 'commodity_code', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 999999999999.";
        }

        $allowedValues = $this->getWeightUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['weight_unit_of_measurement']) && !in_array($this->container['weight_unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weight_unit_of_measurement', must be one of '%s'",
                $this->container['weight_unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['category']) && (mb_strlen($this->container['category']) > 50)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) > 50)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['goods_characteristics']) && (count($this->container['goods_characteristics']) > 999)) {
            $invalidProperties[] = "invalid value for 'goods_characteristics', number of items must be less than or equal to 999.";
        }

        if (!is_null($this->container['additional_quantity_definitions']) && (count($this->container['additional_quantity_definitions']) > 100)) {
            $invalidProperties[] = "invalid value for 'additional_quantity_definitions', number of items must be less than or equal to 100.";
        }

        $allowedValues = $this->getEstimatedTariffRateTypeAllowableValues();
        if (!is_null($this->container['estimated_tariff_rate_type']) && !in_array($this->container['estimated_tariff_rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'estimated_tariff_rate_type', must be one of '%s'",
                $this->container['estimated_tariff_rate_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return float
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param float $number Line item number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        if (($number > 1000)) {
            throw new \InvalidArgumentException('invalid value for $number when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 1000.');
        }
        if (($number < 1)) {
            throw new \InvalidArgumentException('invalid value for $number when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the item
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Item full description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets manufacturer_country
     *
     * @return string|null
     */
    public function getManufacturerCountry()
    {
        return $this->container['manufacturer_country'];
    }

    /**
     * Sets manufacturer_country
     *
     * @param string|null $manufacturer_country ISO Country code of the goods manufacturer
     *
     * @return self
     */
    public function setManufacturerCountry($manufacturer_country)
    {
        if (is_null($manufacturer_country)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_country cannot be null');
        }
        if ((mb_strlen($manufacturer_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_country when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($manufacturer_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_country when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 2.');
        }

        $this->container['manufacturer_country'] = $manufacturer_country;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number SKU number
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        if ((mb_strlen($part_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $part_number when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($part_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $part_number when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Total quantity of the item(s) to be shipped.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 999999999999.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_type
     *
     * @return string|null
     */
    public function getQuantityType()
    {
        return $this->container['quantity_type'];
    }

    /**
     * Sets quantity_type
     *
     * @param string|null $quantity_type Please provide quantitiy type. prt - part, box - box
     *
     * @return self
     */
    public function setQuantityType($quantity_type)
    {
        if (is_null($quantity_type)) {
            throw new \InvalidArgumentException('non-nullable quantity_type cannot be null');
        }
        $allowedValues = $this->getQuantityTypeAllowableValues();
        if (!in_array($quantity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quantity_type', must be one of '%s'",
                    $quantity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($quantity_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $quantity_type when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($quantity_type) < 2)) {
            throw new \InvalidArgumentException('invalid length for $quantity_type when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 2.');
        }

        $this->container['quantity_type'] = $quantity_type;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price Product Unit price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 999999999999999.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_currency_code
     *
     * @return string
     */
    public function getUnitPriceCurrencyCode()
    {
        return $this->container['unit_price_currency_code'];
    }

    /**
     * Sets unit_price_currency_code
     *
     * @param string $unit_price_currency_code Currency code of the Unit Price
     *
     * @return self
     */
    public function setUnitPriceCurrencyCode($unit_price_currency_code)
    {
        if (is_null($unit_price_currency_code)) {
            throw new \InvalidArgumentException('non-nullable unit_price_currency_code cannot be null');
        }
        if ((mb_strlen($unit_price_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $unit_price_currency_code when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($unit_price_currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $unit_price_currency_code when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 3.');
        }

        $this->container['unit_price_currency_code'] = $unit_price_currency_code;

        return $this;
    }

    /**
     * Gets customs_value
     *
     * @return float|null
     */
    public function getCustomsValue()
    {
        return $this->container['customs_value'];
    }

    /**
     * Sets customs_value
     *
     * @param float|null $customs_value not used
     *
     * @return self
     */
    public function setCustomsValue($customs_value)
    {
        if (is_null($customs_value)) {
            throw new \InvalidArgumentException('non-nullable customs_value cannot be null');
        }

        if (($customs_value > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $customs_value when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 999999999999999.');
        }

        $this->container['customs_value'] = $customs_value;

        return $this;
    }

    /**
     * Gets customs_value_currency_code
     *
     * @return string|null
     */
    public function getCustomsValueCurrencyCode()
    {
        return $this->container['customs_value_currency_code'];
    }

    /**
     * Sets customs_value_currency_code
     *
     * @param string|null $customs_value_currency_code not used
     *
     * @return self
     */
    public function setCustomsValueCurrencyCode($customs_value_currency_code)
    {
        if (is_null($customs_value_currency_code)) {
            throw new \InvalidArgumentException('non-nullable customs_value_currency_code cannot be null');
        }
        if ((mb_strlen($customs_value_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $customs_value_currency_code when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($customs_value_currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $customs_value_currency_code when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be bigger than or equal to 3.');
        }

        $this->container['customs_value_currency_code'] = $customs_value_currency_code;

        return $this;
    }

    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code commodityCode is mandatory if estimatedTariffRateType ('derived_rate' or 'highest_rate' or 'lowest_rate' or 'center_rate') not provided in the request otherwise it is considered as Optional.<BR>                              'highest_rate' or 'lowest_rate' or 'center_rate') not provided in the request otherwise it is considered as Optional.<BR>            Can be provided with or without dots
     *
     * @return self
     */
    public function setCommodityCode($commodity_code)
    {
        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }
        if ((mb_strlen($commodity_code) > 18)) {
            throw new \InvalidArgumentException('invalid length for $commodity_code when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 18.');
        }

        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Weight of the item
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 999999999999.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit_of_measurement
     *
     * @return string|null
     */
    public function getWeightUnitOfMeasurement()
    {
        return $this->container['weight_unit_of_measurement'];
    }

    /**
     * Sets weight_unit_of_measurement
     *
     * @param string|null $weight_unit_of_measurement Unit of measurement
     *
     * @return self
     */
    public function setWeightUnitOfMeasurement($weight_unit_of_measurement)
    {
        if (is_null($weight_unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable weight_unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getWeightUnitOfMeasurementAllowableValues();
        if (!in_array($weight_unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weight_unit_of_measurement', must be one of '%s'",
                    $weight_unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weight_unit_of_measurement'] = $weight_unit_of_measurement;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category code of the Item.<BR>            101 - Coats & Jacket<BR>            102 - Blazers<BR>            103 - Suits<BR>            104 - Ensembles<BR>            105 - Trousers<BR>            106 - Shirts & Blouses<BR>            107 - Dresses<BR>            108 - Skirts<BR>            109 - Jerseys, Sweatshirts & Pullovers<BR>            110 - Sports & Swimwear<BR>            111 - Night & Underwear<BR>            112 - T-Shirts<BR>            113 - Tights & Leggings<BR>            114 - Socks <BR>            115 - Baby Clothes<BR>            116 - Clothing Accessories<BR>            201 - Sneakers<BR>            202 - Athletic Footwear<BR>            203 - Leather Footwear<BR>            204 - Textile & Other Footwear<BR>            301 - Spectacle Lenses<BR>            302 - Sunglasses<BR>            303 - Eyewear Frames<BR>            304 - Contact Lenses<BR>            401 - Watches<BR>            402 - Jewelry<BR>            403 - Suitcases & Briefcases<BR>            404 - Handbags<BR>            405 - Wallets & Little Cases<BR>            406 - Bags & Containers<BR>            501 - Beer<BR>            502 - Spirits<BR>            503 - Wine<BR>            504 - Cider, Perry & Rice Wine<BR>            601 - Bottled Water<BR>            602 - Soft Drinks<BR>            603 - Juices<BR>            604 - Coffee<BR>            605 - Tea<BR>            606 - Cocoa<BR>            701 - Dairy Products & Eggs<BR>            702 - Meat<BR>            703 - Fish & Seafood<BR>            704 - Fruits & Nuts<BR>            705 - Vegetables<BR>            706 - Bread & Cereal Products<BR>            707 - Oils & Fats<BR>            708 - Sauces & Spices<BR>            709 - Convenience Food<BR>            710 - Spreads & Sweeteners<BR>            711 - Baby Food<BR>            712 - Pet Food<BR>            801 - Cigarettes<BR>            802 - Smoking Tobacco<BR>            803 - Cigars<BR>            804 - E-Cigarettes<BR>            901 - Household Cleaners<BR>            902 - Dishwashing Detergents<BR>            903 - Polishes<BR>            904 - Room Scents<BR>            905 - Insecticides<BR>            1001 - Cosmetics<BR>            1002 - Skin Care<BR>            1003 - Personal Care<BR>            1004 - Fragrances<BR>            1101 - Toilet Paper<BR>            1102 - Paper Tissues<BR>            1103 - Household Paper<BR>            1104 - Feminine Hygiene<BR>            1105 - Baby Diapers<BR>            1106 - Incontinence<BR>            1202 - TV, Radio & Multimedia<BR>            1203 - TV Peripheral Devices<BR>            1204 - Telephony<BR>            1205 - Computing<BR>            1206 - Drones<BR>            1301 - Refrigerators<BR>            1302 - Freezers<BR>            1303 - Dishwashing Machines<BR>            1304 - Washing Machines<BR>            1305 - Cookers & Oven<BR>            1306 - Vacuum Cleaners<BR>            1307 - Small Kitchen Appliances<BR>            1308 - Hair Clippers<BR>            1309 - Irons<BR>            1310 - Toasters<BR>            1311 - Grills & Roasters<BR>            1312 - Hair Dryers<BR>            1313 - Coffee Machines<BR>            1314 - Microwave Ovens<BR>            1315 - Electric Kettles<BR>            1401 - Seats & Sofas<BR>            1402 - Beds<BR>            1403 - Mattresses<BR>            1404 - Closets, Nightstands & Dressers<BR>            1405 - Lamps & Lighting<BR>            1406 - Floor Covering<BR>            1407 - Kitchen Furniture<BR>            1408 - Plastic & Other Furniture<BR>            1501 - Analgesics<BR>            1502 - Cold & Cough Remedies<BR>            1503 - Digestives & Intestinal Remedies<BR>            1504 - Skin Treatment<BR>            1505 - Vitamins & Minerals<BR>            1506 - Hand Sanitizer <BR>            1601 - Toys & Games<BR>            1602 - Musical Instruments<BR>            1603 - Sports Equipment
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        if ((mb_strlen($category) > 50)) {
            throw new \InvalidArgumentException('invalid length for $category when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 50.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Item's brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        if ((mb_strlen($brand) > 50)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., must be smaller than or equal to 50.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets goods_characteristics
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerGoodsCharacteristicsInner[]|null
     */
    public function getGoodsCharacteristics()
    {
        return $this->container['goods_characteristics'];
    }

    /**
     * Sets goods_characteristics
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerGoodsCharacteristicsInner[]|null $goods_characteristics goods_characteristics
     *
     * @return self
     */
    public function setGoodsCharacteristics($goods_characteristics)
    {
        if (is_null($goods_characteristics)) {
            throw new \InvalidArgumentException('non-nullable goods_characteristics cannot be null');
        }

        if ((count($goods_characteristics) > 999)) {
            throw new \InvalidArgumentException('invalid value for $goods_characteristics when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., number of items must be less than or equal to 999.');
        }
        $this->container['goods_characteristics'] = $goods_characteristics;

        return $this;
    }

    /**
     * Gets additional_quantity_definitions
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerAdditionalQuantityDefinitionsInner[]|null
     */
    public function getAdditionalQuantityDefinitions()
    {
        return $this->container['additional_quantity_definitions'];
    }

    /**
     * Sets additional_quantity_definitions
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequestItemsInnerAdditionalQuantityDefinitionsInner[]|null $additional_quantity_definitions additional_quantity_definitions
     *
     * @return self
     */
    public function setAdditionalQuantityDefinitions($additional_quantity_definitions)
    {
        if (is_null($additional_quantity_definitions)) {
            throw new \InvalidArgumentException('non-nullable additional_quantity_definitions cannot be null');
        }

        if ((count($additional_quantity_definitions) > 100)) {
            throw new \InvalidArgumentException('invalid value for $additional_quantity_definitions when calling SupermodelIoLogisticsExpressLandedCostRequestItemsInner., number of items must be less than or equal to 100.');
        }
        $this->container['additional_quantity_definitions'] = $additional_quantity_definitions;

        return $this;
    }

    /**
     * Gets estimated_tariff_rate_type
     *
     * @return string|null
     */
    public function getEstimatedTariffRateType()
    {
        return $this->container['estimated_tariff_rate_type'];
    }

    /**
     * Sets estimated_tariff_rate_type
     *
     * @param string|null $estimated_tariff_rate_type Please enter Tariff Rate Type - default_rate,derived_rate,highest_rate,center_rate,lowest_rate
     *
     * @return self
     */
    public function setEstimatedTariffRateType($estimated_tariff_rate_type)
    {
        if (is_null($estimated_tariff_rate_type)) {
            throw new \InvalidArgumentException('non-nullable estimated_tariff_rate_type cannot be null');
        }
        $allowedValues = $this->getEstimatedTariffRateTypeAllowableValues();
        if (!in_array($estimated_tariff_rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'estimated_tariff_rate_type', must be one of '%s'",
                    $estimated_tariff_rate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['estimated_tariff_rate_type'] = $estimated_tariff_rate_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



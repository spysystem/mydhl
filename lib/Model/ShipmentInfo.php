<?php
/**
 * ShipmentInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * ShipmentInfo Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ShipmentInfoModelFields
      */
    public static function GetModelFields(): ShipmentInfoModelFields
    {
        return new ShipmentInfoModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ShipmentInfoModelAttributes
      */
    public static function GetModelAttributes(): ShipmentInfoModelAttributes
    {
        return new ShipmentInfoModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'drop_off_type' => 'string',
        'service_type' => 'string',
        'local_service_type' => 'string',
        'account' => 'string',
        'currency' => 'string',
        'unit_of_measurement' => 'string',
        'shipment_identification_number' => 'string',
        'use_own_shipment_identification_number' => 'string',
        'label_type' => 'string',
        'label_template' => 'string',
        'archive_label_template' => 'string',
        'customs_invoice_template' => 'string',
        'shipment_receipt_template' => 'string',
        'paperless_trade_enabled' => 'string',
        'parent_shipment_identification_number' => 'string',
        'request_transliterate_response' => 'string',
        'request_additional_information' => 'string',
        'billing' => '\MyDHL\Model\Billing',
        'document_images' => '\MyDHL\Model\DocumentImages',
        'label_options' => '\MyDHL\Model\LabelOptions',
        'special_services' => '\MyDHL\Model\SpecialServices'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'drop_off_type' => null,
        'service_type' => null,
        'local_service_type' => null,
        'account' => null,
        'currency' => null,
        'unit_of_measurement' => null,
        'shipment_identification_number' => null,
        'use_own_shipment_identification_number' => null,
        'label_type' => null,
        'label_template' => null,
        'archive_label_template' => null,
        'customs_invoice_template' => null,
        'shipment_receipt_template' => null,
        'paperless_trade_enabled' => null,
        'parent_shipment_identification_number' => null,
        'request_transliterate_response' => null,
        'request_additional_information' => null,
        'billing' => null,
        'document_images' => null,
        'label_options' => null,
        'special_services' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'drop_off_type' => false,
		'service_type' => false,
		'local_service_type' => false,
		'account' => false,
		'currency' => false,
		'unit_of_measurement' => false,
		'shipment_identification_number' => false,
		'use_own_shipment_identification_number' => false,
		'label_type' => false,
		'label_template' => false,
		'archive_label_template' => false,
		'customs_invoice_template' => false,
		'shipment_receipt_template' => false,
		'paperless_trade_enabled' => false,
		'parent_shipment_identification_number' => false,
		'request_transliterate_response' => false,
		'request_additional_information' => false,
		'billing' => false,
		'document_images' => false,
		'label_options' => false,
		'special_services' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'drop_off_type' => 'DropOffType',
        'service_type' => 'ServiceType',
        'local_service_type' => 'LocalServiceType',
        'account' => 'Account',
        'currency' => 'Currency',
        'unit_of_measurement' => 'UnitOfMeasurement',
        'shipment_identification_number' => 'ShipmentIdentificationNumber',
        'use_own_shipment_identification_number' => 'UseOwnShipmentIdentificationNumber',
        'label_type' => 'LabelType',
        'label_template' => 'LabelTemplate',
        'archive_label_template' => 'ArchiveLabelTemplate',
        'customs_invoice_template' => 'CustomsInvoiceTemplate',
        'shipment_receipt_template' => 'ShipmentReceiptTemplate',
        'paperless_trade_enabled' => 'PaperlessTradeEnabled',
        'parent_shipment_identification_number' => 'ParentShipmentIdentificationNumber',
        'request_transliterate_response' => 'RequestTransliterateResponse',
        'request_additional_information' => 'RequestAdditionalInformation',
        'billing' => 'Billing',
        'document_images' => 'DocumentImages',
        'label_options' => 'LabelOptions',
        'special_services' => 'SpecialServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'drop_off_type' => 'setDropOffType',
        'service_type' => 'setServiceType',
        'local_service_type' => 'setLocalServiceType',
        'account' => 'setAccount',
        'currency' => 'setCurrency',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'shipment_identification_number' => 'setShipmentIdentificationNumber',
        'use_own_shipment_identification_number' => 'setUseOwnShipmentIdentificationNumber',
        'label_type' => 'setLabelType',
        'label_template' => 'setLabelTemplate',
        'archive_label_template' => 'setArchiveLabelTemplate',
        'customs_invoice_template' => 'setCustomsInvoiceTemplate',
        'shipment_receipt_template' => 'setShipmentReceiptTemplate',
        'paperless_trade_enabled' => 'setPaperlessTradeEnabled',
        'parent_shipment_identification_number' => 'setParentShipmentIdentificationNumber',
        'request_transliterate_response' => 'setRequestTransliterateResponse',
        'request_additional_information' => 'setRequestAdditionalInformation',
        'billing' => 'setBilling',
        'document_images' => 'setDocumentImages',
        'label_options' => 'setLabelOptions',
        'special_services' => 'setSpecialServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'drop_off_type' => 'getDropOffType',
        'service_type' => 'getServiceType',
        'local_service_type' => 'getLocalServiceType',
        'account' => 'getAccount',
        'currency' => 'getCurrency',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'shipment_identification_number' => 'getShipmentIdentificationNumber',
        'use_own_shipment_identification_number' => 'getUseOwnShipmentIdentificationNumber',
        'label_type' => 'getLabelType',
        'label_template' => 'getLabelTemplate',
        'archive_label_template' => 'getArchiveLabelTemplate',
        'customs_invoice_template' => 'getCustomsInvoiceTemplate',
        'shipment_receipt_template' => 'getShipmentReceiptTemplate',
        'paperless_trade_enabled' => 'getPaperlessTradeEnabled',
        'parent_shipment_identification_number' => 'getParentShipmentIdentificationNumber',
        'request_transliterate_response' => 'getRequestTransliterateResponse',
        'request_additional_information' => 'getRequestAdditionalInformation',
        'billing' => 'getBilling',
        'document_images' => 'getDocumentImages',
        'label_options' => 'getLabelOptions',
        'special_services' => 'getSpecialServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DROP_OFF_TYPE_REGULAR_PICKUP = 'REGULAR_PICKUP';
    public const DROP_OFF_TYPE_REQUEST_COURIER = 'REQUEST_COURIER';
    public const UNIT_OF_MEASUREMENT_SI = 'SI';
    public const UNIT_OF_MEASUREMENT_SU = 'SU';
    public const LABEL_TYPE_PDF = 'PDF';
    public const LABEL_TYPE_ZPL = 'ZPL';
    public const LABEL_TYPE_EPL = 'EPL';
    public const LABEL_TYPE_LP2 = 'LP2';
    public const REQUEST_ADDITIONAL_INFORMATION_Y = 'Y';
    public const REQUEST_ADDITIONAL_INFORMATION_N = 'N';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropOffTypeAllowableValues()
    {
        return [
            self::DROP_OFF_TYPE_REGULAR_PICKUP,
            self::DROP_OFF_TYPE_REQUEST_COURIER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_SI,
            self::UNIT_OF_MEASUREMENT_SU,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelTypeAllowableValues()
    {
        return [
            self::LABEL_TYPE_PDF,
            self::LABEL_TYPE_ZPL,
            self::LABEL_TYPE_EPL,
            self::LABEL_TYPE_LP2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestAdditionalInformationAllowableValues()
    {
        return [
            self::REQUEST_ADDITIONAL_INFORMATION_Y,
            self::REQUEST_ADDITIONAL_INFORMATION_N,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('drop_off_type', $data ?? [], null);
        $this->setIfExists('service_type', $data ?? [], null);
        $this->setIfExists('local_service_type', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('shipment_identification_number', $data ?? [], null);
        $this->setIfExists('use_own_shipment_identification_number', $data ?? [], null);
        $this->setIfExists('label_type', $data ?? [], null);
        $this->setIfExists('label_template', $data ?? [], null);
        $this->setIfExists('archive_label_template', $data ?? [], null);
        $this->setIfExists('customs_invoice_template', $data ?? [], null);
        $this->setIfExists('shipment_receipt_template', $data ?? [], null);
        $this->setIfExists('paperless_trade_enabled', $data ?? [], null);
        $this->setIfExists('parent_shipment_identification_number', $data ?? [], null);
        $this->setIfExists('request_transliterate_response', $data ?? [], null);
        $this->setIfExists('request_additional_information', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('document_images', $data ?? [], null);
        $this->setIfExists('label_options', $data ?? [], null);
        $this->setIfExists('special_services', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['drop_off_type'] === null) {
            $invalidProperties[] = "'drop_off_type' can't be null";
        }
        $allowedValues = $this->getDropOffTypeAllowableValues();
        if (!is_null($this->container['drop_off_type']) && !in_array($this->container['drop_off_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_off_type', must be one of '%s'",
                $this->container['drop_off_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['service_type'] === null) {
            $invalidProperties[] = "'service_type' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($this->container['label_type']) && !in_array($this->container['label_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label_type', must be one of '%s'",
                $this->container['label_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestAdditionalInformationAllowableValues();
        if (!is_null($this->container['request_additional_information']) && !in_array($this->container['request_additional_information'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_additional_information', must be one of '%s'",
                $this->container['request_additional_information'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets drop_off_type
     *
     * @return string
     */
    public function getDropOffType()
    {
        return $this->container['drop_off_type'];
    }

    /**
     * Sets drop_off_type
     *
     * @param string $drop_off_type drop_off_type
     *
     * @return self
     */
    public function setDropOffType($drop_off_type)
    {
        $allowedValues = $this->getDropOffTypeAllowableValues();
        if (!in_array($drop_off_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_off_type', must be one of '%s'",
                    $drop_off_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($drop_off_type)) {
            throw new \InvalidArgumentException('non-nullable drop_off_type cannot be null');
        }

        $this->container['drop_off_type'] = $drop_off_type;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string $service_type service_type
     *
     * @return self
     */
    public function setServiceType($service_type)
    {

        if (is_null($service_type)) {
            throw new \InvalidArgumentException('non-nullable service_type cannot be null');
        }

        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets local_service_type
     *
     * @return string|null
     */
    public function getLocalServiceType()
    {
        return $this->container['local_service_type'];
    }

    /**
     * Sets local_service_type
     *
     * @param string|null $local_service_type local_service_type
     *
     * @return self
     */
    public function setLocalServiceType($local_service_type)
    {

        if (is_null($local_service_type)) {
            throw new \InvalidArgumentException('non-nullable local_service_type cannot be null');
        }

        $this->container['local_service_type'] = $local_service_type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {

        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }

        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement unit_of_measurement
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }

        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets shipment_identification_number
     *
     * @return string|null
     */
    public function getShipmentIdentificationNumber()
    {
        return $this->container['shipment_identification_number'];
    }

    /**
     * Sets shipment_identification_number
     *
     * @param string|null $shipment_identification_number shipment_identification_number
     *
     * @return self
     */
    public function setShipmentIdentificationNumber($shipment_identification_number)
    {

        if (is_null($shipment_identification_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_identification_number cannot be null');
        }

        $this->container['shipment_identification_number'] = $shipment_identification_number;

        return $this;
    }

    /**
     * Gets use_own_shipment_identification_number
     *
     * @return string|null
     */
    public function getUseOwnShipmentIdentificationNumber()
    {
        return $this->container['use_own_shipment_identification_number'];
    }

    /**
     * Sets use_own_shipment_identification_number
     *
     * @param string|null $use_own_shipment_identification_number use_own_shipment_identification_number
     *
     * @return self
     */
    public function setUseOwnShipmentIdentificationNumber($use_own_shipment_identification_number)
    {

        if (is_null($use_own_shipment_identification_number)) {
            throw new \InvalidArgumentException('non-nullable use_own_shipment_identification_number cannot be null');
        }

        $this->container['use_own_shipment_identification_number'] = $use_own_shipment_identification_number;

        return $this;
    }

    /**
     * Gets label_type
     *
     * @return string|null
     */
    public function getLabelType()
    {
        return $this->container['label_type'];
    }

    /**
     * Sets label_type
     *
     * @param string|null $label_type label_type
     *
     * @return self
     */
    public function setLabelType($label_type)
    {
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($label_type) && !in_array($label_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label_type', must be one of '%s'",
                    $label_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($label_type)) {
            throw new \InvalidArgumentException('non-nullable label_type cannot be null');
        }

        $this->container['label_type'] = $label_type;

        return $this;
    }

    /**
     * Gets label_template
     *
     * @return string|null
     */
    public function getLabelTemplate()
    {
        return $this->container['label_template'];
    }

    /**
     * Sets label_template
     *
     * @param string|null $label_template label_template
     *
     * @return self
     */
    public function setLabelTemplate($label_template)
    {

        if (is_null($label_template)) {
            throw new \InvalidArgumentException('non-nullable label_template cannot be null');
        }

        $this->container['label_template'] = $label_template;

        return $this;
    }

    /**
     * Gets archive_label_template
     *
     * @return string|null
     */
    public function getArchiveLabelTemplate()
    {
        return $this->container['archive_label_template'];
    }

    /**
     * Sets archive_label_template
     *
     * @param string|null $archive_label_template archive_label_template
     *
     * @return self
     */
    public function setArchiveLabelTemplate($archive_label_template)
    {

        if (is_null($archive_label_template)) {
            throw new \InvalidArgumentException('non-nullable archive_label_template cannot be null');
        }

        $this->container['archive_label_template'] = $archive_label_template;

        return $this;
    }

    /**
     * Gets customs_invoice_template
     *
     * @return string|null
     */
    public function getCustomsInvoiceTemplate()
    {
        return $this->container['customs_invoice_template'];
    }

    /**
     * Sets customs_invoice_template
     *
     * @param string|null $customs_invoice_template customs_invoice_template
     *
     * @return self
     */
    public function setCustomsInvoiceTemplate($customs_invoice_template)
    {

        if (is_null($customs_invoice_template)) {
            throw new \InvalidArgumentException('non-nullable customs_invoice_template cannot be null');
        }

        $this->container['customs_invoice_template'] = $customs_invoice_template;

        return $this;
    }

    /**
     * Gets shipment_receipt_template
     *
     * @return string|null
     */
    public function getShipmentReceiptTemplate()
    {
        return $this->container['shipment_receipt_template'];
    }

    /**
     * Sets shipment_receipt_template
     *
     * @param string|null $shipment_receipt_template shipment_receipt_template
     *
     * @return self
     */
    public function setShipmentReceiptTemplate($shipment_receipt_template)
    {

        if (is_null($shipment_receipt_template)) {
            throw new \InvalidArgumentException('non-nullable shipment_receipt_template cannot be null');
        }

        $this->container['shipment_receipt_template'] = $shipment_receipt_template;

        return $this;
    }

    /**
     * Gets paperless_trade_enabled
     *
     * @return string|null
     */
    public function getPaperlessTradeEnabled()
    {
        return $this->container['paperless_trade_enabled'];
    }

    /**
     * Sets paperless_trade_enabled
     *
     * @param string|null $paperless_trade_enabled paperless_trade_enabled
     *
     * @return self
     */
    public function setPaperlessTradeEnabled($paperless_trade_enabled)
    {

        if (is_null($paperless_trade_enabled)) {
            throw new \InvalidArgumentException('non-nullable paperless_trade_enabled cannot be null');
        }

        $this->container['paperless_trade_enabled'] = $paperless_trade_enabled;

        return $this;
    }

    /**
     * Gets parent_shipment_identification_number
     *
     * @return string|null
     */
    public function getParentShipmentIdentificationNumber()
    {
        return $this->container['parent_shipment_identification_number'];
    }

    /**
     * Sets parent_shipment_identification_number
     *
     * @param string|null $parent_shipment_identification_number parent_shipment_identification_number
     *
     * @return self
     */
    public function setParentShipmentIdentificationNumber($parent_shipment_identification_number)
    {

        if (is_null($parent_shipment_identification_number)) {
            throw new \InvalidArgumentException('non-nullable parent_shipment_identification_number cannot be null');
        }

        $this->container['parent_shipment_identification_number'] = $parent_shipment_identification_number;

        return $this;
    }

    /**
     * Gets request_transliterate_response
     *
     * @return string|null
     */
    public function getRequestTransliterateResponse()
    {
        return $this->container['request_transliterate_response'];
    }

    /**
     * Sets request_transliterate_response
     *
     * @param string|null $request_transliterate_response request_transliterate_response
     *
     * @return self
     */
    public function setRequestTransliterateResponse($request_transliterate_response)
    {

        if (is_null($request_transliterate_response)) {
            throw new \InvalidArgumentException('non-nullable request_transliterate_response cannot be null');
        }

        $this->container['request_transliterate_response'] = $request_transliterate_response;

        return $this;
    }

    /**
     * Gets request_additional_information
     *
     * @return string|null
     */
    public function getRequestAdditionalInformation()
    {
        return $this->container['request_additional_information'];
    }

    /**
     * Sets request_additional_information
     *
     * @param string|null $request_additional_information request_additional_information
     *
     * @return self
     */
    public function setRequestAdditionalInformation($request_additional_information)
    {
        $allowedValues = $this->getRequestAdditionalInformationAllowableValues();
        if (!is_null($request_additional_information) && !in_array($request_additional_information, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_additional_information', must be one of '%s'",
                    $request_additional_information,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($request_additional_information)) {
            throw new \InvalidArgumentException('non-nullable request_additional_information cannot be null');
        }

        $this->container['request_additional_information'] = $request_additional_information;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \MyDHL\Model\Billing|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \MyDHL\Model\Billing|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {

        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }

        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets document_images
     *
     * @return \MyDHL\Model\DocumentImages|null
     */
    public function getDocumentImages()
    {
        return $this->container['document_images'];
    }

    /**
     * Sets document_images
     *
     * @param \MyDHL\Model\DocumentImages|null $document_images document_images
     *
     * @return self
     */
    public function setDocumentImages($document_images)
    {

        if (is_null($document_images)) {
            throw new \InvalidArgumentException('non-nullable document_images cannot be null');
        }

        $this->container['document_images'] = $document_images;

        return $this;
    }

    /**
     * Gets label_options
     *
     * @return \MyDHL\Model\LabelOptions|null
     */
    public function getLabelOptions()
    {
        return $this->container['label_options'];
    }

    /**
     * Sets label_options
     *
     * @param \MyDHL\Model\LabelOptions|null $label_options label_options
     *
     * @return self
     */
    public function setLabelOptions($label_options)
    {

        if (is_null($label_options)) {
            throw new \InvalidArgumentException('non-nullable label_options cannot be null');
        }

        $this->container['label_options'] = $label_options;

        return $this;
    }

    /**
     * Gets special_services
     *
     * @return \MyDHL\Model\SpecialServices|null
     */
    public function getSpecialServices()
    {
        return $this->container['special_services'];
    }

    /**
     * Sets special_services
     *
     * @param \MyDHL\Model\SpecialServices|null $special_services special_services
     *
     * @return self
     */
    public function setSpecialServices($special_services)
    {

        if (is_null($special_services)) {
            throw new \InvalidArgumentException('non-nullable special_services cannot be null');
        }

        $this->container['special_services'] = $special_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



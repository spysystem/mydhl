<?php
/**
 * SupermodelIoLogisticsExpressUpdatePickupRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressUpdatePickupRequest Class Doc Comment
 *
 * @category Class
 * @description UpdatePickup schema definition
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressUpdatePickupRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressUpdatePickupRequestModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressUpdatePickupRequestModelFields
    {
        return new SupermodelIoLogisticsExpressUpdatePickupRequestModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressUpdatePickupRequestModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressUpdatePickupRequestModelAttributes
    {
        return new SupermodelIoLogisticsExpressUpdatePickupRequestModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressUpdatePickupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dispatch_confirmation_number' => 'string',
        'original_shipper_account_number' => 'string',
        'planned_pickup_date_and_time' => 'string',
        'close_time' => 'string',
        'location' => 'string',
        'location_type' => 'string',
        'accounts' => '\MyDHL\Model\SupermodelIoLogisticsExpressAccount[]',
        'special_instructions' => '\MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner[]',
        'remark' => 'string',
        'customer_details' => '\MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestCustomerDetails',
        'shipment_details' => '\MyDHL\Model\SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dispatch_confirmation_number' => null,
        'original_shipper_account_number' => null,
        'planned_pickup_date_and_time' => null,
        'close_time' => null,
        'location' => null,
        'location_type' => null,
        'accounts' => null,
        'special_instructions' => null,
        'remark' => null,
        'customer_details' => null,
        'shipment_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dispatch_confirmation_number' => false,
		'original_shipper_account_number' => false,
		'planned_pickup_date_and_time' => false,
		'close_time' => false,
		'location' => false,
		'location_type' => false,
		'accounts' => false,
		'special_instructions' => false,
		'remark' => false,
		'customer_details' => false,
		'shipment_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dispatch_confirmation_number' => 'dispatchConfirmationNumber',
        'original_shipper_account_number' => 'originalShipperAccountNumber',
        'planned_pickup_date_and_time' => 'plannedPickupDateAndTime',
        'close_time' => 'closeTime',
        'location' => 'location',
        'location_type' => 'locationType',
        'accounts' => 'accounts',
        'special_instructions' => 'specialInstructions',
        'remark' => 'remark',
        'customer_details' => 'customerDetails',
        'shipment_details' => 'shipmentDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dispatch_confirmation_number' => 'setDispatchConfirmationNumber',
        'original_shipper_account_number' => 'setOriginalShipperAccountNumber',
        'planned_pickup_date_and_time' => 'setPlannedPickupDateAndTime',
        'close_time' => 'setCloseTime',
        'location' => 'setLocation',
        'location_type' => 'setLocationType',
        'accounts' => 'setAccounts',
        'special_instructions' => 'setSpecialInstructions',
        'remark' => 'setRemark',
        'customer_details' => 'setCustomerDetails',
        'shipment_details' => 'setShipmentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dispatch_confirmation_number' => 'getDispatchConfirmationNumber',
        'original_shipper_account_number' => 'getOriginalShipperAccountNumber',
        'planned_pickup_date_and_time' => 'getPlannedPickupDateAndTime',
        'close_time' => 'getCloseTime',
        'location' => 'getLocation',
        'location_type' => 'getLocationType',
        'accounts' => 'getAccounts',
        'special_instructions' => 'getSpecialInstructions',
        'remark' => 'getRemark',
        'customer_details' => 'getCustomerDetails',
        'shipment_details' => 'getShipmentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LOCATION_TYPE_BUSINESS = 'business';
    public const LOCATION_TYPE_RESIDENCE = 'residence';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE_BUSINESS,
            self::LOCATION_TYPE_RESIDENCE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dispatch_confirmation_number', $data ?? [], null);
        $this->setIfExists('original_shipper_account_number', $data ?? [], null);
        $this->setIfExists('planned_pickup_date_and_time', $data ?? [], null);
        $this->setIfExists('close_time', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('location_type', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('special_instructions', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('shipment_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dispatch_confirmation_number'] === null) {
            $invalidProperties[] = "'dispatch_confirmation_number' can't be null";
        }
        if ((mb_strlen($this->container['dispatch_confirmation_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'dispatch_confirmation_number', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['dispatch_confirmation_number']) < 15)) {
            $invalidProperties[] = "invalid value for 'dispatch_confirmation_number', the character length must be bigger than or equal to 15.";
        }

        if ($this->container['original_shipper_account_number'] === null) {
            $invalidProperties[] = "'original_shipper_account_number' can't be null";
        }
        if ((mb_strlen($this->container['original_shipper_account_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'original_shipper_account_number', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['original_shipper_account_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'original_shipper_account_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['planned_pickup_date_and_time'] === null) {
            $invalidProperties[] = "'planned_pickup_date_and_time' can't be null";
        }
        if ((mb_strlen($this->container['planned_pickup_date_and_time']) > 29)) {
            $invalidProperties[] = "invalid value for 'planned_pickup_date_and_time', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['planned_pickup_date_and_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'planned_pickup_date_and_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['close_time']) && (mb_strlen($this->container['close_time']) > 5)) {
            $invalidProperties[] = "invalid value for 'close_time', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['close_time']) && !preg_match("/([0-1][0-9]|2[0-3]):([0-5][0-9])/", $this->container['close_time'])) {
            $invalidProperties[] = "invalid value for 'close_time', must be conform to the pattern /([0-1][0-9]|2[0-3]):([0-5][0-9])/.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 80)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 80.";
        }

        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($this->container['location_type']) && !in_array($this->container['location_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'location_type', must be one of '%s'",
                $this->container['location_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['accounts'] === null) {
            $invalidProperties[] = "'accounts' can't be null";
        }
        if ((count($this->container['accounts']) > 5)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be less than or equal to 5.";
        }

        if ((count($this->container['accounts']) < 1)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['special_instructions']) && (count($this->container['special_instructions']) > 4)) {
            $invalidProperties[] = "invalid value for 'special_instructions', number of items must be less than or equal to 4.";
        }

        if ($this->container['customer_details'] === null) {
            $invalidProperties[] = "'customer_details' can't be null";
        }
        if (!is_null($this->container['shipment_details']) && (count($this->container['shipment_details']) > 999)) {
            $invalidProperties[] = "invalid value for 'shipment_details', number of items must be less than or equal to 999.";
        }

        if (!is_null($this->container['shipment_details']) && (count($this->container['shipment_details']) < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_details', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dispatch_confirmation_number
     *
     * @return string
     */
    public function getDispatchConfirmationNumber()
    {
        return $this->container['dispatch_confirmation_number'];
    }

    /**
     * Sets dispatch_confirmation_number
     *
     * @param string $dispatch_confirmation_number Please enter Dispatch confirmation number which identifies the already scheduled pickup
     *
     * @return self
     */
    public function setDispatchConfirmationNumber($dispatch_confirmation_number)
    {
        if (is_null($dispatch_confirmation_number)) {
            throw new \InvalidArgumentException('non-nullable dispatch_confirmation_number cannot be null');
        }
        if ((mb_strlen($dispatch_confirmation_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $dispatch_confirmation_number when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($dispatch_confirmation_number) < 15)) {
            throw new \InvalidArgumentException('invalid length for $dispatch_confirmation_number when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be bigger than or equal to 15.');
        }

        $this->container['dispatch_confirmation_number'] = $dispatch_confirmation_number;

        return $this;
    }

    /**
     * Gets original_shipper_account_number
     *
     * @return string
     */
    public function getOriginalShipperAccountNumber()
    {
        return $this->container['original_shipper_account_number'];
    }

    /**
     * Sets original_shipper_account_number
     *
     * @param string $original_shipper_account_number Please enter the shipper account number which was used during the scheduled pickup creation
     *
     * @return self
     */
    public function setOriginalShipperAccountNumber($original_shipper_account_number)
    {
        if (is_null($original_shipper_account_number)) {
            throw new \InvalidArgumentException('non-nullable original_shipper_account_number cannot be null');
        }
        if ((mb_strlen($original_shipper_account_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $original_shipper_account_number when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($original_shipper_account_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original_shipper_account_number when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be bigger than or equal to 1.');
        }

        $this->container['original_shipper_account_number'] = $original_shipper_account_number;

        return $this;
    }

    /**
     * Gets planned_pickup_date_and_time
     *
     * @return string
     */
    public function getPlannedPickupDateAndTime()
    {
        return $this->container['planned_pickup_date_and_time'];
    }

    /**
     * Sets planned_pickup_date_and_time
     *
     * @param string $planned_pickup_date_and_time Identifies the date and time the package is ready for pickup Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).<BR>
     *
     * @return self
     */
    public function setPlannedPickupDateAndTime($planned_pickup_date_and_time)
    {
        if (is_null($planned_pickup_date_and_time)) {
            throw new \InvalidArgumentException('non-nullable planned_pickup_date_and_time cannot be null');
        }
        if ((mb_strlen($planned_pickup_date_and_time) > 29)) {
            throw new \InvalidArgumentException('invalid length for $planned_pickup_date_and_time when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($planned_pickup_date_and_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $planned_pickup_date_and_time when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be bigger than or equal to 1.');
        }

        $this->container['planned_pickup_date_and_time'] = $planned_pickup_date_and_time;

        return $this;
    }

    /**
     * Gets close_time
     *
     * @return string|null
     */
    public function getCloseTime()
    {
        return $this->container['close_time'];
    }

    /**
     * Sets close_time
     *
     * @param string|null $close_time The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM)
     *
     * @return self
     */
    public function setCloseTime($close_time)
    {
        if (is_null($close_time)) {
            throw new \InvalidArgumentException('non-nullable close_time cannot be null');
        }
        if ((mb_strlen($close_time) > 5)) {
            throw new \InvalidArgumentException('invalid length for $close_time when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be smaller than or equal to 5.');
        }
        if ((!preg_match("/([0-1][0-9]|2[0-3]):([0-5][0-9])/", $close_time))) {
            throw new \InvalidArgumentException("invalid value for \$close_time when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must conform to the pattern /([0-1][0-9]|2[0-3]):([0-5][0-9])/.");
        }

        $this->container['close_time'] = $close_time;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Provides information on where the package should be picked up by DHL courier. <BR>
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        if ((mb_strlen($location) > 80)) {
            throw new \InvalidArgumentException('invalid length for $location when calling SupermodelIoLogisticsExpressUpdatePickupRequest., must be smaller than or equal to 80.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string|null
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string|null $location_type Provides information on where the package should be picked up by DHL courier. <BR>
     *
     * @return self
     */
    public function setLocationType($location_type)
    {
        if (is_null($location_type)) {
            throw new \InvalidArgumentException('non-nullable location_type cannot be null');
        }
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!in_array($location_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'location_type', must be one of '%s'",
                    $location_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressAccount[] $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }

        if ((count($accounts) > 5)) {
            throw new \InvalidArgumentException('invalid value for $accounts when calling SupermodelIoLogisticsExpressUpdatePickupRequest., number of items must be less than or equal to 5.');
        }
        if ((count($accounts) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accounts when calling SupermodelIoLogisticsExpressUpdatePickupRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner[]|null
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestSpecialInstructionsInner[]|null $special_instructions Details special pickup instructions you may wish to send to the DHL Courier.
     *
     * @return self
     */
    public function setSpecialInstructions($special_instructions)
    {
        if (is_null($special_instructions)) {
            throw new \InvalidArgumentException('non-nullable special_instructions cannot be null');
        }

        if ((count($special_instructions) > 4)) {
            throw new \InvalidArgumentException('invalid value for $special_instructions when calling SupermodelIoLogisticsExpressUpdatePickupRequest., number of items must be less than or equal to 4.');
        }
        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark Please provide additional pickup remark
     *
     * @return self
     */
    public function setRemark($remark)
    {
        if (is_null($remark)) {
            throw new \InvalidArgumentException('non-nullable remark cannot be null');
        }
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestCustomerDetails
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPickupRequestCustomerDetails $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        if (is_null($customer_details)) {
            throw new \InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets shipment_details
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner[]|null
     */
    public function getShipmentDetails()
    {
        return $this->container['shipment_details'];
    }

    /**
     * Sets shipment_details
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner[]|null $shipment_details Please provide updated details related to shipment you want update the pickup for
     *
     * @return self
     */
    public function setShipmentDetails($shipment_details)
    {
        if (is_null($shipment_details)) {
            throw new \InvalidArgumentException('non-nullable shipment_details cannot be null');
        }

        if ((count($shipment_details) > 999)) {
            throw new \InvalidArgumentException('invalid value for $shipment_details when calling SupermodelIoLogisticsExpressUpdatePickupRequest., number of items must be less than or equal to 999.');
        }
        if ((count($shipment_details) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shipment_details when calling SupermodelIoLogisticsExpressUpdatePickupRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['shipment_details'] = $shipment_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



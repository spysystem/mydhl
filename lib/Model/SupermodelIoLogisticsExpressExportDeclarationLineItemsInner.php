<?php
/**
 * SupermodelIoLogisticsExpressExportDeclarationLineItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressExportDeclarationLineItemsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressExportDeclarationLineItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelFields
    {
        return new SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressExportDeclaration_lineItems_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'int',
        'description' => 'string',
        'price' => 'float',
        'quantity' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity',
        'commodity_codes' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner[]',
        'export_reason_type' => 'string',
        'manufacturer_country' => 'string',
        'weight' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight',
        'is_taxes_paid' => 'bool',
        'customer_references' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner[]',
        'customs_documents' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'description' => null,
        'price' => null,
        'quantity' => null,
        'commodity_codes' => null,
        'export_reason_type' => null,
        'manufacturer_country' => null,
        'weight' => null,
        'is_taxes_paid' => null,
        'customer_references' => null,
        'customs_documents' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'description' => false,
		'price' => false,
		'quantity' => false,
		'commodity_codes' => false,
		'export_reason_type' => false,
		'manufacturer_country' => false,
		'weight' => false,
		'is_taxes_paid' => false,
		'customer_references' => false,
		'customs_documents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'description' => 'description',
        'price' => 'price',
        'quantity' => 'quantity',
        'commodity_codes' => 'commodityCodes',
        'export_reason_type' => 'exportReasonType',
        'manufacturer_country' => 'manufacturerCountry',
        'weight' => 'weight',
        'is_taxes_paid' => 'isTaxesPaid',
        'customer_references' => 'customerReferences',
        'customs_documents' => 'customsDocuments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'quantity' => 'setQuantity',
        'commodity_codes' => 'setCommodityCodes',
        'export_reason_type' => 'setExportReasonType',
        'manufacturer_country' => 'setManufacturerCountry',
        'weight' => 'setWeight',
        'is_taxes_paid' => 'setIsTaxesPaid',
        'customer_references' => 'setCustomerReferences',
        'customs_documents' => 'setCustomsDocuments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'quantity' => 'getQuantity',
        'commodity_codes' => 'getCommodityCodes',
        'export_reason_type' => 'getExportReasonType',
        'manufacturer_country' => 'getManufacturerCountry',
        'weight' => 'getWeight',
        'is_taxes_paid' => 'getIsTaxesPaid',
        'customer_references' => 'getCustomerReferences',
        'customs_documents' => 'getCustomsDocuments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPORT_REASON_TYPE_PERMANENT = 'permanent';
    public const EXPORT_REASON_TYPE_TEMPORARY = 'temporary';
    public const EXPORT_REASON_TYPE__RETURN = 'return';
    public const EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN = 'used_exhibition_goods_to_origin';
    public const EXPORT_REASON_TYPE_INTERCOMPANY_USE = 'intercompany_use';
    public const EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE = 'commercial_purpose_or_sale';
    public const EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE = 'personal_belongings_or_personal_use';
    public const EXPORT_REASON_TYPE_SAMPLE = 'sample';
    public const EXPORT_REASON_TYPE_GIFT = 'gift';
    public const EXPORT_REASON_TYPE_RETURN_TO_ORIGIN = 'return_to_origin';
    public const EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT = 'warranty_replacement';
    public const EXPORT_REASON_TYPE_DIPLOMATIC_GOODS = 'diplomatic_goods';
    public const EXPORT_REASON_TYPE_DEFENCE_MATERIAL = 'defence_material';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportReasonTypeAllowableValues()
    {
        return [
            self::EXPORT_REASON_TYPE_PERMANENT,
            self::EXPORT_REASON_TYPE_TEMPORARY,
            self::EXPORT_REASON_TYPE__RETURN,
            self::EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_INTERCOMPANY_USE,
            self::EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE,
            self::EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE,
            self::EXPORT_REASON_TYPE_SAMPLE,
            self::EXPORT_REASON_TYPE_GIFT,
            self::EXPORT_REASON_TYPE_RETURN_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT,
            self::EXPORT_REASON_TYPE_DIPLOMATIC_GOODS,
            self::EXPORT_REASON_TYPE_DEFENCE_MATERIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('commodity_codes', $data ?? [], null);
        $this->setIfExists('export_reason_type', $data ?? [], null);
        $this->setIfExists('manufacturer_country', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('is_taxes_paid', $data ?? [], null);
        $this->setIfExists('customer_references', $data ?? [], null);
        $this->setIfExists('customs_documents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if (($this->container['number'] > 1000)) {
            $invalidProperties[] = "invalid value for 'number', must be smaller than or equal to 1000.";
        }

        if (($this->container['number'] < 1)) {
            $invalidProperties[] = "invalid value for 'number', must be bigger than or equal to 1.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 512)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'price', must be smaller than or equal to 999999999999999.";
        }

        if (($this->container['price'] < 0)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['commodity_codes']) && (count($this->container['commodity_codes']) > 2)) {
            $invalidProperties[] = "invalid value for 'commodity_codes', number of items must be less than or equal to 2.";
        }

        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!is_null($this->container['export_reason_type']) && !in_array($this->container['export_reason_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_reason_type', must be one of '%s'",
                $this->container['export_reason_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['manufacturer_country'] === null) {
            $invalidProperties[] = "'manufacturer_country' can't be null";
        }
        if ((mb_strlen($this->container['manufacturer_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'manufacturer_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['manufacturer_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'manufacturer_country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (!is_null($this->container['customer_references']) && (count($this->container['customer_references']) > 100)) {
            $invalidProperties[] = "invalid value for 'customer_references', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['customs_documents']) && (count($this->container['customs_documents']) > 50)) {
            $invalidProperties[] = "invalid value for 'customs_documents', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Please provide line item number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        if (($number > 1000)) {
            throw new \InvalidArgumentException('invalid value for $number when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be smaller than or equal to 1000.');
        }
        if (($number < 1)) {
            throw new \InvalidArgumentException('invalid value for $number when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Please provide description of the line item
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be smaller than or equal to 512.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Please provide unit or article price line item value
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if (($price > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $price when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be smaller than or equal to 999999999999999.');
        }
        if (($price < 0)) {
            throw new \InvalidArgumentException('invalid value for $price when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets commodity_codes
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner[]|null
     */
    public function getCommodityCodes()
    {
        return $this->container['commodity_codes'];
    }

    /**
     * Sets commodity_codes
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInnerCommodityCodesInner[]|null $commodity_codes Please provide Commodity codes for the shipment at item line level
     *
     * @return self
     */
    public function setCommodityCodes($commodity_codes)
    {
        if (is_null($commodity_codes)) {
            throw new \InvalidArgumentException('non-nullable commodity_codes cannot be null');
        }

        if ((count($commodity_codes) > 2)) {
            throw new \InvalidArgumentException('invalid value for $commodity_codes when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., number of items must be less than or equal to 2.');
        }
        $this->container['commodity_codes'] = $commodity_codes;

        return $this;
    }

    /**
     * Gets export_reason_type
     *
     * @return string|null
     */
    public function getExportReasonType()
    {
        return $this->container['export_reason_type'];
    }

    /**
     * Sets export_reason_type
     *
     * @param string|null $export_reason_type Please provide the reason for export
     *
     * @return self
     */
    public function setExportReasonType($export_reason_type)
    {
        if (is_null($export_reason_type)) {
            throw new \InvalidArgumentException('non-nullable export_reason_type cannot be null');
        }
        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!in_array($export_reason_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_reason_type', must be one of '%s'",
                    $export_reason_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_reason_type'] = $export_reason_type;

        return $this;
    }

    /**
     * Gets manufacturer_country
     *
     * @return string
     */
    public function getManufacturerCountry()
    {
        return $this->container['manufacturer_country'];
    }

    /**
     * Sets manufacturer_country
     *
     * @param string $manufacturer_country Please enter two letter ISO manufacturer country code
     *
     * @return self
     */
    public function setManufacturerCountry($manufacturer_country)
    {
        if (is_null($manufacturer_country)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_country cannot be null');
        }
        if ((mb_strlen($manufacturer_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_country when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($manufacturer_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_country when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., must be bigger than or equal to 2.');
        }

        $this->container['manufacturer_country'] = $manufacturer_country;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerWeight $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets is_taxes_paid
     *
     * @return bool|null
     */
    public function getIsTaxesPaid()
    {
        return $this->container['is_taxes_paid'];
    }

    /**
     * Sets is_taxes_paid
     *
     * @param bool|null $is_taxes_paid Please provide if the Taxes is paid for the line item
     *
     * @return self
     */
    public function setIsTaxesPaid($is_taxes_paid)
    {
        if (is_null($is_taxes_paid)) {
            throw new \InvalidArgumentException('non-nullable is_taxes_paid cannot be null');
        }
        $this->container['is_taxes_paid'] = $is_taxes_paid;

        return $this;
    }

    /**
     * Gets customer_references
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner[]|null
     */
    public function getCustomerReferences()
    {
        return $this->container['customer_references'];
    }

    /**
     * Sets customer_references
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomerReferencesInner[]|null $customer_references Please provide the Customer References for the line item
     *
     * @return self
     */
    public function setCustomerReferences($customer_references)
    {
        if (is_null($customer_references)) {
            throw new \InvalidArgumentException('non-nullable customer_references cannot be null');
        }

        if ((count($customer_references) > 100)) {
            throw new \InvalidArgumentException('invalid value for $customer_references when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., number of items must be less than or equal to 100.');
        }
        $this->container['customer_references'] = $customer_references;

        return $this;
    }

    /**
     * Gets customs_documents
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner[]|null
     */
    public function getCustomsDocuments()
    {
        return $this->container['customs_documents'];
    }

    /**
     * Sets customs_documents
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerCustomsDocumentsInner[]|null $customs_documents Please provide the customs documents details
     *
     * @return self
     */
    public function setCustomsDocuments($customs_documents)
    {
        if (is_null($customs_documents)) {
            throw new \InvalidArgumentException('non-nullable customs_documents cannot be null');
        }

        if ((count($customs_documents) > 50)) {
            throw new \InvalidArgumentException('invalid value for $customs_documents when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInner., number of items must be less than or equal to 50.');
        }
        $this->container['customs_documents'] = $customs_documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



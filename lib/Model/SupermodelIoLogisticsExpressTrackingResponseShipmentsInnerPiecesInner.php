<?php
/**
 * SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelFields
    {
        return new SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressTrackingResponse_shipments_inner_pieces_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'float',
        'type_code' => 'string',
        'shipment_tracking_number' => 'string',
        'tracking_number' => 'string',
        'description' => 'string',
        'weight' => 'float',
        'dimensional_weight' => 'float',
        'actual_weight' => 'float',
        'dimensions' => '\MyDHL\Model\Dimensions2',
        'actual_dimensions' => '\MyDHL\Model\Dimensions3',
        'unit_of_measurements' => 'string',
        'shipper_references' => '\MyDHL\Model\SupermodelIoLogisticsExpressReference[]',
        'events' => '\MyDHL\Model\SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'type_code' => null,
        'shipment_tracking_number' => null,
        'tracking_number' => null,
        'description' => null,
        'weight' => null,
        'dimensional_weight' => null,
        'actual_weight' => null,
        'dimensions' => null,
        'actual_dimensions' => null,
        'unit_of_measurements' => null,
        'shipper_references' => null,
        'events' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'type_code' => false,
		'shipment_tracking_number' => false,
		'tracking_number' => false,
		'description' => false,
		'weight' => false,
		'dimensional_weight' => false,
		'actual_weight' => false,
		'dimensions' => false,
		'actual_dimensions' => false,
		'unit_of_measurements' => false,
		'shipper_references' => false,
		'events' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'type_code' => 'typeCode',
        'shipment_tracking_number' => 'shipmentTrackingNumber',
        'tracking_number' => 'trackingNumber',
        'description' => 'description',
        'weight' => 'weight',
        'dimensional_weight' => 'dimensionalWeight',
        'actual_weight' => 'actualWeight',
        'dimensions' => 'dimensions',
        'actual_dimensions' => 'actualDimensions',
        'unit_of_measurements' => 'unitOfMeasurements',
        'shipper_references' => 'shipperReferences',
        'events' => 'events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'type_code' => 'setTypeCode',
        'shipment_tracking_number' => 'setShipmentTrackingNumber',
        'tracking_number' => 'setTrackingNumber',
        'description' => 'setDescription',
        'weight' => 'setWeight',
        'dimensional_weight' => 'setDimensionalWeight',
        'actual_weight' => 'setActualWeight',
        'dimensions' => 'setDimensions',
        'actual_dimensions' => 'setActualDimensions',
        'unit_of_measurements' => 'setUnitOfMeasurements',
        'shipper_references' => 'setShipperReferences',
        'events' => 'setEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'type_code' => 'getTypeCode',
        'shipment_tracking_number' => 'getShipmentTrackingNumber',
        'tracking_number' => 'getTrackingNumber',
        'description' => 'getDescription',
        'weight' => 'getWeight',
        'dimensional_weight' => 'getDimensionalWeight',
        'actual_weight' => 'getActualWeight',
        'dimensions' => 'getDimensions',
        'actual_dimensions' => 'getActualDimensions',
        'unit_of_measurements' => 'getUnitOfMeasurements',
        'shipper_references' => 'getShipperReferences',
        'events' => 'getEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('type_code', $data ?? [], null);
        $this->setIfExists('shipment_tracking_number', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('dimensional_weight', $data ?? [], null);
        $this->setIfExists('actual_weight', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('actual_dimensions', $data ?? [], null);
        $this->setIfExists('unit_of_measurements', $data ?? [], null);
        $this->setIfExists('shipper_references', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['weight']) && ($this->container['weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['weight']) && ($this->container['weight'] < 0.001)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.001.";
        }

        if (!is_null($this->container['dimensional_weight']) && ($this->container['dimensional_weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'dimensional_weight', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['dimensional_weight']) && ($this->container['dimensional_weight'] < 0.001)) {
            $invalidProperties[] = "invalid value for 'dimensional_weight', must be bigger than or equal to 0.001.";
        }

        if (!is_null($this->container['actual_weight']) && ($this->container['actual_weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'actual_weight', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['actual_weight']) && ($this->container['actual_weight'] < 0.001)) {
            $invalidProperties[] = "invalid value for 'actual_weight', must be bigger than or equal to 0.001.";
        }

        if (!is_null($this->container['shipper_references']) && (count($this->container['shipper_references']) > 999)) {
            $invalidProperties[] = "invalid value for 'shipper_references', number of items must be less than or equal to 999.";
        }

        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return float|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param float|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets type_code
     *
     * @return string|null
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string|null $type_code type_code
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        if (is_null($type_code)) {
            throw new \InvalidArgumentException('non-nullable type_code cannot be null');
        }
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets shipment_tracking_number
     *
     * @return string|null
     */
    public function getShipmentTrackingNumber()
    {
        return $this->container['shipment_tracking_number'];
    }

    /**
     * Sets shipment_tracking_number
     *
     * @param string|null $shipment_tracking_number shipment_tracking_number
     *
     * @return self
     */
    public function setShipmentTrackingNumber($shipment_tracking_number)
    {
        if (is_null($shipment_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_tracking_number cannot be null');
        }
        $this->container['shipment_tracking_number'] = $shipment_tracking_number;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number tracking_number
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight The weight of the package.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be smaller than or equal to 999999999999.');
        }
        if (($weight < 0.001)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be bigger than or equal to 0.001.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensional_weight
     *
     * @return float|null
     */
    public function getDimensionalWeight()
    {
        return $this->container['dimensional_weight'];
    }

    /**
     * Sets dimensional_weight
     *
     * @param float|null $dimensional_weight The weight of the package.
     *
     * @return self
     */
    public function setDimensionalWeight($dimensional_weight)
    {
        if (is_null($dimensional_weight)) {
            throw new \InvalidArgumentException('non-nullable dimensional_weight cannot be null');
        }

        if (($dimensional_weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $dimensional_weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be smaller than or equal to 999999999999.');
        }
        if (($dimensional_weight < 0.001)) {
            throw new \InvalidArgumentException('invalid value for $dimensional_weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be bigger than or equal to 0.001.');
        }

        $this->container['dimensional_weight'] = $dimensional_weight;

        return $this;
    }

    /**
     * Gets actual_weight
     *
     * @return float|null
     */
    public function getActualWeight()
    {
        return $this->container['actual_weight'];
    }

    /**
     * Sets actual_weight
     *
     * @param float|null $actual_weight The weight of the package.
     *
     * @return self
     */
    public function setActualWeight($actual_weight)
    {
        if (is_null($actual_weight)) {
            throw new \InvalidArgumentException('non-nullable actual_weight cannot be null');
        }

        if (($actual_weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $actual_weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be smaller than or equal to 999999999999.');
        }
        if (($actual_weight < 0.001)) {
            throw new \InvalidArgumentException('invalid value for $actual_weight when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., must be bigger than or equal to 0.001.');
        }

        $this->container['actual_weight'] = $actual_weight;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \MyDHL\Model\Dimensions2|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \MyDHL\Model\Dimensions2|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets actual_dimensions
     *
     * @return \MyDHL\Model\Dimensions3|null
     */
    public function getActualDimensions()
    {
        return $this->container['actual_dimensions'];
    }

    /**
     * Sets actual_dimensions
     *
     * @param \MyDHL\Model\Dimensions3|null $actual_dimensions actual_dimensions
     *
     * @return self
     */
    public function setActualDimensions($actual_dimensions)
    {
        if (is_null($actual_dimensions)) {
            throw new \InvalidArgumentException('non-nullable actual_dimensions cannot be null');
        }
        $this->container['actual_dimensions'] = $actual_dimensions;

        return $this;
    }

    /**
     * Gets unit_of_measurements
     *
     * @return string|null
     */
    public function getUnitOfMeasurements()
    {
        return $this->container['unit_of_measurements'];
    }

    /**
     * Sets unit_of_measurements
     *
     * @param string|null $unit_of_measurements unit_of_measurements
     *
     * @return self
     */
    public function setUnitOfMeasurements($unit_of_measurements)
    {
        if (is_null($unit_of_measurements)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurements cannot be null');
        }
        $this->container['unit_of_measurements'] = $unit_of_measurements;

        return $this;
    }

    /**
     * Gets shipper_references
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressReference[]|null
     */
    public function getShipperReferences()
    {
        return $this->container['shipper_references'];
    }

    /**
     * Sets shipper_references
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressReference[]|null $shipper_references shipper_references
     *
     * @return self
     */
    public function setShipperReferences($shipper_references)
    {
        if (is_null($shipper_references)) {
            throw new \InvalidArgumentException('non-nullable shipper_references cannot be null');
        }

        if ((count($shipper_references) > 999)) {
            throw new \InvalidArgumentException('invalid value for $shipper_references when calling SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInner., number of items must be less than or equal to 999.');
        }
        $this->container['shipper_references'] = $shipper_references;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressTrackingResponseShipmentsInnerPiecesInnerEventsInner[] $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



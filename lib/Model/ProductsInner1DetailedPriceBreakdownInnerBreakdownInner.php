<?php
/**
 * ProductsInner1DetailedPriceBreakdownInnerBreakdownInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * ProductsInner1DetailedPriceBreakdownInnerBreakdownInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductsInner1DetailedPriceBreakdownInnerBreakdownInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelFields
      */
    public static function GetModelFields(): ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelFields
    {
        return new ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelAttributes
      */
    public static function GetModelAttributes(): ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelAttributes
    {
        return new ProductsInner1DetailedPriceBreakdownInnerBreakdownInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'products_inner_1_detailedPriceBreakdown_inner_breakdown_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'service_code' => 'string',
        'local_service_code' => 'string',
        'type_code' => 'string',
        'service_type_code' => 'string',
        'price' => 'float',
        'price_currency' => 'string',
        'is_customer_agreement' => 'bool',
        'is_marketed_service' => 'bool',
        'is_billing_service_indicator' => 'bool',
        'price_breakdown' => '\MyDHL\Model\PriceDetailInner[]',
        'tariff_rate_formula' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'service_code' => null,
        'local_service_code' => null,
        'type_code' => null,
        'service_type_code' => null,
        'price' => null,
        'price_currency' => null,
        'is_customer_agreement' => null,
        'is_marketed_service' => null,
        'is_billing_service_indicator' => null,
        'price_breakdown' => null,
        'tariff_rate_formula' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'service_code' => false,
		'local_service_code' => false,
		'type_code' => false,
		'service_type_code' => false,
		'price' => false,
		'price_currency' => false,
		'is_customer_agreement' => false,
		'is_marketed_service' => false,
		'is_billing_service_indicator' => false,
		'price_breakdown' => false,
		'tariff_rate_formula' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'service_code' => 'serviceCode',
        'local_service_code' => 'localServiceCode',
        'type_code' => 'typeCode',
        'service_type_code' => 'serviceTypeCode',
        'price' => 'price',
        'price_currency' => 'priceCurrency',
        'is_customer_agreement' => 'isCustomerAgreement',
        'is_marketed_service' => 'isMarketedService',
        'is_billing_service_indicator' => 'isBillingServiceIndicator',
        'price_breakdown' => 'priceBreakdown',
        'tariff_rate_formula' => 'tariffRateFormula'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'service_code' => 'setServiceCode',
        'local_service_code' => 'setLocalServiceCode',
        'type_code' => 'setTypeCode',
        'service_type_code' => 'setServiceTypeCode',
        'price' => 'setPrice',
        'price_currency' => 'setPriceCurrency',
        'is_customer_agreement' => 'setIsCustomerAgreement',
        'is_marketed_service' => 'setIsMarketedService',
        'is_billing_service_indicator' => 'setIsBillingServiceIndicator',
        'price_breakdown' => 'setPriceBreakdown',
        'tariff_rate_formula' => 'setTariffRateFormula'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'service_code' => 'getServiceCode',
        'local_service_code' => 'getLocalServiceCode',
        'type_code' => 'getTypeCode',
        'service_type_code' => 'getServiceTypeCode',
        'price' => 'getPrice',
        'price_currency' => 'getPriceCurrency',
        'is_customer_agreement' => 'getIsCustomerAgreement',
        'is_marketed_service' => 'getIsMarketedService',
        'is_billing_service_indicator' => 'getIsBillingServiceIndicator',
        'price_breakdown' => 'getPriceBreakdown',
        'tariff_rate_formula' => 'getTariffRateFormula'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('service_code', $data ?? [], null);
        $this->setIfExists('local_service_code', $data ?? [], null);
        $this->setIfExists('type_code', $data ?? [], null);
        $this->setIfExists('service_type_code', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_currency', $data ?? [], null);
        $this->setIfExists('is_customer_agreement', $data ?? [], null);
        $this->setIfExists('is_marketed_service', $data ?? [], null);
        $this->setIfExists('is_billing_service_indicator', $data ?? [], null);
        $this->setIfExists('price_breakdown', $data ?? [], null);
        $this->setIfExists('tariff_rate_formula', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name When landed-cost is requested then following items name (Charge Types) might be returned: <BR>                        Charge Type : Description <BR>                        STDIS : Quoted shipment total discount <BR>                        SCUSV : Shipment Customs value <BR>                        SINSV : Insured value <BR>                        SPRQD : Shipment product quote discount<BR>                        SPRQN : The price quoted to the Customer by DHL at the time of the booking. This quote covers the weight price including discounts and without taxes. <BR>                        STSCH : The total of service charges quoted to customer for DHL Express value added services, the amount is after discounts and doesn't include tax amounts. <BR>                        MACHG : The total of service charges as provided by Merchant for the purpose of landed cost calculation. <BR>                        MFCHG : The freight charge as provided by Merchant for the purpose of landed cost calculation.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string|null
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string|null $service_code Special service or extra charge code. This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery
     *
     * @return self
     */
    public function setServiceCode($service_code)
    {
        if (is_null($service_code)) {
            throw new \InvalidArgumentException('non-nullable service_code cannot be null');
        }
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets local_service_code
     *
     * @return string|null
     */
    public function getLocalServiceCode()
    {
        return $this->container['local_service_code'];
    }

    /**
     * Sets local_service_code
     *
     * @param string|null $local_service_code Local service code
     *
     * @return self
     */
    public function setLocalServiceCode($local_service_code)
    {
        if (is_null($local_service_code)) {
            throw new \InvalidArgumentException('non-nullable local_service_code cannot be null');
        }
        $this->container['local_service_code'] = $local_service_code;

        return $this;
    }

    /**
     * Gets type_code
     *
     * @return string|null
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string|null $type_code Price breakdown type code
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        if (is_null($type_code)) {
            throw new \InvalidArgumentException('non-nullable type_code cannot be null');
        }
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets service_type_code
     *
     * @return string|null
     */
    public function getServiceTypeCode()
    {
        return $this->container['service_type_code'];
    }

    /**
     * Sets service_type_code
     *
     * @param string|null $service_type_code Special service charge code type for service.
     *
     * @return self
     */
    public function setServiceTypeCode($service_type_code)
    {
        if (is_null($service_type_code)) {
            throw new \InvalidArgumentException('non-nullable service_type_code cannot be null');
        }
        $this->container['service_type_code'] = $service_type_code;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price breakdown value
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string|null
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string|null $price_currency This the currency of the rated shipment for the prices listed.
     *
     * @return self
     */
    public function setPriceCurrency($price_currency)
    {
        if (is_null($price_currency)) {
            throw new \InvalidArgumentException('non-nullable price_currency cannot be null');
        }
        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets is_customer_agreement
     *
     * @return bool|null
     */
    public function getIsCustomerAgreement()
    {
        return $this->container['is_customer_agreement'];
    }

    /**
     * Sets is_customer_agreement
     *
     * @param bool|null $is_customer_agreement Customer agreement indicator for product and services, if service is offered with prior customer agreement
     *
     * @return self
     */
    public function setIsCustomerAgreement($is_customer_agreement)
    {
        if (is_null($is_customer_agreement)) {
            throw new \InvalidArgumentException('non-nullable is_customer_agreement cannot be null');
        }
        $this->container['is_customer_agreement'] = $is_customer_agreement;

        return $this;
    }

    /**
     * Gets is_marketed_service
     *
     * @return bool|null
     */
    public function getIsMarketedService()
    {
        return $this->container['is_marketed_service'];
    }

    /**
     * Sets is_marketed_service
     *
     * @param bool|null $is_marketed_service Indicator if the special service is marketed service
     *
     * @return self
     */
    public function setIsMarketedService($is_marketed_service)
    {
        if (is_null($is_marketed_service)) {
            throw new \InvalidArgumentException('non-nullable is_marketed_service cannot be null');
        }
        $this->container['is_marketed_service'] = $is_marketed_service;

        return $this;
    }

    /**
     * Gets is_billing_service_indicator
     *
     * @return bool|null
     */
    public function getIsBillingServiceIndicator()
    {
        return $this->container['is_billing_service_indicator'];
    }

    /**
     * Sets is_billing_service_indicator
     *
     * @param bool|null $is_billing_service_indicator Indicator if there is any discount allowed
     *
     * @return self
     */
    public function setIsBillingServiceIndicator($is_billing_service_indicator)
    {
        if (is_null($is_billing_service_indicator)) {
            throw new \InvalidArgumentException('non-nullable is_billing_service_indicator cannot be null');
        }
        $this->container['is_billing_service_indicator'] = $is_billing_service_indicator;

        return $this;
    }

    /**
     * Gets price_breakdown
     *
     * @return \MyDHL\Model\PriceDetailInner[]|null
     */
    public function getPriceBreakdown()
    {
        return $this->container['price_breakdown'];
    }

    /**
     * Sets price_breakdown
     *
     * @param \MyDHL\Model\PriceDetailInner[]|null $price_breakdown price_breakdown
     *
     * @return self
     */
    public function setPriceBreakdown($price_breakdown)
    {
        if (is_null($price_breakdown)) {
            throw new \InvalidArgumentException('non-nullable price_breakdown cannot be null');
        }
        $this->container['price_breakdown'] = $price_breakdown;

        return $this;
    }

    /**
     * Gets tariff_rate_formula
     *
     * @return string|null
     */
    public function getTariffRateFormula()
    {
        return $this->container['tariff_rate_formula'];
    }

    /**
     * Sets tariff_rate_formula
     *
     * @param string|null $tariff_rate_formula Tariff Rate Formula on Shipment Level
     *
     * @return self
     */
    public function setTariffRateFormula($tariff_rate_formula)
    {
        if (is_null($tariff_rate_formula)) {
            throw new \InvalidArgumentException('non-nullable tariff_rate_formula cannot be null');
        }
        $this->container['tariff_rate_formula'] = $tariff_rate_formula;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



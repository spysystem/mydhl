<?php
/**
 * DocumentImage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * DocumentImage Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentImage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return DocumentImageModelFields
      */
    public static function GetModelFields(): DocumentImageModelFields
    {
        return new DocumentImageModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return DocumentImageModelAttributes
      */
    public static function GetModelAttributes(): DocumentImageModelAttributes
    {
        return new DocumentImageModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentImage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_image' => 'string',
        'document_image_type' => 'string',
        'document_image_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document_image' => null,
        'document_image_type' => null,
        'document_image_format' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'document_image' => false,
		'document_image_type' => false,
		'document_image_format' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_image' => 'DocumentImage',
        'document_image_type' => 'DocumentImageType',
        'document_image_format' => 'DocumentImageFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_image' => 'setDocumentImage',
        'document_image_type' => 'setDocumentImageType',
        'document_image_format' => 'setDocumentImageFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_image' => 'getDocumentImage',
        'document_image_type' => 'getDocumentImageType',
        'document_image_format' => 'getDocumentImageFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_IMAGE_TYPE_INV = 'INV';
    public const DOCUMENT_IMAGE_TYPE_PNV = 'PNV';
    public const DOCUMENT_IMAGE_TYPE_COO = 'COO';
    public const DOCUMENT_IMAGE_TYPE_NAF = 'NAF';
    public const DOCUMENT_IMAGE_TYPE_CIN = 'CIN';
    public const DOCUMENT_IMAGE_TYPE_DCL = 'DCL';
    public const DOCUMENT_IMAGE_TYPE_AWB = 'AWB';
    public const DOCUMENT_IMAGE_FORMAT_PDF = 'PDF';
    public const DOCUMENT_IMAGE_FORMAT_PNG = 'PNG';
    public const DOCUMENT_IMAGE_FORMAT_TIFF = 'TIFF';
    public const DOCUMENT_IMAGE_FORMAT_GIF = 'GIF';
    public const DOCUMENT_IMAGE_FORMAT_JPEG = 'JPEG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentImageTypeAllowableValues()
    {
        return [
            self::DOCUMENT_IMAGE_TYPE_INV,
            self::DOCUMENT_IMAGE_TYPE_PNV,
            self::DOCUMENT_IMAGE_TYPE_COO,
            self::DOCUMENT_IMAGE_TYPE_NAF,
            self::DOCUMENT_IMAGE_TYPE_CIN,
            self::DOCUMENT_IMAGE_TYPE_DCL,
            self::DOCUMENT_IMAGE_TYPE_AWB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentImageFormatAllowableValues()
    {
        return [
            self::DOCUMENT_IMAGE_FORMAT_PDF,
            self::DOCUMENT_IMAGE_FORMAT_PNG,
            self::DOCUMENT_IMAGE_FORMAT_TIFF,
            self::DOCUMENT_IMAGE_FORMAT_GIF,
            self::DOCUMENT_IMAGE_FORMAT_JPEG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('document_image', $data ?? [], null);
        $this->setIfExists('document_image_type', $data ?? [], null);
        $this->setIfExists('document_image_format', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_image'] === null) {
            $invalidProperties[] = "'document_image' can't be null";
        }
        $allowedValues = $this->getDocumentImageTypeAllowableValues();
        if (!is_null($this->container['document_image_type']) && !in_array($this->container['document_image_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_image_type', must be one of '%s'",
                $this->container['document_image_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentImageFormatAllowableValues();
        if (!is_null($this->container['document_image_format']) && !in_array($this->container['document_image_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_image_format', must be one of '%s'",
                $this->container['document_image_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_image
     *
     * @return string
     */
    public function getDocumentImage()
    {
        return $this->container['document_image'];
    }

    /**
     * Sets document_image
     *
     * @param string $document_image document_image
     *
     * @return self
     */
    public function setDocumentImage($document_image)
    {

        if (is_null($document_image)) {
            throw new \InvalidArgumentException('non-nullable document_image cannot be null');
        }

        $this->container['document_image'] = $document_image;

        return $this;
    }

    /**
     * Gets document_image_type
     *
     * @return string|null
     */
    public function getDocumentImageType()
    {
        return $this->container['document_image_type'];
    }

    /**
     * Sets document_image_type
     *
     * @param string|null $document_image_type document_image_type
     *
     * @return self
     */
    public function setDocumentImageType($document_image_type)
    {
        $allowedValues = $this->getDocumentImageTypeAllowableValues();
        if (!is_null($document_image_type) && !in_array($document_image_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_image_type', must be one of '%s'",
                    $document_image_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($document_image_type)) {
            throw new \InvalidArgumentException('non-nullable document_image_type cannot be null');
        }

        $this->container['document_image_type'] = $document_image_type;

        return $this;
    }

    /**
     * Gets document_image_format
     *
     * @return string|null
     */
    public function getDocumentImageFormat()
    {
        return $this->container['document_image_format'];
    }

    /**
     * Sets document_image_format
     *
     * @param string|null $document_image_format document_image_format
     *
     * @return self
     */
    public function setDocumentImageFormat($document_image_format)
    {
        $allowedValues = $this->getDocumentImageFormatAllowableValues();
        if (!is_null($document_image_format) && !in_array($document_image_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_image_format', must be one of '%s'",
                    $document_image_format,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($document_image_format)) {
            throw new \InvalidArgumentException('non-nullable document_image_format cannot be null');
        }

        $this->container['document_image_format'] = $document_image_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



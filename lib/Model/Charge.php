<?php
/**
 * Charge
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * Charge Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Charge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Charge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'charge_code' => 'string',
        'local_charge_code' => 'string',
        'charge_type' => 'string',
        'charge_amount' => 'string',
        'charge_name' => 'string',
        'charge_currency_code' => 'string',
        'charge_code_type_code' => 'string',
        'billing_service_ind' => 'string',
        'customer_aggreement_ind' => 'string',
        'marketed_service_ind' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'charge_code' => null,
        'local_charge_code' => null,
        'charge_type' => null,
        'charge_amount' => null,
        'charge_name' => null,
        'charge_currency_code' => null,
        'charge_code_type_code' => null,
        'billing_service_ind' => null,
        'customer_aggreement_ind' => null,
        'marketed_service_ind' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'charge_code' => false,
        'local_charge_code' => false,
        'charge_type' => false,
        'charge_amount' => false,
        'charge_name' => false,
        'charge_currency_code' => false,
        'charge_code_type_code' => false,
        'billing_service_ind' => false,
        'customer_aggreement_ind' => false,
        'marketed_service_ind' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_code' => 'ChargeCode',
        'local_charge_code' => 'LocalChargeCode',
        'charge_type' => 'ChargeType',
        'charge_amount' => 'ChargeAmount',
        'charge_name' => 'ChargeName',
        'charge_currency_code' => 'ChargeCurrencyCode',
        'charge_code_type_code' => 'ChargeCodeTypeCode',
        'billing_service_ind' => 'BillingServiceInd',
        'customer_aggreement_ind' => 'CustomerAggreementInd',
        'marketed_service_ind' => 'MarketedServiceInd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_code' => 'setChargeCode',
        'local_charge_code' => 'setLocalChargeCode',
        'charge_type' => 'setChargeType',
        'charge_amount' => 'setChargeAmount',
        'charge_name' => 'setChargeName',
        'charge_currency_code' => 'setChargeCurrencyCode',
        'charge_code_type_code' => 'setChargeCodeTypeCode',
        'billing_service_ind' => 'setBillingServiceInd',
        'customer_aggreement_ind' => 'setCustomerAggreementInd',
        'marketed_service_ind' => 'setMarketedServiceInd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_code' => 'getChargeCode',
        'local_charge_code' => 'getLocalChargeCode',
        'charge_type' => 'getChargeType',
        'charge_amount' => 'getChargeAmount',
        'charge_name' => 'getChargeName',
        'charge_currency_code' => 'getChargeCurrencyCode',
        'charge_code_type_code' => 'getChargeCodeTypeCode',
        'billing_service_ind' => 'getBillingServiceInd',
        'customer_aggreement_ind' => 'getCustomerAggreementInd',
        'marketed_service_ind' => 'getMarketedServiceInd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('charge_code', $data, null);
        $this->setIfExists('local_charge_code', $data, null);
        $this->setIfExists('charge_type', $data, null);
        $this->setIfExists('charge_amount', $data, null);
        $this->setIfExists('charge_name', $data, null);
        $this->setIfExists('charge_currency_code', $data, null);
        $this->setIfExists('charge_code_type_code', $data, null);
        $this->setIfExists('billing_service_ind', $data, null);
        $this->setIfExists('customer_aggreement_ind', $data, null);
        $this->setIfExists('marketed_service_ind', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charge_type'] === null) {
            $invalidProperties[] = "'charge_type' can't be null";
        }
        if ($this->container['charge_amount'] === null) {
            $invalidProperties[] = "'charge_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_code
     *
     * @return string|null
     */
    public function getChargeCode()
    {
        return $this->container['charge_code'];
    }

    /**
     * Sets charge_code
     *
     * @param string|null $charge_code charge_code
     *
     * @return $this
     */
    public function setChargeCode($charge_code)
    {

        if (is_null($charge_code)) {
            throw new \InvalidArgumentException('non-nullable charge_code cannot be null');
        }

        $this->container['charge_code'] = $charge_code;

        return $this;
    }

    /**
     * Gets local_charge_code
     *
     * @return string|null
     */
    public function getLocalChargeCode()
    {
        return $this->container['local_charge_code'];
    }

    /**
     * Sets local_charge_code
     *
     * @param string|null $local_charge_code local_charge_code
     *
     * @return $this
     */
    public function setLocalChargeCode($local_charge_code)
    {

        if (is_null($local_charge_code)) {
            throw new \InvalidArgumentException('non-nullable local_charge_code cannot be null');
        }

        $this->container['local_charge_code'] = $local_charge_code;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string $charge_type charge_type
     *
     * @return $this
     */
    public function setChargeType($charge_type)
    {

        if (is_null($charge_type)) {
            throw new \InvalidArgumentException('non-nullable charge_type cannot be null');
        }

        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets charge_amount
     *
     * @return string
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     *
     * @param string $charge_amount charge_amount
     *
     * @return $this
     */
    public function setChargeAmount($charge_amount)
    {

        if (is_null($charge_amount)) {
            throw new \InvalidArgumentException('non-nullable charge_amount cannot be null');
        }

        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }

    /**
     * Gets charge_name
     *
     * @return string|null
     */
    public function getChargeName()
    {
        return $this->container['charge_name'];
    }

    /**
     * Sets charge_name
     *
     * @param string|null $charge_name charge_name
     *
     * @return $this
     */
    public function setChargeName($charge_name)
    {

        if (is_null($charge_name)) {
            throw new \InvalidArgumentException('non-nullable charge_name cannot be null');
        }

        $this->container['charge_name'] = $charge_name;

        return $this;
    }

    /**
     * Gets charge_currency_code
     *
     * @return string|null
     */
    public function getChargeCurrencyCode()
    {
        return $this->container['charge_currency_code'];
    }

    /**
     * Sets charge_currency_code
     *
     * @param string|null $charge_currency_code charge_currency_code
     *
     * @return $this
     */
    public function setChargeCurrencyCode($charge_currency_code)
    {

        if (is_null($charge_currency_code)) {
            throw new \InvalidArgumentException('non-nullable charge_currency_code cannot be null');
        }

        $this->container['charge_currency_code'] = $charge_currency_code;

        return $this;
    }

    /**
     * Gets charge_code_type_code
     *
     * @return string|null
     */
    public function getChargeCodeTypeCode()
    {
        return $this->container['charge_code_type_code'];
    }

    /**
     * Sets charge_code_type_code
     *
     * @param string|null $charge_code_type_code charge_code_type_code
     *
     * @return $this
     */
    public function setChargeCodeTypeCode($charge_code_type_code)
    {

        if (is_null($charge_code_type_code)) {
            throw new \InvalidArgumentException('non-nullable charge_code_type_code cannot be null');
        }

        $this->container['charge_code_type_code'] = $charge_code_type_code;

        return $this;
    }

    /**
     * Gets billing_service_ind
     *
     * @return string|null
     */
    public function getBillingServiceInd()
    {
        return $this->container['billing_service_ind'];
    }

    /**
     * Sets billing_service_ind
     *
     * @param string|null $billing_service_ind billing_service_ind
     *
     * @return $this
     */
    public function setBillingServiceInd($billing_service_ind)
    {

        if (is_null($billing_service_ind)) {
            throw new \InvalidArgumentException('non-nullable billing_service_ind cannot be null');
        }

        $this->container['billing_service_ind'] = $billing_service_ind;

        return $this;
    }

    /**
     * Gets customer_aggreement_ind
     *
     * @return string|null
     */
    public function getCustomerAggreementInd()
    {
        return $this->container['customer_aggreement_ind'];
    }

    /**
     * Sets customer_aggreement_ind
     *
     * @param string|null $customer_aggreement_ind customer_aggreement_ind
     *
     * @return $this
     */
    public function setCustomerAggreementInd($customer_aggreement_ind)
    {

        if (is_null($customer_aggreement_ind)) {
            throw new \InvalidArgumentException('non-nullable customer_aggreement_ind cannot be null');
        }

        $this->container['customer_aggreement_ind'] = $customer_aggreement_ind;

        return $this;
    }

    /**
     * Gets marketed_service_ind
     *
     * @return string|null
     */
    public function getMarketedServiceInd()
    {
        return $this->container['marketed_service_ind'];
    }

    /**
     * Sets marketed_service_ind
     *
     * @param string|null $marketed_service_ind marketed_service_ind
     *
     * @return $this
     */
    public function setMarketedServiceInd($marketed_service_ind)
    {

        if (is_null($marketed_service_ind)) {
            throw new \InvalidArgumentException('non-nullable marketed_service_ind cannot be null');
        }

        $this->container['marketed_service_ind'] = $marketed_service_ind;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice Class Doc Comment
 *
 * @category Class
 * @description Please provide invoice related information
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelFields
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelAttributes
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressCreateShipmentRequest_content_exportDeclaration_invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'date' => '\DateTime',
        'signature_name' => 'string',
        'signature_title' => 'string',
        'signature_image' => 'string',
        'instructions' => 'string[]',
        'customer_data_text_entries' => 'string[]',
        'total_net_weight' => 'float',
        'total_gross_weight' => 'float',
        'customer_references' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceCustomerReferencesInner[]',
        'terms_of_payment' => 'string',
        'indicative_customs_values' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceIndicativeCustomsValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'date' => 'date',
        'signature_name' => null,
        'signature_title' => null,
        'signature_image' => null,
        'instructions' => null,
        'customer_data_text_entries' => null,
        'total_net_weight' => null,
        'total_gross_weight' => null,
        'customer_references' => null,
        'terms_of_payment' => null,
        'indicative_customs_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'date' => false,
		'signature_name' => false,
		'signature_title' => false,
		'signature_image' => false,
		'instructions' => false,
		'customer_data_text_entries' => false,
		'total_net_weight' => false,
		'total_gross_weight' => false,
		'customer_references' => false,
		'terms_of_payment' => false,
		'indicative_customs_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'date' => 'date',
        'signature_name' => 'signatureName',
        'signature_title' => 'signatureTitle',
        'signature_image' => 'signatureImage',
        'instructions' => 'instructions',
        'customer_data_text_entries' => 'customerDataTextEntries',
        'total_net_weight' => 'totalNetWeight',
        'total_gross_weight' => 'totalGrossWeight',
        'customer_references' => 'customerReferences',
        'terms_of_payment' => 'termsOfPayment',
        'indicative_customs_values' => 'indicativeCustomsValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'date' => 'setDate',
        'signature_name' => 'setSignatureName',
        'signature_title' => 'setSignatureTitle',
        'signature_image' => 'setSignatureImage',
        'instructions' => 'setInstructions',
        'customer_data_text_entries' => 'setCustomerDataTextEntries',
        'total_net_weight' => 'setTotalNetWeight',
        'total_gross_weight' => 'setTotalGrossWeight',
        'customer_references' => 'setCustomerReferences',
        'terms_of_payment' => 'setTermsOfPayment',
        'indicative_customs_values' => 'setIndicativeCustomsValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'date' => 'getDate',
        'signature_name' => 'getSignatureName',
        'signature_title' => 'getSignatureTitle',
        'signature_image' => 'getSignatureImage',
        'instructions' => 'getInstructions',
        'customer_data_text_entries' => 'getCustomerDataTextEntries',
        'total_net_weight' => 'getTotalNetWeight',
        'total_gross_weight' => 'getTotalGrossWeight',
        'customer_references' => 'getCustomerReferences',
        'terms_of_payment' => 'getTermsOfPayment',
        'indicative_customs_values' => 'getIndicativeCustomsValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('signature_name', $data ?? [], null);
        $this->setIfExists('signature_title', $data ?? [], null);
        $this->setIfExists('signature_image', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('customer_data_text_entries', $data ?? [], null);
        $this->setIfExists('total_net_weight', $data ?? [], null);
        $this->setIfExists('total_gross_weight', $data ?? [], null);
        $this->setIfExists('customer_references', $data ?? [], null);
        $this->setIfExists('terms_of_payment', $data ?? [], null);
        $this->setIfExists('indicative_customs_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 35)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['number']) < 1)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ((mb_strlen($this->container['date']) > 35)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['date']) < 1)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['signature_name']) && (mb_strlen($this->container['signature_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'signature_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['signature_title']) && (mb_strlen($this->container['signature_title']) > 35)) {
            $invalidProperties[] = "invalid value for 'signature_title', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['signature_image']) && (mb_strlen($this->container['signature_image']) > 1048576)) {
            $invalidProperties[] = "invalid value for 'signature_image', the character length must be smaller than or equal to 1048576.";
        }

        if (!is_null($this->container['instructions']) && (count($this->container['instructions']) > 1)) {
            $invalidProperties[] = "invalid value for 'instructions', number of items must be less than or equal to 1.";
        }

        if (!is_null($this->container['instructions']) && (count($this->container['instructions']) < 1)) {
            $invalidProperties[] = "invalid value for 'instructions', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['customer_data_text_entries']) && (count($this->container['customer_data_text_entries']) > 6)) {
            $invalidProperties[] = "invalid value for 'customer_data_text_entries', number of items must be less than or equal to 6.";
        }

        if (!is_null($this->container['customer_data_text_entries']) && (count($this->container['customer_data_text_entries']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_data_text_entries', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['total_net_weight']) && ($this->container['total_net_weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'total_net_weight', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['total_net_weight']) && ($this->container['total_net_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_net_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_gross_weight']) && ($this->container['total_gross_weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'total_gross_weight', must be smaller than or equal to 999999999999.";
        }

        if (!is_null($this->container['total_gross_weight']) && ($this->container['total_gross_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_gross_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_references']) && (count($this->container['customer_references']) > 100)) {
            $invalidProperties[] = "invalid value for 'customer_references', number of items must be less than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Please enter commercial invoice number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Please enter commercial invoice date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        if ((mb_strlen($date) > 35)) {
            throw new \InvalidArgumentException('invalid length for $date when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $date when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be bigger than or equal to 1.');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets signature_name
     *
     * @return string|null
     */
    public function getSignatureName()
    {
        return $this->container['signature_name'];
    }

    /**
     * Sets signature_name
     *
     * @param string|null $signature_name Please enter who has signed the invoce
     *
     * @return self
     */
    public function setSignatureName($signature_name)
    {
        if (is_null($signature_name)) {
            throw new \InvalidArgumentException('non-nullable signature_name cannot be null');
        }
        if ((mb_strlen($signature_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $signature_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 35.');
        }

        $this->container['signature_name'] = $signature_name;

        return $this;
    }

    /**
     * Gets signature_title
     *
     * @return string|null
     */
    public function getSignatureTitle()
    {
        return $this->container['signature_title'];
    }

    /**
     * Sets signature_title
     *
     * @param string|null $signature_title Please provide title of person who has signed the invoice
     *
     * @return self
     */
    public function setSignatureTitle($signature_title)
    {
        if (is_null($signature_title)) {
            throw new \InvalidArgumentException('non-nullable signature_title cannot be null');
        }
        if ((mb_strlen($signature_title) > 35)) {
            throw new \InvalidArgumentException('invalid length for $signature_title when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 35.');
        }

        $this->container['signature_title'] = $signature_title;

        return $this;
    }

    /**
     * Gets signature_image
     *
     * @return string|null
     */
    public function getSignatureImage()
    {
        return $this->container['signature_image'];
    }

    /**
     * Sets signature_image
     *
     * @param string|null $signature_image Please provide the signature image
     *
     * @return self
     */
    public function setSignatureImage($signature_image)
    {
        if (is_null($signature_image)) {
            throw new \InvalidArgumentException('non-nullable signature_image cannot be null');
        }
        if ((mb_strlen($signature_image) > 1048576)) {
            throw new \InvalidArgumentException('invalid length for $signature_image when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 1048576.');
        }

        $this->container['signature_image'] = $signature_image;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string[]|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string[]|null $instructions Shipment instructions for customs invoice printing purposes. Printed only when using Customs Invoice template COMMERCIAL_INVOICE_04. If using Customs Invoice template    COMMERCIAL_INVOICE_04, recommended max length is 120 characters.
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }

        if ((count($instructions) > 1)) {
            throw new \InvalidArgumentException('invalid value for $instructions when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., number of items must be less than or equal to 1.');
        }
        if ((count($instructions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $instructions when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., number of items must be greater than or equal to 1.');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets customer_data_text_entries
     *
     * @return string[]|null
     */
    public function getCustomerDataTextEntries()
    {
        return $this->container['customer_data_text_entries'];
    }

    /**
     * Sets customer_data_text_entries
     *
     * @param string[]|null $customer_data_text_entries Customer data text to be printed in<BR>                  customs invoice.<BR>                  Printed only when using Customs<BR>                  Invoice template<BR>                  COMMERCIAL_INVOICE_04.
     *
     * @return self
     */
    public function setCustomerDataTextEntries($customer_data_text_entries)
    {
        if (is_null($customer_data_text_entries)) {
            throw new \InvalidArgumentException('non-nullable customer_data_text_entries cannot be null');
        }

        if ((count($customer_data_text_entries) > 6)) {
            throw new \InvalidArgumentException('invalid value for $customer_data_text_entries when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., number of items must be less than or equal to 6.');
        }
        if ((count($customer_data_text_entries) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_data_text_entries when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., number of items must be greater than or equal to 1.');
        }
        $this->container['customer_data_text_entries'] = $customer_data_text_entries;

        return $this;
    }

    /**
     * Gets total_net_weight
     *
     * @return float|null
     */
    public function getTotalNetWeight()
    {
        return $this->container['total_net_weight'];
    }

    /**
     * Sets total_net_weight
     *
     * @param float|null $total_net_weight Please provide the total net weight
     *
     * @return self
     */
    public function setTotalNetWeight($total_net_weight)
    {
        if (is_null($total_net_weight)) {
            throw new \InvalidArgumentException('non-nullable total_net_weight cannot be null');
        }

        if (($total_net_weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $total_net_weight when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 999999999999.');
        }
        if (($total_net_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_net_weight when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be bigger than or equal to 0.');
        }

        $this->container['total_net_weight'] = $total_net_weight;

        return $this;
    }

    /**
     * Gets total_gross_weight
     *
     * @return float|null
     */
    public function getTotalGrossWeight()
    {
        return $this->container['total_gross_weight'];
    }

    /**
     * Sets total_gross_weight
     *
     * @param float|null $total_gross_weight Please provide the total gross weight
     *
     * @return self
     */
    public function setTotalGrossWeight($total_gross_weight)
    {
        if (is_null($total_gross_weight)) {
            throw new \InvalidArgumentException('non-nullable total_gross_weight cannot be null');
        }

        if (($total_gross_weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $total_gross_weight when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be smaller than or equal to 999999999999.');
        }
        if (($total_gross_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_gross_weight when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., must be bigger than or equal to 0.');
        }

        $this->container['total_gross_weight'] = $total_gross_weight;

        return $this;
    }

    /**
     * Gets customer_references
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceCustomerReferencesInner[]|null
     */
    public function getCustomerReferences()
    {
        return $this->container['customer_references'];
    }

    /**
     * Sets customer_references
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceCustomerReferencesInner[]|null $customer_references Please provide the customer references at invoice level. It is recommended to provide less than 20 customer references of 'MRN' type code.
     *
     * @return self
     */
    public function setCustomerReferences($customer_references)
    {
        if (is_null($customer_references)) {
            throw new \InvalidArgumentException('non-nullable customer_references cannot be null');
        }

        if ((count($customer_references) > 100)) {
            throw new \InvalidArgumentException('invalid value for $customer_references when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice., number of items must be less than or equal to 100.');
        }
        $this->container['customer_references'] = $customer_references;

        return $this;
    }

    /**
     * Gets terms_of_payment
     *
     * @return string|null
     */
    public function getTermsOfPayment()
    {
        return $this->container['terms_of_payment'];
    }

    /**
     * Sets terms_of_payment
     *
     * @param string|null $terms_of_payment Please provide the terms of payment
     *
     * @return self
     */
    public function setTermsOfPayment($terms_of_payment)
    {
        if (is_null($terms_of_payment)) {
            throw new \InvalidArgumentException('non-nullable terms_of_payment cannot be null');
        }
        $this->container['terms_of_payment'] = $terms_of_payment;

        return $this;
    }

    /**
     * Gets indicative_customs_values
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceIndicativeCustomsValues|null
     */
    public function getIndicativeCustomsValues()
    {
        return $this->container['indicative_customs_values'];
    }

    /**
     * Sets indicative_customs_values
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoiceIndicativeCustomsValues|null $indicative_customs_values indicative_customs_values
     *
     * @return self
     */
    public function setIndicativeCustomsValues($indicative_customs_values)
    {
        if (is_null($indicative_customs_values)) {
            throw new \InvalidArgumentException('non-nullable indicative_customs_values cannot be null');
        }
        $this->container['indicative_customs_values'] = $indicative_customs_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



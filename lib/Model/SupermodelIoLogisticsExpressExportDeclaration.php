<?php
/**
 * SupermodelIoLogisticsExpressExportDeclaration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressExportDeclaration Class Doc Comment
 *
 * @category Class
 * @description Here you can find all details related to export declaration
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressExportDeclaration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressExportDeclarationModelFields
    {
        return new SupermodelIoLogisticsExpressExportDeclarationModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressExportDeclarationModelAttributes
    {
        return new SupermodelIoLogisticsExpressExportDeclarationModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressExportDeclaration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'line_items' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInner[]',
        'invoice' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoice',
        'remarks' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationRemarksInner[]',
        'additional_charges' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationAdditionalChargesInner[]',
        'place_of_incoterm' => 'string',
        'recipient_reference' => 'string',
        'exporter' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter',
        'export_reason_type' => 'string',
        'shipment_type' => 'string',
        'customs_documents' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationCustomsDocumentsInner[]',
        'incoterm' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'line_items' => null,
        'invoice' => null,
        'remarks' => null,
        'additional_charges' => null,
        'place_of_incoterm' => null,
        'recipient_reference' => null,
        'exporter' => null,
        'export_reason_type' => null,
        'shipment_type' => null,
        'customs_documents' => null,
        'incoterm' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'line_items' => false,
		'invoice' => false,
		'remarks' => false,
		'additional_charges' => false,
		'place_of_incoterm' => false,
		'recipient_reference' => false,
		'exporter' => false,
		'export_reason_type' => false,
		'shipment_type' => false,
		'customs_documents' => false,
		'incoterm' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_items' => 'lineItems',
        'invoice' => 'invoice',
        'remarks' => 'remarks',
        'additional_charges' => 'additionalCharges',
        'place_of_incoterm' => 'placeOfIncoterm',
        'recipient_reference' => 'recipientReference',
        'exporter' => 'exporter',
        'export_reason_type' => 'exportReasonType',
        'shipment_type' => 'shipmentType',
        'customs_documents' => 'customsDocuments',
        'incoterm' => 'incoterm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_items' => 'setLineItems',
        'invoice' => 'setInvoice',
        'remarks' => 'setRemarks',
        'additional_charges' => 'setAdditionalCharges',
        'place_of_incoterm' => 'setPlaceOfIncoterm',
        'recipient_reference' => 'setRecipientReference',
        'exporter' => 'setExporter',
        'export_reason_type' => 'setExportReasonType',
        'shipment_type' => 'setShipmentType',
        'customs_documents' => 'setCustomsDocuments',
        'incoterm' => 'setIncoterm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_items' => 'getLineItems',
        'invoice' => 'getInvoice',
        'remarks' => 'getRemarks',
        'additional_charges' => 'getAdditionalCharges',
        'place_of_incoterm' => 'getPlaceOfIncoterm',
        'recipient_reference' => 'getRecipientReference',
        'exporter' => 'getExporter',
        'export_reason_type' => 'getExportReasonType',
        'shipment_type' => 'getShipmentType',
        'customs_documents' => 'getCustomsDocuments',
        'incoterm' => 'getIncoterm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPORT_REASON_TYPE_PERMANENT = 'permanent';
    public const EXPORT_REASON_TYPE_TEMPORARY = 'temporary';
    public const EXPORT_REASON_TYPE__RETURN = 'return';
    public const EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN = 'used_exhibition_goods_to_origin';
    public const EXPORT_REASON_TYPE_INTERCOMPANY_USE = 'intercompany_use';
    public const EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE = 'commercial_purpose_or_sale';
    public const EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE = 'personal_belongings_or_personal_use';
    public const EXPORT_REASON_TYPE_SAMPLE = 'sample';
    public const EXPORT_REASON_TYPE_GIFT = 'gift';
    public const EXPORT_REASON_TYPE_RETURN_TO_ORIGIN = 'return_to_origin';
    public const EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT = 'warranty_replacement';
    public const EXPORT_REASON_TYPE_DIPLOMATIC_GOODS = 'diplomatic_goods';
    public const EXPORT_REASON_TYPE_DEFENCE_MATERIAL = 'defence_material';
    public const SHIPMENT_TYPE_PERSONAL = 'personal';
    public const SHIPMENT_TYPE_COMMERCIAL = 'commercial';
    public const INCOTERM_EXW = 'EXW';
    public const INCOTERM_FCA = 'FCA';
    public const INCOTERM_CPT = 'CPT';
    public const INCOTERM_CIP = 'CIP';
    public const INCOTERM_DPU = 'DPU';
    public const INCOTERM_DAP = 'DAP';
    public const INCOTERM_DDP = 'DDP';
    public const INCOTERM_FAS = 'FAS';
    public const INCOTERM_FOB = 'FOB';
    public const INCOTERM_CFR = 'CFR';
    public const INCOTERM_CIF = 'CIF';
    public const INCOTERM_DAF = 'DAF';
    public const INCOTERM_DAT = 'DAT';
    public const INCOTERM_DDU = 'DDU';
    public const INCOTERM_DEQ = 'DEQ';
    public const INCOTERM_DES = 'DES';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportReasonTypeAllowableValues()
    {
        return [
            self::EXPORT_REASON_TYPE_PERMANENT,
            self::EXPORT_REASON_TYPE_TEMPORARY,
            self::EXPORT_REASON_TYPE__RETURN,
            self::EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_INTERCOMPANY_USE,
            self::EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE,
            self::EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE,
            self::EXPORT_REASON_TYPE_SAMPLE,
            self::EXPORT_REASON_TYPE_GIFT,
            self::EXPORT_REASON_TYPE_RETURN_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT,
            self::EXPORT_REASON_TYPE_DIPLOMATIC_GOODS,
            self::EXPORT_REASON_TYPE_DEFENCE_MATERIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_PERSONAL,
            self::SHIPMENT_TYPE_COMMERCIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncotermAllowableValues()
    {
        return [
            self::INCOTERM_EXW,
            self::INCOTERM_FCA,
            self::INCOTERM_CPT,
            self::INCOTERM_CIP,
            self::INCOTERM_DPU,
            self::INCOTERM_DAP,
            self::INCOTERM_DDP,
            self::INCOTERM_FAS,
            self::INCOTERM_FOB,
            self::INCOTERM_CFR,
            self::INCOTERM_CIF,
            self::INCOTERM_DAF,
            self::INCOTERM_DAT,
            self::INCOTERM_DDU,
            self::INCOTERM_DEQ,
            self::INCOTERM_DES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('additional_charges', $data ?? [], null);
        $this->setIfExists('place_of_incoterm', $data ?? [], null);
        $this->setIfExists('recipient_reference', $data ?? [], null);
        $this->setIfExists('exporter', $data ?? [], null);
        $this->setIfExists('export_reason_type', $data ?? [], null);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('customs_documents', $data ?? [], null);
        $this->setIfExists('incoterm', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ((count($this->container['line_items']) > 1000)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be less than or equal to 1000.";
        }

        if ((count($this->container['line_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be greater than or equal to 1.";
        }

        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if (!is_null($this->container['remarks']) && (count($this->container['remarks']) > 3)) {
            $invalidProperties[] = "invalid value for 'remarks', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['additional_charges']) && (count($this->container['additional_charges']) > 5)) {
            $invalidProperties[] = "invalid value for 'additional_charges', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['place_of_incoterm']) && (mb_strlen($this->container['place_of_incoterm']) > 256)) {
            $invalidProperties[] = "invalid value for 'place_of_incoterm', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['place_of_incoterm']) && (mb_strlen($this->container['place_of_incoterm']) < 1)) {
            $invalidProperties[] = "invalid value for 'place_of_incoterm', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!is_null($this->container['export_reason_type']) && !in_array($this->container['export_reason_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_reason_type', must be one of '%s'",
                $this->container['export_reason_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_type', must be one of '%s'",
                $this->container['shipment_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customs_documents']) && (count($this->container['customs_documents']) > 50)) {
            $invalidProperties[] = "invalid value for 'customs_documents', number of items must be less than or equal to 50.";
        }

        if ($this->container['incoterm'] === null) {
            $invalidProperties[] = "'incoterm' can't be null";
        }
        $allowedValues = $this->getIncotermAllowableValues();
        if (!is_null($this->container['incoterm']) && !in_array($this->container['incoterm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'incoterm', must be one of '%s'",
                $this->container['incoterm'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_items
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInner[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationLineItemsInner[] $line_items Please enter details for each export line item
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }

        if ((count($line_items) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $line_items when calling SupermodelIoLogisticsExpressExportDeclaration., number of items must be less than or equal to 1000.');
        }
        if ((count($line_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line_items when calling SupermodelIoLogisticsExpressExportDeclaration., number of items must be greater than or equal to 1.');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoice $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationRemarksInner[]|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationRemarksInner[]|null $remarks Please enter up to three remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }

        if ((count($remarks) > 3)) {
            throw new \InvalidArgumentException('invalid value for $remarks when calling SupermodelIoLogisticsExpressExportDeclaration., number of items must be less than or equal to 3.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets additional_charges
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationAdditionalChargesInner[]|null
     */
    public function getAdditionalCharges()
    {
        return $this->container['additional_charges'];
    }

    /**
     * Sets additional_charges
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationAdditionalChargesInner[]|null $additional_charges Please enter additional charge to appear on the invoice<BR>      admin, Administration Charge<BR>      delivery, Delivery Charge<BR>      documentation, Documentation Charge<BR>      expedite, Expedite Charge<BR>      freight, Freight Charge<BR>      fuel surcharge, Fuel Surcharge<BR>      logistic, Logistic Charge<BR>      other, Other Charge<BR>      packaging, Packaging Charge<BR>      pickup, Pickup Charge<BR>      handling, Handling Charge<BR>      vat, VAT Charge<BR>      insurance, Insurance Cost
     *
     * @return self
     */
    public function setAdditionalCharges($additional_charges)
    {
        if (is_null($additional_charges)) {
            throw new \InvalidArgumentException('non-nullable additional_charges cannot be null');
        }

        if ((count($additional_charges) > 5)) {
            throw new \InvalidArgumentException('invalid value for $additional_charges when calling SupermodelIoLogisticsExpressExportDeclaration., number of items must be less than or equal to 5.');
        }
        $this->container['additional_charges'] = $additional_charges;

        return $this;
    }

    /**
     * Gets place_of_incoterm
     *
     * @return string|null
     */
    public function getPlaceOfIncoterm()
    {
        return $this->container['place_of_incoterm'];
    }

    /**
     * Sets place_of_incoterm
     *
     * @param string|null $place_of_incoterm Name of port of departure, shipment or destination as required under the applicable delivery term.
     *
     * @return self
     */
    public function setPlaceOfIncoterm($place_of_incoterm)
    {
        if (is_null($place_of_incoterm)) {
            throw new \InvalidArgumentException('non-nullable place_of_incoterm cannot be null');
        }
        if ((mb_strlen($place_of_incoterm) > 256)) {
            throw new \InvalidArgumentException('invalid length for $place_of_incoterm when calling SupermodelIoLogisticsExpressExportDeclaration., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($place_of_incoterm) < 1)) {
            throw new \InvalidArgumentException('invalid length for $place_of_incoterm when calling SupermodelIoLogisticsExpressExportDeclaration., must be bigger than or equal to 1.');
        }

        $this->container['place_of_incoterm'] = $place_of_incoterm;

        return $this;
    }

    /**
     * Gets recipient_reference
     *
     * @return string|null
     */
    public function getRecipientReference()
    {
        return $this->container['recipient_reference'];
    }

    /**
     * Sets recipient_reference
     *
     * @param string|null $recipient_reference Please enter recipient reference
     *
     * @return self
     */
    public function setRecipientReference($recipient_reference)
    {
        if (is_null($recipient_reference)) {
            throw new \InvalidArgumentException('non-nullable recipient_reference cannot be null');
        }
        $this->container['recipient_reference'] = $recipient_reference;

        return $this;
    }

    /**
     * Gets exporter
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter|null
     */
    public function getExporter()
    {
        return $this->container['exporter'];
    }

    /**
     * Sets exporter
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter|null $exporter exporter
     *
     * @return self
     */
    public function setExporter($exporter)
    {
        if (is_null($exporter)) {
            throw new \InvalidArgumentException('non-nullable exporter cannot be null');
        }
        $this->container['exporter'] = $exporter;

        return $this;
    }

    /**
     * Gets export_reason_type
     *
     * @return string|null
     */
    public function getExportReasonType()
    {
        return $this->container['export_reason_type'];
    }

    /**
     * Sets export_reason_type
     *
     * @param string|null $export_reason_type Please provide the reason for export
     *
     * @return self
     */
    public function setExportReasonType($export_reason_type)
    {
        if (is_null($export_reason_type)) {
            throw new \InvalidArgumentException('non-nullable export_reason_type cannot be null');
        }
        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!in_array($export_reason_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_reason_type', must be one of '%s'",
                    $export_reason_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_reason_type'] = $export_reason_type;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string|null $shipment_type Please provide the shipment was sent for Personal (Gift) or Commercial (Sale) reasons
     *
     * @return self
     */
    public function setShipmentType($shipment_type)
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_type', must be one of '%s'",
                    $shipment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets customs_documents
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationCustomsDocumentsInner[]|null
     */
    public function getCustomsDocuments()
    {
        return $this->container['customs_documents'];
    }

    /**
     * Sets customs_documents
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationCustomsDocumentsInner[]|null $customs_documents Please provide the Customs Documents at invoice level
     *
     * @return self
     */
    public function setCustomsDocuments($customs_documents)
    {
        if (is_null($customs_documents)) {
            throw new \InvalidArgumentException('non-nullable customs_documents cannot be null');
        }

        if ((count($customs_documents) > 50)) {
            throw new \InvalidArgumentException('invalid value for $customs_documents when calling SupermodelIoLogisticsExpressExportDeclaration., number of items must be less than or equal to 50.');
        }
        $this->container['customs_documents'] = $customs_documents;

        return $this;
    }

    /**
     * Gets incoterm
     *
     * @return string
     */
    public function getIncoterm()
    {
        return $this->container['incoterm'];
    }

    /**
     * Sets incoterm
     *
     * @param string $incoterm The Incoterms rules are a globally-recognized set of standards, used worldwide in international and domestic contracts for the delivery of goods, illustrating responsibilities between buyer and seller for costs and risk, as well as cargo insurance.<BR>      EXW ExWorks<BR>      FCA Free Carrier<BR>      CPT Carriage Paid To<BR>      CIP Carriage and Insurance Paid To<BR>      DPU Delivered at Place Unloaded<BR>      DAP Delivered at Place<BR>      DDP Delivered Duty Paid<BR>      FAS Free Alongside Ship<BR>      FOB Free on Board<BR>      CFR Cost and Freight<BR>      CIF Cost, Insurance and Freight<BR>      DAF Delivered at Frontier<BR>      DAT Delivered at Terminal<BR>      DDU Delivered Duty Unpaid<BR>      DEQ Delivery ex Quay<BR>      DES Delivered ex Ship
     *
     * @return self
     */
    public function setIncoterm($incoterm)
    {
        if (is_null($incoterm)) {
            throw new \InvalidArgumentException('non-nullable incoterm cannot be null');
        }
        $allowedValues = $this->getIncotermAllowableValues();
        if (!in_array($incoterm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'incoterm', must be one of '%s'",
                    $incoterm,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incoterm'] = $incoterm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



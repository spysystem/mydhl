<?php
/**
 * SupermodelIoLogisticsExpressPackage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressPackage Class Doc Comment
 *
 * @category Class
 * @description Package definition for /shipments
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressPackage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressPackageModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressPackageModelFields
    {
        return new SupermodelIoLogisticsExpressPackageModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressPackageModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressPackageModelAttributes
    {
        return new SupermodelIoLogisticsExpressPackageModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type_code' => 'string',
        'weight' => 'float',
        'dimensions' => '\MyDHL\Model\Dimensions',
        'customer_references' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageReference[]',
        'identifiers' => '\MyDHL\Model\SupermodelIoLogisticsExpressIdentifier[]',
        'description' => 'string',
        'label_barcodes' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelBarcodesInner[]',
        'label_text' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelTextInner[]',
        'label_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type_code' => null,
        'weight' => null,
        'dimensions' => null,
        'customer_references' => null,
        'identifiers' => null,
        'description' => null,
        'label_barcodes' => null,
        'label_text' => null,
        'label_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type_code' => false,
		'weight' => false,
		'dimensions' => false,
		'customer_references' => false,
		'identifiers' => false,
		'description' => false,
		'label_barcodes' => false,
		'label_text' => false,
		'label_description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_code' => 'typeCode',
        'weight' => 'weight',
        'dimensions' => 'dimensions',
        'customer_references' => 'customerReferences',
        'identifiers' => 'identifiers',
        'description' => 'description',
        'label_barcodes' => 'labelBarcodes',
        'label_text' => 'labelText',
        'label_description' => 'labelDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_code' => 'setTypeCode',
        'weight' => 'setWeight',
        'dimensions' => 'setDimensions',
        'customer_references' => 'setCustomerReferences',
        'identifiers' => 'setIdentifiers',
        'description' => 'setDescription',
        'label_barcodes' => 'setLabelBarcodes',
        'label_text' => 'setLabelText',
        'label_description' => 'setLabelDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_code' => 'getTypeCode',
        'weight' => 'getWeight',
        'dimensions' => 'getDimensions',
        'customer_references' => 'getCustomerReferences',
        'identifiers' => 'getIdentifiers',
        'description' => 'getDescription',
        'label_barcodes' => 'getLabelBarcodes',
        'label_text' => 'getLabelText',
        'label_description' => 'getLabelDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CODE__3_BX = '3BX';
    public const TYPE_CODE__2_BC = '2BC';
    public const TYPE_CODE__2_BP = '2BP';
    public const TYPE_CODE_CE1 = 'CE1';
    public const TYPE_CODE__7_BX = '7BX';
    public const TYPE_CODE__6_BX = '6BX';
    public const TYPE_CODE__4_BX = '4BX';
    public const TYPE_CODE__2_BX = '2BX';
    public const TYPE_CODE__1_CE = '1CE';
    public const TYPE_CODE_WB1 = 'WB1';
    public const TYPE_CODE_WB3 = 'WB3';
    public const TYPE_CODE_XPD = 'XPD';
    public const TYPE_CODE__8_BX = '8BX';
    public const TYPE_CODE__5_BX = '5BX';
    public const TYPE_CODE_WB6 = 'WB6';
    public const TYPE_CODE_TBL = 'TBL';
    public const TYPE_CODE_TBS = 'TBS';
    public const TYPE_CODE_WB2 = 'WB2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeCodeAllowableValues()
    {
        return [
            self::TYPE_CODE__3_BX,
            self::TYPE_CODE__2_BC,
            self::TYPE_CODE__2_BP,
            self::TYPE_CODE_CE1,
            self::TYPE_CODE__7_BX,
            self::TYPE_CODE__6_BX,
            self::TYPE_CODE__4_BX,
            self::TYPE_CODE__2_BX,
            self::TYPE_CODE__1_CE,
            self::TYPE_CODE_WB1,
            self::TYPE_CODE_WB3,
            self::TYPE_CODE_XPD,
            self::TYPE_CODE__8_BX,
            self::TYPE_CODE__5_BX,
            self::TYPE_CODE_WB6,
            self::TYPE_CODE_TBL,
            self::TYPE_CODE_TBS,
            self::TYPE_CODE_WB2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type_code', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('customer_references', $data ?? [], null);
        $this->setIfExists('identifiers', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('label_barcodes', $data ?? [], null);
        $this->setIfExists('label_text', $data ?? [], null);
        $this->setIfExists('label_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!is_null($this->container['type_code']) && !in_array($this->container['type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_code', must be one of '%s'",
                $this->container['type_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['type_code']) && (mb_strlen($this->container['type_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'type_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['type_code']) && (mb_strlen($this->container['type_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'type_code', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (($this->container['weight'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 999999999999.";
        }

        if (($this->container['weight'] < 0.001)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.001.";
        }

        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if (!is_null($this->container['customer_references']) && (count($this->container['customer_references']) > 99)) {
            $invalidProperties[] = "invalid value for 'customer_references', number of items must be less than or equal to 99.";
        }

        if (!is_null($this->container['customer_references']) && (count($this->container['customer_references']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_references', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['identifiers']) && (count($this->container['identifiers']) > 3)) {
            $invalidProperties[] = "invalid value for 'identifiers', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 70)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['label_barcodes']) && (count($this->container['label_barcodes']) > 2)) {
            $invalidProperties[] = "invalid value for 'label_barcodes', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['label_text']) && (count($this->container['label_text']) > 6)) {
            $invalidProperties[] = "invalid value for 'label_text', number of items must be less than or equal to 6.";
        }

        if (!is_null($this->container['label_description']) && (mb_strlen($this->container['label_description']) > 80)) {
            $invalidProperties[] = "invalid value for 'label_description', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['label_description']) && (mb_strlen($this->container['label_description']) < 1)) {
            $invalidProperties[] = "invalid value for 'label_description', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_code
     *
     * @return string|null
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string|null $type_code Please contact your DHL Express representative if you wish to use a DHL specific package otherwise ignore this element.
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        if (is_null($type_code)) {
            throw new \InvalidArgumentException('non-nullable type_code cannot be null');
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!in_array($type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_code', must be one of '%s'",
                    $type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($type_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $type_code when calling SupermodelIoLogisticsExpressPackage., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($type_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $type_code when calling SupermodelIoLogisticsExpressPackage., must be bigger than or equal to 2.');
        }

        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight The weight of the package.
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }

        if (($weight > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SupermodelIoLogisticsExpressPackage., must be smaller than or equal to 999999999999.');
        }
        if (($weight < 0.001)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling SupermodelIoLogisticsExpressPackage., must be bigger than or equal to 0.001.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \MyDHL\Model\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \MyDHL\Model\Dimensions $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets customer_references
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageReference[]|null
     */
    public function getCustomerReferences()
    {
        return $this->container['customer_references'];
    }

    /**
     * Sets customer_references
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageReference[]|null $customer_references Here you can declare your customer references for each package
     *
     * @return self
     */
    public function setCustomerReferences($customer_references)
    {
        if (is_null($customer_references)) {
            throw new \InvalidArgumentException('non-nullable customer_references cannot be null');
        }

        if ((count($customer_references) > 99)) {
            throw new \InvalidArgumentException('invalid value for $customer_references when calling SupermodelIoLogisticsExpressPackage., number of items must be less than or equal to 99.');
        }
        if ((count($customer_references) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_references when calling SupermodelIoLogisticsExpressPackage., number of items must be greater than or equal to 1.');
        }
        $this->container['customer_references'] = $customer_references;

        return $this;
    }

    /**
     * Gets identifiers
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressIdentifier[]|null
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressIdentifier[]|null $identifiers Identifiers section is on the package level where you can optionaly provide a DHL Express waybill number. This has to be enabled by your DHL Express IT contact.
     *
     * @return self
     */
    public function setIdentifiers($identifiers)
    {
        if (is_null($identifiers)) {
            throw new \InvalidArgumentException('non-nullable identifiers cannot be null');
        }

        if ((count($identifiers) > 3)) {
            throw new \InvalidArgumentException('invalid value for $identifiers when calling SupermodelIoLogisticsExpressPackage., number of items must be less than or equal to 3.');
        }
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Please enter description of content for each package
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 70)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupermodelIoLogisticsExpressPackage., must be smaller than or equal to 70.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SupermodelIoLogisticsExpressPackage., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets label_barcodes
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelBarcodesInner[]|null
     */
    public function getLabelBarcodes()
    {
        return $this->container['label_barcodes'];
    }

    /**
     * Sets label_barcodes
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelBarcodesInner[]|null $label_barcodes This allows you to define up to two bespoke barcodes on the DHL Express Tranport label. To use this feature please set outputImageProperties/imageOptions/templateName as ECOM26_84CI_003 for typeCode=label
     *
     * @return self
     */
    public function setLabelBarcodes($label_barcodes)
    {
        if (is_null($label_barcodes)) {
            throw new \InvalidArgumentException('non-nullable label_barcodes cannot be null');
        }

        if ((count($label_barcodes) > 2)) {
            throw new \InvalidArgumentException('invalid value for $label_barcodes when calling SupermodelIoLogisticsExpressPackage., number of items must be less than or equal to 2.');
        }
        $this->container['label_barcodes'] = $label_barcodes;

        return $this;
    }

    /**
     * Gets label_text
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelTextInner[]|null
     */
    public function getLabelText()
    {
        return $this->container['label_text'];
    }

    /**
     * Sets label_text
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageLabelTextInner[]|null $label_text This allows you to enter up to two bespoke texts on the DHL Express Tranport label. To use this feature please set outputImageProperties/imageOptions/templateName as ECOM26_84CI_003 for typeCode=label
     *
     * @return self
     */
    public function setLabelText($label_text)
    {
        if (is_null($label_text)) {
            throw new \InvalidArgumentException('non-nullable label_text cannot be null');
        }

        if ((count($label_text) > 6)) {
            throw new \InvalidArgumentException('invalid value for $label_text when calling SupermodelIoLogisticsExpressPackage., number of items must be less than or equal to 6.');
        }
        $this->container['label_text'] = $label_text;

        return $this;
    }

    /**
     * Gets label_description
     *
     * @return string|null
     */
    public function getLabelDescription()
    {
        return $this->container['label_description'];
    }

    /**
     * Sets label_description
     *
     * @param string|null $label_description Please enter additional customer description
     *
     * @return self
     */
    public function setLabelDescription($label_description)
    {
        if (is_null($label_description)) {
            throw new \InvalidArgumentException('non-nullable label_description cannot be null');
        }
        if ((mb_strlen($label_description) > 80)) {
            throw new \InvalidArgumentException('invalid length for $label_description when calling SupermodelIoLogisticsExpressPackage., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($label_description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $label_description when calling SupermodelIoLogisticsExpressPackage., must be bigger than or equal to 1.');
        }

        $this->container['label_description'] = $label_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ProductsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * ProductsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ProductsInnerModelFields
      */
    public static function GetModelFields(): ProductsInnerModelFields
    {
        return new ProductsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ProductsInnerModelAttributes
      */
    public static function GetModelAttributes(): ProductsInnerModelAttributes
    {
        return new ProductsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'products_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_name' => 'string',
        'product_code' => 'string',
        'local_product_code' => 'string',
        'local_product_country_code' => 'string',
        'network_type_code' => 'string',
        'is_customer_agreement' => 'bool',
        'weight' => '\MyDHL\Model\Weight',
        'breakdown' => '\MyDHL\Model\ProductsInnerBreakdownInner[]',
        'service_code_mutually_exclusive_groups' => '\MyDHL\Model\ProductsInnerServiceCodeMutuallyExclusiveGroupsInner[]',
        'service_code_dependency_rule_groups' => '\MyDHL\Model\ProductsInnerServiceCodeDependencyRuleGroupsInner[]',
        'pickup_capabilities' => '\MyDHL\Model\ProductsInnerPickupCapabilities',
        'delivery_capabilities' => '\MyDHL\Model\ProductsInnerDeliveryCapabilities'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_name' => null,
        'product_code' => null,
        'local_product_code' => null,
        'local_product_country_code' => null,
        'network_type_code' => null,
        'is_customer_agreement' => null,
        'weight' => null,
        'breakdown' => null,
        'service_code_mutually_exclusive_groups' => null,
        'service_code_dependency_rule_groups' => null,
        'pickup_capabilities' => null,
        'delivery_capabilities' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_name' => false,
		'product_code' => false,
		'local_product_code' => false,
		'local_product_country_code' => false,
		'network_type_code' => false,
		'is_customer_agreement' => false,
		'weight' => false,
		'breakdown' => false,
		'service_code_mutually_exclusive_groups' => false,
		'service_code_dependency_rule_groups' => false,
		'pickup_capabilities' => false,
		'delivery_capabilities' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
        'product_code' => 'productCode',
        'local_product_code' => 'localProductCode',
        'local_product_country_code' => 'localProductCountryCode',
        'network_type_code' => 'networkTypeCode',
        'is_customer_agreement' => 'isCustomerAgreement',
        'weight' => 'weight',
        'breakdown' => 'breakdown',
        'service_code_mutually_exclusive_groups' => 'serviceCodeMutuallyExclusiveGroups',
        'service_code_dependency_rule_groups' => 'serviceCodeDependencyRuleGroups',
        'pickup_capabilities' => 'pickupCapabilities',
        'delivery_capabilities' => 'deliveryCapabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
        'product_code' => 'setProductCode',
        'local_product_code' => 'setLocalProductCode',
        'local_product_country_code' => 'setLocalProductCountryCode',
        'network_type_code' => 'setNetworkTypeCode',
        'is_customer_agreement' => 'setIsCustomerAgreement',
        'weight' => 'setWeight',
        'breakdown' => 'setBreakdown',
        'service_code_mutually_exclusive_groups' => 'setServiceCodeMutuallyExclusiveGroups',
        'service_code_dependency_rule_groups' => 'setServiceCodeDependencyRuleGroups',
        'pickup_capabilities' => 'setPickupCapabilities',
        'delivery_capabilities' => 'setDeliveryCapabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
        'product_code' => 'getProductCode',
        'local_product_code' => 'getLocalProductCode',
        'local_product_country_code' => 'getLocalProductCountryCode',
        'network_type_code' => 'getNetworkTypeCode',
        'is_customer_agreement' => 'getIsCustomerAgreement',
        'weight' => 'getWeight',
        'breakdown' => 'getBreakdown',
        'service_code_mutually_exclusive_groups' => 'getServiceCodeMutuallyExclusiveGroups',
        'service_code_dependency_rule_groups' => 'getServiceCodeDependencyRuleGroups',
        'pickup_capabilities' => 'getPickupCapabilities',
        'delivery_capabilities' => 'getDeliveryCapabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('local_product_code', $data ?? [], null);
        $this->setIfExists('local_product_country_code', $data ?? [], null);
        $this->setIfExists('network_type_code', $data ?? [], null);
        $this->setIfExists('is_customer_agreement', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('breakdown', $data ?? [], null);
        $this->setIfExists('service_code_mutually_exclusive_groups', $data ?? [], null);
        $this->setIfExists('service_code_dependency_rule_groups', $data ?? [], null);
        $this->setIfExists('pickup_capabilities', $data ?? [], null);
        $this->setIfExists('delivery_capabilities', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name Name of the DHL Express product
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code This is the global DHL Express product code for which the delivery is feasible respecting the input data from the request.
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets local_product_code
     *
     * @return string|null
     */
    public function getLocalProductCode()
    {
        return $this->container['local_product_code'];
    }

    /**
     * Sets local_product_code
     *
     * @param string|null $local_product_code This is the local DHL Express product code for which the delivery is feasible respecting the input data from the request.
     *
     * @return self
     */
    public function setLocalProductCode($local_product_code)
    {
        if (is_null($local_product_code)) {
            throw new \InvalidArgumentException('non-nullable local_product_code cannot be null');
        }
        $this->container['local_product_code'] = $local_product_code;

        return $this;
    }

    /**
     * Gets local_product_country_code
     *
     * @return string|null
     */
    public function getLocalProductCountryCode()
    {
        return $this->container['local_product_country_code'];
    }

    /**
     * Sets local_product_country_code
     *
     * @param string|null $local_product_country_code The country code for the local service used
     *
     * @return self
     */
    public function setLocalProductCountryCode($local_product_country_code)
    {
        if (is_null($local_product_country_code)) {
            throw new \InvalidArgumentException('non-nullable local_product_country_code cannot be null');
        }
        $this->container['local_product_country_code'] = $local_product_country_code;

        return $this;
    }

    /**
     * Gets network_type_code
     *
     * @return string|null
     */
    public function getNetworkTypeCode()
    {
        return $this->container['network_type_code'];
    }

    /**
     * Sets network_type_code
     *
     * @param string|null $network_type_code The NetworkTypeCode element indicates the product belongs to the Day Definite (DD) or Time Definite (TD) network.<BR>            Possible Values;<BR>            DD: Day Definite product<BR>            TD: Time Definite product
     *
     * @return self
     */
    public function setNetworkTypeCode($network_type_code)
    {
        if (is_null($network_type_code)) {
            throw new \InvalidArgumentException('non-nullable network_type_code cannot be null');
        }
        $this->container['network_type_code'] = $network_type_code;

        return $this;
    }

    /**
     * Gets is_customer_agreement
     *
     * @return bool|null
     */
    public function getIsCustomerAgreement()
    {
        return $this->container['is_customer_agreement'];
    }

    /**
     * Sets is_customer_agreement
     *
     * @param bool|null $is_customer_agreement Indicator that the product only can be offered to customers with prior agreement.
     *
     * @return self
     */
    public function setIsCustomerAgreement($is_customer_agreement)
    {
        if (is_null($is_customer_agreement)) {
            throw new \InvalidArgumentException('non-nullable is_customer_agreement cannot be null');
        }
        $this->container['is_customer_agreement'] = $is_customer_agreement;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \MyDHL\Model\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \MyDHL\Model\Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets breakdown
     *
     * @return \MyDHL\Model\ProductsInnerBreakdownInner[]|null
     */
    public function getBreakdown()
    {
        return $this->container['breakdown'];
    }

    /**
     * Sets breakdown
     *
     * @param \MyDHL\Model\ProductsInnerBreakdownInner[]|null $breakdown breakdown
     *
     * @return self
     */
    public function setBreakdown($breakdown)
    {
        if (is_null($breakdown)) {
            throw new \InvalidArgumentException('non-nullable breakdown cannot be null');
        }
        $this->container['breakdown'] = $breakdown;

        return $this;
    }

    /**
     * Gets service_code_mutually_exclusive_groups
     *
     * @return \MyDHL\Model\ProductsInnerServiceCodeMutuallyExclusiveGroupsInner[]|null
     */
    public function getServiceCodeMutuallyExclusiveGroups()
    {
        return $this->container['service_code_mutually_exclusive_groups'];
    }

    /**
     * Sets service_code_mutually_exclusive_groups
     *
     * @param \MyDHL\Model\ProductsInnerServiceCodeMutuallyExclusiveGroupsInner[]|null $service_code_mutually_exclusive_groups Group of serviceCodes that are mutually exclusive.  Only one serviceCode among the list must be applied for a shipment
     *
     * @return self
     */
    public function setServiceCodeMutuallyExclusiveGroups($service_code_mutually_exclusive_groups)
    {
        if (is_null($service_code_mutually_exclusive_groups)) {
            throw new \InvalidArgumentException('non-nullable service_code_mutually_exclusive_groups cannot be null');
        }
        $this->container['service_code_mutually_exclusive_groups'] = $service_code_mutually_exclusive_groups;

        return $this;
    }

    /**
     * Gets service_code_dependency_rule_groups
     *
     * @return \MyDHL\Model\ProductsInnerServiceCodeDependencyRuleGroupsInner[]|null
     */
    public function getServiceCodeDependencyRuleGroups()
    {
        return $this->container['service_code_dependency_rule_groups'];
    }

    /**
     * Sets service_code_dependency_rule_groups
     *
     * @param \MyDHL\Model\ProductsInnerServiceCodeDependencyRuleGroupsInner[]|null $service_code_dependency_rule_groups Dependency rule groups for a particular serviceCode.
     *
     * @return self
     */
    public function setServiceCodeDependencyRuleGroups($service_code_dependency_rule_groups)
    {
        if (is_null($service_code_dependency_rule_groups)) {
            throw new \InvalidArgumentException('non-nullable service_code_dependency_rule_groups cannot be null');
        }
        $this->container['service_code_dependency_rule_groups'] = $service_code_dependency_rule_groups;

        return $this;
    }

    /**
     * Gets pickup_capabilities
     *
     * @return \MyDHL\Model\ProductsInnerPickupCapabilities|null
     */
    public function getPickupCapabilities()
    {
        return $this->container['pickup_capabilities'];
    }

    /**
     * Sets pickup_capabilities
     *
     * @param \MyDHL\Model\ProductsInnerPickupCapabilities|null $pickup_capabilities pickup_capabilities
     *
     * @return self
     */
    public function setPickupCapabilities($pickup_capabilities)
    {
        if (is_null($pickup_capabilities)) {
            throw new \InvalidArgumentException('non-nullable pickup_capabilities cannot be null');
        }
        $this->container['pickup_capabilities'] = $pickup_capabilities;

        return $this;
    }

    /**
     * Gets delivery_capabilities
     *
     * @return \MyDHL\Model\ProductsInnerDeliveryCapabilities|null
     */
    public function getDeliveryCapabilities()
    {
        return $this->container['delivery_capabilities'];
    }

    /**
     * Sets delivery_capabilities
     *
     * @param \MyDHL\Model\ProductsInnerDeliveryCapabilities|null $delivery_capabilities delivery_capabilities
     *
     * @return self
     */
    public function setDeliveryCapabilities($delivery_capabilities)
    {
        if (is_null($delivery_capabilities)) {
            throw new \InvalidArgumentException('non-nullable delivery_capabilities cannot be null');
        }
        $this->container['delivery_capabilities'] = $delivery_capabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



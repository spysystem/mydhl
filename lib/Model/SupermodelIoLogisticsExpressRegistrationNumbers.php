<?php
/**
 * SupermodelIoLogisticsExpressRegistrationNumbers
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressRegistrationNumbers Class Doc Comment
 *
 * @category Class
 * @description Should your country require registration numbers, such as VAT, EOR etc., please declare it here
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressRegistrationNumbers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressRegistrationNumbersModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressRegistrationNumbersModelFields
    {
        return new SupermodelIoLogisticsExpressRegistrationNumbersModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressRegistrationNumbersModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressRegistrationNumbersModelAttributes
    {
        return new SupermodelIoLogisticsExpressRegistrationNumbersModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressRegistrationNumbers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type_code' => 'string',
        'number' => 'string',
        'issuer_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type_code' => null,
        'number' => null,
        'issuer_country_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type_code' => false,
		'number' => false,
		'issuer_country_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_code' => 'typeCode',
        'number' => 'number',
        'issuer_country_code' => 'issuerCountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_code' => 'setTypeCode',
        'number' => 'setNumber',
        'issuer_country_code' => 'setIssuerCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_code' => 'getTypeCode',
        'number' => 'getNumber',
        'issuer_country_code' => 'getIssuerCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CODE_VAT = 'VAT';
    public const TYPE_CODE_EIN = 'EIN';
    public const TYPE_CODE_GST = 'GST';
    public const TYPE_CODE_SSN = 'SSN';
    public const TYPE_CODE_EOR = 'EOR';
    public const TYPE_CODE_DUN = 'DUN';
    public const TYPE_CODE_FED = 'FED';
    public const TYPE_CODE_STA = 'STA';
    public const TYPE_CODE_CNP = 'CNP';
    public const TYPE_CODE_IE = 'IE';
    public const TYPE_CODE_INN = 'INN';
    public const TYPE_CODE_KPP = 'KPP';
    public const TYPE_CODE_OGR = 'OGR';
    public const TYPE_CODE_OKP = 'OKP';
    public const TYPE_CODE_MRN = 'MRN';
    public const TYPE_CODE_SDT = 'SDT';
    public const TYPE_CODE_FTZ = 'FTZ';
    public const TYPE_CODE_DAN = 'DAN';
    public const TYPE_CODE_TAN = 'TAN';
    public const TYPE_CODE_DTF = 'DTF';
    public const TYPE_CODE_RGP = 'RGP';
    public const TYPE_CODE_DLI = 'DLI';
    public const TYPE_CODE_NID = 'NID';
    public const TYPE_CODE_PAS = 'PAS';
    public const TYPE_CODE_MID = 'MID';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeCodeAllowableValues()
    {
        return [
            self::TYPE_CODE_VAT,
            self::TYPE_CODE_EIN,
            self::TYPE_CODE_GST,
            self::TYPE_CODE_SSN,
            self::TYPE_CODE_EOR,
            self::TYPE_CODE_DUN,
            self::TYPE_CODE_FED,
            self::TYPE_CODE_STA,
            self::TYPE_CODE_CNP,
            self::TYPE_CODE_IE,
            self::TYPE_CODE_INN,
            self::TYPE_CODE_KPP,
            self::TYPE_CODE_OGR,
            self::TYPE_CODE_OKP,
            self::TYPE_CODE_MRN,
            self::TYPE_CODE_SDT,
            self::TYPE_CODE_FTZ,
            self::TYPE_CODE_DAN,
            self::TYPE_CODE_TAN,
            self::TYPE_CODE_DTF,
            self::TYPE_CODE_RGP,
            self::TYPE_CODE_DLI,
            self::TYPE_CODE_NID,
            self::TYPE_CODE_PAS,
            self::TYPE_CODE_MID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type_code', $data ?? [], 'VAT');
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('issuer_country_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type_code'] === null) {
            $invalidProperties[] = "'type_code' can't be null";
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!is_null($this->container['type_code']) && !in_array($this->container['type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_code', must be one of '%s'",
                $this->container['type_code'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'type_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['type_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'type_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 35)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['number']) < 1)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['issuer_country_code'] === null) {
            $invalidProperties[] = "'issuer_country_code' can't be null";
        }
        if ((mb_strlen($this->container['issuer_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'issuer_country_code', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['issuer_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'issuer_country_code', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_code
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string $type_code VAT, Value-Added tax<BR>      EIN, Employer Identification Number<BR>      GST, Goods and Service Tax<BR>      SSN, Social Security Number<BR>      EOR, European Union Registration and Identification<BR>      DUN, Data Universal Numberin System<BR>      FED, Federal Tax ID<BR>      STA, State Tax ID<BR>      CNP, Brazil CNPJ/CPF Federal Tax<BR>      IE, Brazil type IE/RG Federal Tax<BR>      INN, Russia bank details section INN<BR>      KPP, Russia bank details section KPP<BR>      OGR, Russia bank details section OGRN<BR>      OKP, Russia bank details sectionOKPO<BR>      SDT, Overseas Registered Supplier or Import One-Stop-Shop or GB VAT (foreign) registration or AUSid GST Registration or VAT on E-Commerce<BR>      FTZ, Free Trade Zone ID<BR>      DAN, Deferment Account Duties Only<BR>      TAN, Deferment Account Tax Only<BR>      DTF, Deferment Account Duties, Taxes and Fees Only<BR>      RGP, EU Registered Exporters registration ID<BR>       DLI,Driver's License <BR>      NID,National Identity Card<BR>      ,PAS:Passport<BR>      ,MID:Manufacturer ID
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        if (is_null($type_code)) {
            throw new \InvalidArgumentException('non-nullable type_code cannot be null');
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!in_array($type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_code', must be one of '%s'",
                    $type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($type_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $type_code when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($type_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type_code when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be bigger than or equal to 1.');
        }

        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Please enter registration number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets issuer_country_code
     *
     * @return string
     */
    public function getIssuerCountryCode()
    {
        return $this->container['issuer_country_code'];
    }

    /**
     * Sets issuer_country_code
     *
     * @param string $issuer_country_code Please enter 2 character code of the country where the Registration Number has been issued by
     *
     * @return self
     */
    public function setIssuerCountryCode($issuer_country_code)
    {
        if (is_null($issuer_country_code)) {
            throw new \InvalidArgumentException('non-nullable issuer_country_code cannot be null');
        }
        if ((mb_strlen($issuer_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $issuer_country_code when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($issuer_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $issuer_country_code when calling SupermodelIoLogisticsExpressRegistrationNumbers., must be bigger than or equal to 2.');
        }

        $this->container['issuer_country_code'] = $issuer_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Pickup
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * Pickup Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Pickup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return PickupModelFields
      */
    public static function GetModelFields(): PickupModelFields
    {
        return new PickupModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return PickupModelAttributes
      */
    public static function GetModelAttributes(): PickupModelAttributes
    {
        return new PickupModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pickup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_requested' => 'bool',
        'close_time' => 'string',
        'location' => 'string',
        'special_instructions' => '\MyDHL\Model\PickupSpecialInstructionsInner[]',
        'pickup_details' => '\MyDHL\Model\PickupPickupDetails',
        'pickup_requestor_details' => '\MyDHL\Model\PickupPickupRequestorDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_requested' => null,
        'close_time' => null,
        'location' => null,
        'special_instructions' => null,
        'pickup_details' => null,
        'pickup_requestor_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_requested' => false,
		'close_time' => false,
		'location' => false,
		'special_instructions' => false,
		'pickup_details' => false,
		'pickup_requestor_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_requested' => 'isRequested',
        'close_time' => 'closeTime',
        'location' => 'location',
        'special_instructions' => 'specialInstructions',
        'pickup_details' => 'pickupDetails',
        'pickup_requestor_details' => 'pickupRequestorDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_requested' => 'setIsRequested',
        'close_time' => 'setCloseTime',
        'location' => 'setLocation',
        'special_instructions' => 'setSpecialInstructions',
        'pickup_details' => 'setPickupDetails',
        'pickup_requestor_details' => 'setPickupRequestorDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_requested' => 'getIsRequested',
        'close_time' => 'getCloseTime',
        'location' => 'getLocation',
        'special_instructions' => 'getSpecialInstructions',
        'pickup_details' => 'getPickupDetails',
        'pickup_requestor_details' => 'getPickupRequestorDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_requested', $data ?? [], false);
        $this->setIfExists('close_time', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('special_instructions', $data ?? [], null);
        $this->setIfExists('pickup_details', $data ?? [], null);
        $this->setIfExists('pickup_requestor_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_requested'] === null) {
            $invalidProperties[] = "'is_requested' can't be null";
        }
        if (!is_null($this->container['close_time']) && (mb_strlen($this->container['close_time']) > 5)) {
            $invalidProperties[] = "invalid value for 'close_time', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['close_time']) && !preg_match("/([0-1][0-9]|2[0-3]):([0-5][0-9])/", $this->container['close_time'])) {
            $invalidProperties[] = "invalid value for 'close_time', must be conform to the pattern /([0-1][0-9]|2[0-3]):([0-5][0-9])/.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 80)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['special_instructions']) && (count($this->container['special_instructions']) > 1)) {
            $invalidProperties[] = "invalid value for 'special_instructions', number of items must be less than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_requested
     *
     * @return bool
     */
    public function getIsRequested()
    {
        return $this->container['is_requested'];
    }

    /**
     * Sets is_requested
     *
     * @param bool $is_requested Please advise if a pickup is needed for this shipment
     *
     * @return self
     */
    public function setIsRequested($is_requested)
    {
        if (is_null($is_requested)) {
            throw new \InvalidArgumentException('non-nullable is_requested cannot be null');
        }
        $this->container['is_requested'] = $is_requested;

        return $this;
    }

    /**
     * Gets close_time
     *
     * @return string|null
     */
    public function getCloseTime()
    {
        return $this->container['close_time'];
    }

    /**
     * Sets close_time
     *
     * @param string|null $close_time The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM)
     *
     * @return self
     */
    public function setCloseTime($close_time)
    {
        if (is_null($close_time)) {
            throw new \InvalidArgumentException('non-nullable close_time cannot be null');
        }
        if ((mb_strlen($close_time) > 5)) {
            throw new \InvalidArgumentException('invalid length for $close_time when calling Pickup., must be smaller than or equal to 5.');
        }
        if ((!preg_match("/([0-1][0-9]|2[0-3]):([0-5][0-9])/", $close_time))) {
            throw new \InvalidArgumentException("invalid value for \$close_time when calling Pickup., must conform to the pattern /([0-1][0-9]|2[0-3]):([0-5][0-9])/.");
        }

        $this->container['close_time'] = $close_time;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Provides information on where the package should be picked up by DHL courier.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        if ((mb_strlen($location) > 80)) {
            throw new \InvalidArgumentException('invalid length for $location when calling Pickup., must be smaller than or equal to 80.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return \MyDHL\Model\PickupSpecialInstructionsInner[]|null
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param \MyDHL\Model\PickupSpecialInstructionsInner[]|null $special_instructions Details special pickup instructions you may wish to send to the DHL Courier.
     *
     * @return self
     */
    public function setSpecialInstructions($special_instructions)
    {
        if (is_null($special_instructions)) {
            throw new \InvalidArgumentException('non-nullable special_instructions cannot be null');
        }

        if ((count($special_instructions) > 1)) {
            throw new \InvalidArgumentException('invalid value for $special_instructions when calling Pickup., number of items must be less than or equal to 1.');
        }
        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets pickup_details
     *
     * @return \MyDHL\Model\PickupPickupDetails|null
     */
    public function getPickupDetails()
    {
        return $this->container['pickup_details'];
    }

    /**
     * Sets pickup_details
     *
     * @param \MyDHL\Model\PickupPickupDetails|null $pickup_details pickup_details
     *
     * @return self
     */
    public function setPickupDetails($pickup_details)
    {
        if (is_null($pickup_details)) {
            throw new \InvalidArgumentException('non-nullable pickup_details cannot be null');
        }
        $this->container['pickup_details'] = $pickup_details;

        return $this;
    }

    /**
     * Gets pickup_requestor_details
     *
     * @return \MyDHL\Model\PickupPickupRequestorDetails|null
     */
    public function getPickupRequestorDetails()
    {
        return $this->container['pickup_requestor_details'];
    }

    /**
     * Sets pickup_requestor_details
     *
     * @param \MyDHL\Model\PickupPickupRequestorDetails|null $pickup_requestor_details pickup_requestor_details
     *
     * @return self
     */
    public function setPickupRequestorDetails($pickup_requestor_details)
    {
        if (is_null($pickup_requestor_details)) {
            throw new \InvalidArgumentException('non-nullable pickup_requestor_details cannot be null');
        }
        $this->container['pickup_requestor_details'] = $pickup_requestor_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



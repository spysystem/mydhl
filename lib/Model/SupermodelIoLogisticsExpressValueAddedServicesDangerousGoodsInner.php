<?php
/**
 * SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelFields
    {
        return new SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressValueAddedServices_dangerousGoods_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content_id' => 'string',
        'dry_ice_total_net_weight' => 'float',
        'custom_description' => 'string',
        'un_codes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'content_id' => null,
        'dry_ice_total_net_weight' => null,
        'custom_description' => null,
        'un_codes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'content_id' => false,
		'dry_ice_total_net_weight' => false,
		'custom_description' => false,
		'un_codes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_id' => 'contentId',
        'dry_ice_total_net_weight' => 'dryIceTotalNetWeight',
        'custom_description' => 'customDescription',
        'un_codes' => 'unCodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_id' => 'setContentId',
        'dry_ice_total_net_weight' => 'setDryIceTotalNetWeight',
        'custom_description' => 'setCustomDescription',
        'un_codes' => 'setUnCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_id' => 'getContentId',
        'dry_ice_total_net_weight' => 'getDryIceTotalNetWeight',
        'custom_description' => 'getCustomDescription',
        'un_codes' => 'getUnCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('content_id', $data ?? [], null);
        $this->setIfExists('dry_ice_total_net_weight', $data ?? [], null);
        $this->setIfExists('custom_description', $data ?? [], null);
        $this->setIfExists('un_codes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content_id'] === null) {
            $invalidProperties[] = "'content_id' can't be null";
        }
        if ((mb_strlen($this->container['content_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'content_id', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['content_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'content_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['custom_description']) && (mb_strlen($this->container['custom_description']) > 200)) {
            $invalidProperties[] = "invalid value for 'custom_description', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['un_codes']) && (count($this->container['un_codes']) > 10)) {
            $invalidProperties[] = "invalid value for 'un_codes', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['un_codes']) && (count($this->container['un_codes']) < 1)) {
            $invalidProperties[] = "invalid value for 'un_codes', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_id
     *
     * @return string
     */
    public function getContentId()
    {
        return $this->container['content_id'];
    }

    /**
     * Sets content_id
     *
     * @param string $content_id Please enter valid DHL Express Dangerous good content id (please contact your DHL Express IT representative for the relevant content ID code if you are shipping Dan
     *
     * @return self
     */
    public function setContentId($content_id)
    {
        if (is_null($content_id)) {
            throw new \InvalidArgumentException('non-nullable content_id cannot be null');
        }
        if ((mb_strlen($content_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $content_id when calling SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($content_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $content_id when calling SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner., must be bigger than or equal to 1.');
        }

        $this->container['content_id'] = $content_id;

        return $this;
    }

    /**
     * Gets dry_ice_total_net_weight
     *
     * @return float|null
     */
    public function getDryIceTotalNetWeight()
    {
        return $this->container['dry_ice_total_net_weight'];
    }

    /**
     * Sets dry_ice_total_net_weight
     *
     * @param float|null $dry_ice_total_net_weight Please enter dry ice total net weight when shipping dry ice
     *
     * @return self
     */
    public function setDryIceTotalNetWeight($dry_ice_total_net_weight)
    {
        if (is_null($dry_ice_total_net_weight)) {
            throw new \InvalidArgumentException('non-nullable dry_ice_total_net_weight cannot be null');
        }


        $this->container['dry_ice_total_net_weight'] = $dry_ice_total_net_weight;

        return $this;
    }

    /**
     * Gets custom_description
     *
     * @return string|null
     */
    public function getCustomDescription()
    {
        return $this->container['custom_description'];
    }

    /**
     * Sets custom_description
     *
     * @param string|null $custom_description The customDescription node contains the customized Dangerous Goods statement to declare contents accurately. The customDescription node value will be displayed in the Transport Label and Waybill Document, replacing the default IATA Dangerous Goods statement constructed based on contentId node.<BR>            Multiple customDescription nodes from multiple dangerousGoods nodes will be concatenated using comma separator with combined maximum limit of 200 characters.<BR>            <BR>            It is recommended to use customDescription for entire shipment for each dangerousGoods to fully utilize customDescription printout in Transport Label and Waybill Document.<BR>            <BR>            Note: For 'customDescription' usage, ensure all 'dangerousGoods' segments are including the 'customDescription' field value. Any of the dangerousGoods does not provide with customDescription field value will be ignored from printing in Transport Label and Waybill Document.
     *
     * @return self
     */
    public function setCustomDescription($custom_description)
    {
        if (is_null($custom_description)) {
            throw new \InvalidArgumentException('non-nullable custom_description cannot be null');
        }
        if ((mb_strlen($custom_description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $custom_description when calling SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner., must be smaller than or equal to 200.');
        }

        $this->container['custom_description'] = $custom_description;

        return $this;
    }

    /**
     * Gets un_codes
     *
     * @return string[]|null
     */
    public function getUnCodes()
    {
        return $this->container['un_codes'];
    }

    /**
     * Sets un_codes
     *
     * @param string[]|null $un_codes Please enter UN code(s)
     *
     * @return self
     */
    public function setUnCodes($un_codes)
    {
        if (is_null($un_codes)) {
            throw new \InvalidArgumentException('non-nullable un_codes cannot be null');
        }

        if ((count($un_codes) > 10)) {
            throw new \InvalidArgumentException('invalid value for $un_codes when calling SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner., number of items must be less than or equal to 10.');
        }
        if ((count($un_codes) < 1)) {
            throw new \InvalidArgumentException('invalid length for $un_codes when calling SupermodelIoLogisticsExpressValueAddedServicesDangerousGoodsInner., number of items must be greater than or equal to 1.');
        }
        $this->container['un_codes'] = $un_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



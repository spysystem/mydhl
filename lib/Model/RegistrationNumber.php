<?php
/**
 * RegistrationNumber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * RegistrationNumber Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RegistrationNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return RegistrationNumberModelFields
      */
    public static function GetModelFields(): RegistrationNumberModelFields
    {
        return new RegistrationNumberModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return RegistrationNumberModelAttributes
      */
    public static function GetModelAttributes(): RegistrationNumberModelAttributes
    {
        return new RegistrationNumberModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RegistrationNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'number_type_code' => 'string',
        'number_issuer_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'number_type_code' => null,
        'number_issuer_country_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'number_type_code' => false,
		'number_issuer_country_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'Number',
        'number_type_code' => 'NumberTypeCode',
        'number_issuer_country_code' => 'NumberIssuerCountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'number_type_code' => 'setNumberTypeCode',
        'number_issuer_country_code' => 'setNumberIssuerCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'number_type_code' => 'getNumberTypeCode',
        'number_issuer_country_code' => 'getNumberIssuerCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NUMBER_TYPE_CODE_VAT = 'VAT';
    public const NUMBER_TYPE_CODE_EIN = 'EIN';
    public const NUMBER_TYPE_CODE_GST = 'GST';
    public const NUMBER_TYPE_CODE_SSN = 'SSN';
    public const NUMBER_TYPE_CODE_EOR = 'EOR';
    public const NUMBER_TYPE_CODE_DUN = 'DUN';
    public const NUMBER_TYPE_CODE_FED = 'FED';
    public const NUMBER_TYPE_CODE_STA = 'STA';
    public const NUMBER_TYPE_CODE_CNP = 'CNP';
    public const NUMBER_TYPE_CODE_IE = 'IE';
    public const NUMBER_TYPE_CODE_INN = 'INN';
    public const NUMBER_TYPE_CODE_KPP = 'KPP';
    public const NUMBER_TYPE_CODE_OGR = 'OGR';
    public const NUMBER_TYPE_CODE_OKP = 'OKP';
    public const NUMBER_TYPE_CODE_MRN = 'MRN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberTypeCodeAllowableValues()
    {
        return [
            self::NUMBER_TYPE_CODE_VAT,
            self::NUMBER_TYPE_CODE_EIN,
            self::NUMBER_TYPE_CODE_GST,
            self::NUMBER_TYPE_CODE_SSN,
            self::NUMBER_TYPE_CODE_EOR,
            self::NUMBER_TYPE_CODE_DUN,
            self::NUMBER_TYPE_CODE_FED,
            self::NUMBER_TYPE_CODE_STA,
            self::NUMBER_TYPE_CODE_CNP,
            self::NUMBER_TYPE_CODE_IE,
            self::NUMBER_TYPE_CODE_INN,
            self::NUMBER_TYPE_CODE_KPP,
            self::NUMBER_TYPE_CODE_OGR,
            self::NUMBER_TYPE_CODE_OKP,
            self::NUMBER_TYPE_CODE_MRN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('number_type_code', $data ?? [], null);
        $this->setIfExists('number_issuer_country_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['number_type_code'] === null) {
            $invalidProperties[] = "'number_type_code' can't be null";
        }
        $allowedValues = $this->getNumberTypeCodeAllowableValues();
        if (!is_null($this->container['number_type_code']) && !in_array($this->container['number_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'number_type_code', must be one of '%s'",
                $this->container['number_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number_issuer_country_code'] === null) {
            $invalidProperties[] = "'number_issuer_country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return self
     */
    public function setNumber($number)
    {

        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets number_type_code
     *
     * @return string
     */
    public function getNumberTypeCode()
    {
        return $this->container['number_type_code'];
    }

    /**
     * Sets number_type_code
     *
     * @param string $number_type_code number_type_code
     *
     * @return self
     */
    public function setNumberTypeCode($number_type_code)
    {
        $allowedValues = $this->getNumberTypeCodeAllowableValues();
        if (!in_array($number_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'number_type_code', must be one of '%s'",
                    $number_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($number_type_code)) {
            throw new \InvalidArgumentException('non-nullable number_type_code cannot be null');
        }

        $this->container['number_type_code'] = $number_type_code;

        return $this;
    }

    /**
     * Gets number_issuer_country_code
     *
     * @return string
     */
    public function getNumberIssuerCountryCode()
    {
        return $this->container['number_issuer_country_code'];
    }

    /**
     * Sets number_issuer_country_code
     *
     * @param string $number_issuer_country_code number_issuer_country_code
     *
     * @return self
     */
    public function setNumberIssuerCountryCode($number_issuer_country_code)
    {

        if (is_null($number_issuer_country_code)) {
            throw new \InvalidArgumentException('non-nullable number_issuer_country_code cannot be null');
        }

        $this->container['number_issuer_country_code'] = $number_issuer_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



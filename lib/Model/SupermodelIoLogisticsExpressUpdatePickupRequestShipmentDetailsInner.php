<?php
/**
 * SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelFields
    {
        return new SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressUpdatePickupRequest_shipmentDetails_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_code' => 'string',
        'local_product_code' => 'string',
        'accounts' => '\MyDHL\Model\SupermodelIoLogisticsExpressAccount[]',
        'value_added_services' => '\MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]',
        'is_customs_declarable' => 'bool',
        'declared_value' => 'float',
        'declared_value_currency' => 'string',
        'unit_of_measurement' => 'string',
        'shipment_tracking_number' => 'string',
        'packages' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_code' => null,
        'local_product_code' => null,
        'accounts' => null,
        'value_added_services' => null,
        'is_customs_declarable' => null,
        'declared_value' => null,
        'declared_value_currency' => null,
        'unit_of_measurement' => null,
        'shipment_tracking_number' => null,
        'packages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_code' => false,
		'local_product_code' => false,
		'accounts' => false,
		'value_added_services' => false,
		'is_customs_declarable' => false,
		'declared_value' => false,
		'declared_value_currency' => false,
		'unit_of_measurement' => false,
		'shipment_tracking_number' => false,
		'packages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_code' => 'productCode',
        'local_product_code' => 'localProductCode',
        'accounts' => 'accounts',
        'value_added_services' => 'valueAddedServices',
        'is_customs_declarable' => 'isCustomsDeclarable',
        'declared_value' => 'declaredValue',
        'declared_value_currency' => 'declaredValueCurrency',
        'unit_of_measurement' => 'unitOfMeasurement',
        'shipment_tracking_number' => 'shipmentTrackingNumber',
        'packages' => 'packages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_code' => 'setProductCode',
        'local_product_code' => 'setLocalProductCode',
        'accounts' => 'setAccounts',
        'value_added_services' => 'setValueAddedServices',
        'is_customs_declarable' => 'setIsCustomsDeclarable',
        'declared_value' => 'setDeclaredValue',
        'declared_value_currency' => 'setDeclaredValueCurrency',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'shipment_tracking_number' => 'setShipmentTrackingNumber',
        'packages' => 'setPackages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_code' => 'getProductCode',
        'local_product_code' => 'getLocalProductCode',
        'accounts' => 'getAccounts',
        'value_added_services' => 'getValueAddedServices',
        'is_customs_declarable' => 'getIsCustomsDeclarable',
        'declared_value' => 'getDeclaredValue',
        'declared_value_currency' => 'getDeclaredValueCurrency',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'shipment_tracking_number' => 'getShipmentTrackingNumber',
        'packages' => 'getPackages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASUREMENT_METRIC = 'metric';
    public const UNIT_OF_MEASUREMENT_IMPERIAL = 'imperial';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_METRIC,
            self::UNIT_OF_MEASUREMENT_IMPERIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('local_product_code', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('value_added_services', $data ?? [], null);
        $this->setIfExists('is_customs_declarable', $data ?? [], null);
        $this->setIfExists('declared_value', $data ?? [], null);
        $this->setIfExists('declared_value_currency', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('shipment_tracking_number', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ((mb_strlen($this->container['product_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['accounts']) && (count($this->container['accounts']) > 5)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['value_added_services']) && (count($this->container['value_added_services']) > 99)) {
            $invalidProperties[] = "invalid value for 'value_added_services', number of items must be less than or equal to 99.";
        }

        if ($this->container['is_customs_declarable'] === null) {
            $invalidProperties[] = "'is_customs_declarable' can't be null";
        }
        if (!is_null($this->container['declared_value']) && ($this->container['declared_value'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'declared_value', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['declared_value']) && ($this->container['declared_value'] < 0)) {
            $invalidProperties[] = "invalid value for 'declared_value', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['declared_value_currency']) && (mb_strlen($this->container['declared_value_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'declared_value_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['declared_value_currency']) && (mb_strlen($this->container['declared_value_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'declared_value_currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        if ((count($this->container['packages']) > 999)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['packages']) < 1)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code Please provide DHL Express Global product code of the shipment
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be bigger than or equal to 1.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets local_product_code
     *
     * @return string|null
     */
    public function getLocalProductCode()
    {
        return $this->container['local_product_code'];
    }

    /**
     * Sets local_product_code
     *
     * @param string|null $local_product_code Please provide DHL Express Local product code of the shipment
     *
     * @return self
     */
    public function setLocalProductCode($local_product_code)
    {
        if (is_null($local_product_code)) {
            throw new \InvalidArgumentException('non-nullable local_product_code cannot be null');
        }
        if ((mb_strlen($local_product_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($local_product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be bigger than or equal to 1.');
        }

        $this->container['local_product_code'] = $local_product_code;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }

        if ((count($accounts) > 5)) {
            throw new \InvalidArgumentException('invalid value for $accounts when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., number of items must be less than or equal to 5.');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets value_added_services
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]|null
     */
    public function getValueAddedServices()
    {
        return $this->container['value_added_services'];
    }

    /**
     * Sets value_added_services
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]|null $value_added_services value_added_services
     *
     * @return self
     */
    public function setValueAddedServices($value_added_services)
    {
        if (is_null($value_added_services)) {
            throw new \InvalidArgumentException('non-nullable value_added_services cannot be null');
        }

        if ((count($value_added_services) > 99)) {
            throw new \InvalidArgumentException('invalid value for $value_added_services when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., number of items must be less than or equal to 99.');
        }
        $this->container['value_added_services'] = $value_added_services;

        return $this;
    }

    /**
     * Gets is_customs_declarable
     *
     * @return bool
     */
    public function getIsCustomsDeclarable()
    {
        return $this->container['is_customs_declarable'];
    }

    /**
     * Sets is_customs_declarable
     *
     * @param bool $is_customs_declarable For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)
     *
     * @return self
     */
    public function setIsCustomsDeclarable($is_customs_declarable)
    {
        if (is_null($is_customs_declarable)) {
            throw new \InvalidArgumentException('non-nullable is_customs_declarable cannot be null');
        }
        $this->container['is_customs_declarable'] = $is_customs_declarable;

        return $this;
    }

    /**
     * Gets declared_value
     *
     * @return float|null
     */
    public function getDeclaredValue()
    {
        return $this->container['declared_value'];
    }

    /**
     * Sets declared_value
     *
     * @param float|null $declared_value For customs purposes please advise on declared value of the shipment
     *
     * @return self
     */
    public function setDeclaredValue($declared_value)
    {
        if (is_null($declared_value)) {
            throw new \InvalidArgumentException('non-nullable declared_value cannot be null');
        }

        if (($declared_value > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $declared_value when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be smaller than or equal to 999999999999999.');
        }
        if (($declared_value < 0)) {
            throw new \InvalidArgumentException('invalid value for $declared_value when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be bigger than or equal to 0.');
        }

        $this->container['declared_value'] = $declared_value;

        return $this;
    }

    /**
     * Gets declared_value_currency
     *
     * @return string|null
     */
    public function getDeclaredValueCurrency()
    {
        return $this->container['declared_value_currency'];
    }

    /**
     * Sets declared_value_currency
     *
     * @param string|null $declared_value_currency For customs purposes please advise on declared value currency code of the shipment
     *
     * @return self
     */
    public function setDeclaredValueCurrency($declared_value_currency)
    {
        if (is_null($declared_value_currency)) {
            throw new \InvalidArgumentException('non-nullable declared_value_currency cannot be null');
        }
        if ((mb_strlen($declared_value_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $declared_value_currency when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($declared_value_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $declared_value_currency when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., must be bigger than or equal to 3.');
        }

        $this->container['declared_value_currency'] = $declared_value_currency;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement Please enter Unit of measurement - metric,imperial
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets shipment_tracking_number
     *
     * @return string|null
     */
    public function getShipmentTrackingNumber()
    {
        return $this->container['shipment_tracking_number'];
    }

    /**
     * Sets shipment_tracking_number
     *
     * @param string|null $shipment_tracking_number Please provide Shipment Identification number (AWB number)
     *
     * @return self
     */
    public function setShipmentTrackingNumber($shipment_tracking_number)
    {
        if (is_null($shipment_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_tracking_number cannot be null');
        }
        $this->container['shipment_tracking_number'] = $shipment_tracking_number;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[] $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }

        if ((count($packages) > 999)) {
            throw new \InvalidArgumentException('invalid value for $packages when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., number of items must be less than or equal to 999.');
        }
        if ((count($packages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packages when calling SupermodelIoLogisticsExpressUpdatePickupRequestShipmentDetailsInner., number of items must be greater than or equal to 1.');
        }
        $this->container['packages'] = $packages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



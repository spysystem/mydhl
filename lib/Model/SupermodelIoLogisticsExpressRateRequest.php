<?php
/**
 * SupermodelIoLogisticsExpressRateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressRateRequest Class Doc Comment
 *
 * @category Class
 * @description Definition of /rates request message
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressRateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressRateRequestModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressRateRequestModelFields
    {
        return new SupermodelIoLogisticsExpressRateRequestModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressRateRequestModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressRateRequestModelAttributes
    {
        return new SupermodelIoLogisticsExpressRateRequestModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressRateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_details' => '\MyDHL\Model\SupermodelIoLogisticsExpressRateRequestCustomerDetails',
        'accounts' => '\MyDHL\Model\SupermodelIoLogisticsExpressAccount[]',
        'product_code' => 'string',
        'local_product_code' => 'string',
        'value_added_services' => '\MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]',
        'products_and_services' => '\MyDHL\Model\SupermodelIoLogisticsExpressRateRequestProductsAndServicesInner[]',
        'payer_country_code' => 'string',
        'planned_shipping_date_and_time' => 'string',
        'unit_of_measurement' => 'string',
        'is_customs_declarable' => 'bool',
        'monetary_amount' => '\MyDHL\Model\MonetaryAmountInner[]',
        'request_all_value_added_services' => 'bool',
        'estimated_delivery_date' => '\MyDHL\Model\EstimatedDeliveryDate1',
        'get_additional_information' => '\MyDHL\Model\SupermodelIoLogisticsExpressRateRequestGetAdditionalInformationInner[]',
        'return_standard_products_only' => 'bool',
        'next_business_day' => 'bool',
        'product_type_code' => 'string',
        'packages' => '\MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_details' => null,
        'accounts' => null,
        'product_code' => null,
        'local_product_code' => null,
        'value_added_services' => null,
        'products_and_services' => null,
        'payer_country_code' => null,
        'planned_shipping_date_and_time' => null,
        'unit_of_measurement' => null,
        'is_customs_declarable' => null,
        'monetary_amount' => null,
        'request_all_value_added_services' => null,
        'estimated_delivery_date' => null,
        'get_additional_information' => null,
        'return_standard_products_only' => null,
        'next_business_day' => null,
        'product_type_code' => null,
        'packages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_details' => false,
		'accounts' => false,
		'product_code' => false,
		'local_product_code' => false,
		'value_added_services' => false,
		'products_and_services' => false,
		'payer_country_code' => false,
		'planned_shipping_date_and_time' => false,
		'unit_of_measurement' => false,
		'is_customs_declarable' => false,
		'monetary_amount' => false,
		'request_all_value_added_services' => false,
		'estimated_delivery_date' => false,
		'get_additional_information' => false,
		'return_standard_products_only' => false,
		'next_business_day' => false,
		'product_type_code' => false,
		'packages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_details' => 'customerDetails',
        'accounts' => 'accounts',
        'product_code' => 'productCode',
        'local_product_code' => 'localProductCode',
        'value_added_services' => 'valueAddedServices',
        'products_and_services' => 'productsAndServices',
        'payer_country_code' => 'payerCountryCode',
        'planned_shipping_date_and_time' => 'plannedShippingDateAndTime',
        'unit_of_measurement' => 'unitOfMeasurement',
        'is_customs_declarable' => 'isCustomsDeclarable',
        'monetary_amount' => 'monetaryAmount',
        'request_all_value_added_services' => 'requestAllValueAddedServices',
        'estimated_delivery_date' => 'estimatedDeliveryDate',
        'get_additional_information' => 'getAdditionalInformation',
        'return_standard_products_only' => 'returnStandardProductsOnly',
        'next_business_day' => 'nextBusinessDay',
        'product_type_code' => 'productTypeCode',
        'packages' => 'packages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_details' => 'setCustomerDetails',
        'accounts' => 'setAccounts',
        'product_code' => 'setProductCode',
        'local_product_code' => 'setLocalProductCode',
        'value_added_services' => 'setValueAddedServices',
        'products_and_services' => 'setProductsAndServices',
        'payer_country_code' => 'setPayerCountryCode',
        'planned_shipping_date_and_time' => 'setPlannedShippingDateAndTime',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'is_customs_declarable' => 'setIsCustomsDeclarable',
        'monetary_amount' => 'setMonetaryAmount',
        'request_all_value_added_services' => 'setRequestAllValueAddedServices',
        'estimated_delivery_date' => 'setEstimatedDeliveryDate',
        'get_additional_information' => 'setGetAdditionalInformation',
        'return_standard_products_only' => 'setReturnStandardProductsOnly',
        'next_business_day' => 'setNextBusinessDay',
        'product_type_code' => 'setProductTypeCode',
        'packages' => 'setPackages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_details' => 'getCustomerDetails',
        'accounts' => 'getAccounts',
        'product_code' => 'getProductCode',
        'local_product_code' => 'getLocalProductCode',
        'value_added_services' => 'getValueAddedServices',
        'products_and_services' => 'getProductsAndServices',
        'payer_country_code' => 'getPayerCountryCode',
        'planned_shipping_date_and_time' => 'getPlannedShippingDateAndTime',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'is_customs_declarable' => 'getIsCustomsDeclarable',
        'monetary_amount' => 'getMonetaryAmount',
        'request_all_value_added_services' => 'getRequestAllValueAddedServices',
        'estimated_delivery_date' => 'getEstimatedDeliveryDate',
        'get_additional_information' => 'getGetAdditionalInformation',
        'return_standard_products_only' => 'getReturnStandardProductsOnly',
        'next_business_day' => 'getNextBusinessDay',
        'product_type_code' => 'getProductTypeCode',
        'packages' => 'getPackages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASUREMENT_METRIC = 'metric';
    public const UNIT_OF_MEASUREMENT_IMPERIAL = 'imperial';
    public const PRODUCT_TYPE_CODE_ALL = 'all';
    public const PRODUCT_TYPE_CODE_DAY_DEFINITE = 'dayDefinite';
    public const PRODUCT_TYPE_CODE_TIME_DEFINITE = 'timeDefinite';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_METRIC,
            self::UNIT_OF_MEASUREMENT_IMPERIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeCodeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_CODE_ALL,
            self::PRODUCT_TYPE_CODE_DAY_DEFINITE,
            self::PRODUCT_TYPE_CODE_TIME_DEFINITE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('local_product_code', $data ?? [], null);
        $this->setIfExists('value_added_services', $data ?? [], null);
        $this->setIfExists('products_and_services', $data ?? [], null);
        $this->setIfExists('payer_country_code', $data ?? [], null);
        $this->setIfExists('planned_shipping_date_and_time', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('is_customs_declarable', $data ?? [], null);
        $this->setIfExists('monetary_amount', $data ?? [], null);
        $this->setIfExists('request_all_value_added_services', $data ?? [], null);
        $this->setIfExists('estimated_delivery_date', $data ?? [], null);
        $this->setIfExists('get_additional_information', $data ?? [], null);
        $this->setIfExists('return_standard_products_only', $data ?? [], null);
        $this->setIfExists('next_business_day', $data ?? [], false);
        $this->setIfExists('product_type_code', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_details'] === null) {
            $invalidProperties[] = "'customer_details' can't be null";
        }
        if (!is_null($this->container['accounts']) && (count($this->container['accounts']) > 2)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['local_product_code']) && (mb_strlen($this->container['local_product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'local_product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['value_added_services']) && (count($this->container['value_added_services']) > 99)) {
            $invalidProperties[] = "invalid value for 'value_added_services', number of items must be less than or equal to 99.";
        }

        if (!is_null($this->container['payer_country_code']) && (mb_strlen($this->container['payer_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'payer_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payer_country_code']) && (mb_strlen($this->container['payer_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'payer_country_code', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['planned_shipping_date_and_time'] === null) {
            $invalidProperties[] = "'planned_shipping_date_and_time' can't be null";
        }
        if ((mb_strlen($this->container['planned_shipping_date_and_time']) > 29)) {
            $invalidProperties[] = "invalid value for 'planned_shipping_date_and_time', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['planned_shipping_date_and_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'planned_shipping_date_and_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_customs_declarable'] === null) {
            $invalidProperties[] = "'is_customs_declarable' can't be null";
        }
        if (!is_null($this->container['get_additional_information']) && (count($this->container['get_additional_information']) > 3)) {
            $invalidProperties[] = "invalid value for 'get_additional_information', number of items must be less than or equal to 3.";
        }

        $allowedValues = $this->getProductTypeCodeAllowableValues();
        if (!is_null($this->container['product_type_code']) && !in_array($this->container['product_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_type_code', must be one of '%s'",
                $this->container['product_type_code'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        if ((count($this->container['packages']) > 999)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['packages']) < 1)) {
            $invalidProperties[] = "invalid value for 'packages', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_details
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestCustomerDetails
     */
    public function getCustomerDetails()
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestCustomerDetails $customer_details customer_details
     *
     * @return self
     */
    public function setCustomerDetails($customer_details)
    {
        if (is_null($customer_details)) {
            throw new \InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]|null $accounts Please enter all the DHL Express accounts and types to be used for this shipment
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }

        if ((count($accounts) > 2)) {
            throw new \InvalidArgumentException('invalid value for $accounts when calling SupermodelIoLogisticsExpressRateRequest., number of items must be less than or equal to 2.');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code Please enter DHL Express Global Product code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressRateRequest., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressRateRequest., must be bigger than or equal to 1.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets local_product_code
     *
     * @return string|null
     */
    public function getLocalProductCode()
    {
        return $this->container['local_product_code'];
    }

    /**
     * Sets local_product_code
     *
     * @param string|null $local_product_code Please enter DHL Express Local Product code
     *
     * @return self
     */
    public function setLocalProductCode($local_product_code)
    {
        if (is_null($local_product_code)) {
            throw new \InvalidArgumentException('non-nullable local_product_code cannot be null');
        }
        if ((mb_strlen($local_product_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressRateRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($local_product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $local_product_code when calling SupermodelIoLogisticsExpressRateRequest., must be bigger than or equal to 1.');
        }

        $this->container['local_product_code'] = $local_product_code;

        return $this;
    }

    /**
     * Gets value_added_services
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]|null
     */
    public function getValueAddedServices()
    {
        return $this->container['value_added_services'];
    }

    /**
     * Sets value_added_services
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressValueAddedServicesRates[]|null $value_added_services Please use if you wish to filter the response by value added services
     *
     * @return self
     */
    public function setValueAddedServices($value_added_services)
    {
        if (is_null($value_added_services)) {
            throw new \InvalidArgumentException('non-nullable value_added_services cannot be null');
        }

        if ((count($value_added_services) > 99)) {
            throw new \InvalidArgumentException('invalid value for $value_added_services when calling SupermodelIoLogisticsExpressRateRequest., number of items must be less than or equal to 99.');
        }
        $this->container['value_added_services'] = $value_added_services;

        return $this;
    }

    /**
     * Gets products_and_services
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestProductsAndServicesInner[]|null
     */
    public function getProductsAndServices()
    {
        return $this->container['products_and_services'];
    }

    /**
     * Sets products_and_services
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestProductsAndServicesInner[]|null $products_and_services Please use if you wish to filter the response by product(s) and/or value added services
     *
     * @return self
     */
    public function setProductsAndServices($products_and_services)
    {
        if (is_null($products_and_services)) {
            throw new \InvalidArgumentException('non-nullable products_and_services cannot be null');
        }
        $this->container['products_and_services'] = $products_and_services;

        return $this;
    }

    /**
     * Gets payer_country_code
     *
     * @return string|null
     */
    public function getPayerCountryCode()
    {
        return $this->container['payer_country_code'];
    }

    /**
     * Sets payer_country_code
     *
     * @param string|null $payer_country_code payerCountryCode is to be provided if your profile has been enabled to view rates without an account number (this will provide DHL Express published rates for the payer country)
     *
     * @return self
     */
    public function setPayerCountryCode($payer_country_code)
    {
        if (is_null($payer_country_code)) {
            throw new \InvalidArgumentException('non-nullable payer_country_code cannot be null');
        }
        if ((mb_strlen($payer_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $payer_country_code when calling SupermodelIoLogisticsExpressRateRequest., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($payer_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $payer_country_code when calling SupermodelIoLogisticsExpressRateRequest., must be bigger than or equal to 2.');
        }

        $this->container['payer_country_code'] = $payer_country_code;

        return $this;
    }

    /**
     * Gets planned_shipping_date_and_time
     *
     * @return string
     */
    public function getPlannedShippingDateAndTime()
    {
        return $this->container['planned_shipping_date_and_time'];
    }

    /**
     * Sets planned_shipping_date_and_time
     *
     * @param string $planned_shipping_date_and_time Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).
     *
     * @return self
     */
    public function setPlannedShippingDateAndTime($planned_shipping_date_and_time)
    {
        if (is_null($planned_shipping_date_and_time)) {
            throw new \InvalidArgumentException('non-nullable planned_shipping_date_and_time cannot be null');
        }
        if ((mb_strlen($planned_shipping_date_and_time) > 29)) {
            throw new \InvalidArgumentException('invalid length for $planned_shipping_date_and_time when calling SupermodelIoLogisticsExpressRateRequest., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($planned_shipping_date_and_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $planned_shipping_date_and_time when calling SupermodelIoLogisticsExpressRateRequest., must be bigger than or equal to 1.');
        }

        $this->container['planned_shipping_date_and_time'] = $planned_shipping_date_and_time;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement Please enter Unit of measurement - metric,imperial
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets is_customs_declarable
     *
     * @return bool
     */
    public function getIsCustomsDeclarable()
    {
        return $this->container['is_customs_declarable'];
    }

    /**
     * Sets is_customs_declarable
     *
     * @param bool $is_customs_declarable For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)
     *
     * @return self
     */
    public function setIsCustomsDeclarable($is_customs_declarable)
    {
        if (is_null($is_customs_declarable)) {
            throw new \InvalidArgumentException('non-nullable is_customs_declarable cannot be null');
        }
        $this->container['is_customs_declarable'] = $is_customs_declarable;

        return $this;
    }

    /**
     * Gets monetary_amount
     *
     * @return \MyDHL\Model\MonetaryAmountInner[]|null
     */
    public function getMonetaryAmount()
    {
        return $this->container['monetary_amount'];
    }

    /**
     * Sets monetary_amount
     *
     * @param \MyDHL\Model\MonetaryAmountInner[]|null $monetary_amount Please provide monetary amount related to your shipment, for example shipment declared value
     *
     * @return self
     */
    public function setMonetaryAmount($monetary_amount)
    {
        if (is_null($monetary_amount)) {
            throw new \InvalidArgumentException('non-nullable monetary_amount cannot be null');
        }
        $this->container['monetary_amount'] = $monetary_amount;

        return $this;
    }

    /**
     * Gets request_all_value_added_services
     *
     * @return bool|null
     */
    public function getRequestAllValueAddedServices()
    {
        return $this->container['request_all_value_added_services'];
    }

    /**
     * Sets request_all_value_added_services
     *
     * @param bool|null $request_all_value_added_services Legacy field and replaced by newer field getAdditionalInformation. Please set this to true to receive all value added services for each product available
     *
     * @return self
     */
    public function setRequestAllValueAddedServices($request_all_value_added_services)
    {
        if (is_null($request_all_value_added_services)) {
            throw new \InvalidArgumentException('non-nullable request_all_value_added_services cannot be null');
        }
        $this->container['request_all_value_added_services'] = $request_all_value_added_services;

        return $this;
    }

    /**
     * Gets estimated_delivery_date
     *
     * @return \MyDHL\Model\EstimatedDeliveryDate1|null
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimated_delivery_date'];
    }

    /**
     * Sets estimated_delivery_date
     *
     * @param \MyDHL\Model\EstimatedDeliveryDate1|null $estimated_delivery_date estimated_delivery_date
     *
     * @return self
     */
    public function setEstimatedDeliveryDate($estimated_delivery_date)
    {
        if (is_null($estimated_delivery_date)) {
            throw new \InvalidArgumentException('non-nullable estimated_delivery_date cannot be null');
        }
        $this->container['estimated_delivery_date'] = $estimated_delivery_date;

        return $this;
    }

    /**
     * Gets get_additional_information
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestGetAdditionalInformationInner[]|null
     */
    public function getGetAdditionalInformation()
    {
        return $this->container['get_additional_information'];
    }

    /**
     * Sets get_additional_information
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressRateRequestGetAdditionalInformationInner[]|null $get_additional_information Provides additional information in the response like all value added services, and rule groups
     *
     * @return self
     */
    public function setGetAdditionalInformation($get_additional_information)
    {
        if (is_null($get_additional_information)) {
            throw new \InvalidArgumentException('non-nullable get_additional_information cannot be null');
        }

        if ((count($get_additional_information) > 3)) {
            throw new \InvalidArgumentException('invalid value for $get_additional_information when calling SupermodelIoLogisticsExpressRateRequest., number of items must be less than or equal to 3.');
        }
        $this->container['get_additional_information'] = $get_additional_information;

        return $this;
    }

    /**
     * Gets return_standard_products_only
     *
     * @return bool|null
     */
    public function getReturnStandardProductsOnly()
    {
        return $this->container['return_standard_products_only'];
    }

    /**
     * Sets return_standard_products_only
     *
     * @param bool|null $return_standard_products_only Please set this to true to filter out all products which needs DHL Express special customer agreement
     *
     * @return self
     */
    public function setReturnStandardProductsOnly($return_standard_products_only)
    {
        if (is_null($return_standard_products_only)) {
            throw new \InvalidArgumentException('non-nullable return_standard_products_only cannot be null');
        }
        $this->container['return_standard_products_only'] = $return_standard_products_only;

        return $this;
    }

    /**
     * Gets next_business_day
     *
     * @return bool|null
     */
    public function getNextBusinessDay()
    {
        return $this->container['next_business_day'];
    }

    /**
     * Sets next_business_day
     *
     * @param bool|null $next_business_day Please set this to true in case you want to receive products which are not available on planned shipping date but next available day
     *
     * @return self
     */
    public function setNextBusinessDay($next_business_day)
    {
        if (is_null($next_business_day)) {
            throw new \InvalidArgumentException('non-nullable next_business_day cannot be null');
        }
        $this->container['next_business_day'] = $next_business_day;

        return $this;
    }

    /**
     * Gets product_type_code
     *
     * @return string|null
     */
    public function getProductTypeCode()
    {
        return $this->container['product_type_code'];
    }

    /**
     * Sets product_type_code
     *
     * @param string|null $product_type_code Please select which type of priducts you are interested in
     *
     * @return self
     */
    public function setProductTypeCode($product_type_code)
    {
        if (is_null($product_type_code)) {
            throw new \InvalidArgumentException('non-nullable product_type_code cannot be null');
        }
        $allowedValues = $this->getProductTypeCodeAllowableValues();
        if (!in_array($product_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_type_code', must be one of '%s'",
                    $product_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type_code'] = $product_type_code;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressPackageRR[] $packages Here you can define properties per package
     *
     * @return self
     */
    public function setPackages($packages)
    {
        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }

        if ((count($packages) > 999)) {
            throw new \InvalidArgumentException('invalid value for $packages when calling SupermodelIoLogisticsExpressRateRequest., number of items must be less than or equal to 999.');
        }
        if ((count($packages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $packages when calling SupermodelIoLogisticsExpressRateRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['packages'] = $packages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



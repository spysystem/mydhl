<?php
/**
 * SupermodelIoLogisticsExpressImageUploadRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressImageUploadRequest Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressImageUploadRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressImageUploadRequestModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressImageUploadRequestModelFields
    {
        return new SupermodelIoLogisticsExpressImageUploadRequestModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressImageUploadRequestModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressImageUploadRequestModelAttributes
    {
        return new SupermodelIoLogisticsExpressImageUploadRequestModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressImageUploadRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipment_tracking_number' => 'string',
        'original_planned_shipping_date' => 'string',
        'accounts' => '\MyDHL\Model\SupermodelIoLogisticsExpressAccount[]',
        'product_code' => 'string',
        'document_images' => '\MyDHL\Model\SupermodelIoLogisticsExpressDocumentImagesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipment_tracking_number' => null,
        'original_planned_shipping_date' => null,
        'accounts' => null,
        'product_code' => null,
        'document_images' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipment_tracking_number' => false,
		'original_planned_shipping_date' => false,
		'accounts' => false,
		'product_code' => false,
		'document_images' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_tracking_number' => 'shipmentTrackingNumber',
        'original_planned_shipping_date' => 'originalPlannedShippingDate',
        'accounts' => 'accounts',
        'product_code' => 'productCode',
        'document_images' => 'documentImages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_tracking_number' => 'setShipmentTrackingNumber',
        'original_planned_shipping_date' => 'setOriginalPlannedShippingDate',
        'accounts' => 'setAccounts',
        'product_code' => 'setProductCode',
        'document_images' => 'setDocumentImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_tracking_number' => 'getShipmentTrackingNumber',
        'original_planned_shipping_date' => 'getOriginalPlannedShippingDate',
        'accounts' => 'getAccounts',
        'product_code' => 'getProductCode',
        'document_images' => 'getDocumentImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipment_tracking_number', $data ?? [], null);
        $this->setIfExists('original_planned_shipping_date', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('document_images', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipment_tracking_number'] === null) {
            $invalidProperties[] = "'shipment_tracking_number' can't be null";
        }
        if ($this->container['original_planned_shipping_date'] === null) {
            $invalidProperties[] = "'original_planned_shipping_date' can't be null";
        }
        if (!preg_match("/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/", $this->container['original_planned_shipping_date'])) {
            $invalidProperties[] = "invalid value for 'original_planned_shipping_date', must be conform to the pattern /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['accounts'] === null) {
            $invalidProperties[] = "'accounts' can't be null";
        }
        if ((count($this->container['accounts']) > 3)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['accounts']) < 1)) {
            $invalidProperties[] = "invalid value for 'accounts', number of items must be greater than or equal to 1.";
        }

        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ((mb_strlen($this->container['product_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['document_images'] === null) {
            $invalidProperties[] = "'document_images' can't be null";
        }
        if ((count($this->container['document_images']) > 999)) {
            $invalidProperties[] = "invalid value for 'document_images', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['document_images']) < 1)) {
            $invalidProperties[] = "invalid value for 'document_images', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_tracking_number
     *
     * @return string
     */
    public function getShipmentTrackingNumber()
    {
        return $this->container['shipment_tracking_number'];
    }

    /**
     * Sets shipment_tracking_number
     *
     * @param string $shipment_tracking_number Please provide Shipment Identification number (AWB number)
     *
     * @return self
     */
    public function setShipmentTrackingNumber($shipment_tracking_number)
    {
        if (is_null($shipment_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable shipment_tracking_number cannot be null');
        }
        $this->container['shipment_tracking_number'] = $shipment_tracking_number;

        return $this;
    }

    /**
     * Gets original_planned_shipping_date
     *
     * @return string
     */
    public function getOriginalPlannedShippingDate()
    {
        return $this->container['original_planned_shipping_date'];
    }

    /**
     * Sets original_planned_shipping_date
     *
     * @param string $original_planned_shipping_date original_planned_shipping_date
     *
     * @return self
     */
    public function setOriginalPlannedShippingDate($original_planned_shipping_date)
    {
        if (is_null($original_planned_shipping_date)) {
            throw new \InvalidArgumentException('non-nullable original_planned_shipping_date cannot be null');
        }

        if ((!preg_match("/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/", $original_planned_shipping_date))) {
            throw new \InvalidArgumentException("invalid value for \$original_planned_shipping_date when calling SupermodelIoLogisticsExpressImageUploadRequest., must conform to the pattern /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['original_planned_shipping_date'] = $original_planned_shipping_date;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressAccount[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressAccount[] $accounts Please enter all the DHL Express accounts and types to be used for this shipment
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }

        if ((count($accounts) > 3)) {
            throw new \InvalidArgumentException('invalid value for $accounts when calling SupermodelIoLogisticsExpressImageUploadRequest., number of items must be less than or equal to 3.');
        }
        if ((count($accounts) < 1)) {
            throw new \InvalidArgumentException('invalid length for $accounts when calling SupermodelIoLogisticsExpressImageUploadRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code Please enter DHL Express Global Product code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressImageUploadRequest., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling SupermodelIoLogisticsExpressImageUploadRequest., must be bigger than or equal to 1.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets document_images
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressDocumentImagesInner[]
     */
    public function getDocumentImages()
    {
        return $this->container['document_images'];
    }

    /**
     * Sets document_images
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressDocumentImagesInner[] $document_images This section is to support multiple base64 encoded string with the image of export documentation for Paperless Trade images. When an invalid base64 encoded string is provided, an error message will be returned
     *
     * @return self
     */
    public function setDocumentImages($document_images)
    {
        if (is_null($document_images)) {
            throw new \InvalidArgumentException('non-nullable document_images cannot be null');
        }

        if ((count($document_images) > 999)) {
            throw new \InvalidArgumentException('invalid value for $document_images when calling SupermodelIoLogisticsExpressImageUploadRequest., number of items must be less than or equal to 999.');
        }
        if ((count($document_images) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_images when calling SupermodelIoLogisticsExpressImageUploadRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['document_images'] = $document_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



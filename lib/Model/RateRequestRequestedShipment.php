<?php
/**
 * RateRequestRequestedShipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * RateRequestRequestedShipment Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RateRequestRequestedShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return RateRequestRequestedShipmentModelFields
      */
    public static function GetModelFields(): RateRequestRequestedShipmentModelFields
    {
        return new RateRequestRequestedShipmentModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return RateRequestRequestedShipmentModelAttributes
      */
    public static function GetModelAttributes(): RateRequestRequestedShipmentModelAttributes
    {
        return new RateRequestRequestedShipmentModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateRequestRequestedShipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'get_rate_estimates' => 'string',
        'get_detailed_rate_breakdown' => 'string',
        'include_additional_currencies' => 'string',
        'drop_off_type' => 'string',
        'next_business_day' => 'string',
        'ship_timestamp' => 'string',
        'pickup_location_close_time' => 'string',
        'unit_of_measurement' => 'string',
        'content' => 'string',
        'declared_value' => 'float',
        'declared_value_currecy_code' => 'string',
        'payment_info' => 'string',
        'account' => 'string',
        'payer_country_code' => 'string',
        'request_value_added_service' => 'string',
        'service_type' => 'string',
        'network_type_code' => 'string',
        'customer_aggrement_ind' => 'string',
        'validate_ready_time' => 'string',
        'ship' => '\MyDHL\Model\RateRequestShip',
        'packages' => '\MyDHL\Model\RateRequestPackages',
        'billing' => '\MyDHL\Model\Billing',
        'special_services' => '\MyDHL\Model\SpecialServices'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'get_rate_estimates' => null,
        'get_detailed_rate_breakdown' => null,
        'include_additional_currencies' => null,
        'drop_off_type' => null,
        'next_business_day' => null,
        'ship_timestamp' => null,
        'pickup_location_close_time' => null,
        'unit_of_measurement' => null,
        'content' => null,
        'declared_value' => null,
        'declared_value_currecy_code' => null,
        'payment_info' => null,
        'account' => null,
        'payer_country_code' => null,
        'request_value_added_service' => null,
        'service_type' => null,
        'network_type_code' => null,
        'customer_aggrement_ind' => null,
        'validate_ready_time' => null,
        'ship' => null,
        'packages' => null,
        'billing' => null,
        'special_services' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'get_rate_estimates' => false,
		'get_detailed_rate_breakdown' => false,
		'include_additional_currencies' => false,
		'drop_off_type' => false,
		'next_business_day' => false,
		'ship_timestamp' => false,
		'pickup_location_close_time' => false,
		'unit_of_measurement' => false,
		'content' => false,
		'declared_value' => false,
		'declared_value_currecy_code' => false,
		'payment_info' => false,
		'account' => false,
		'payer_country_code' => false,
		'request_value_added_service' => false,
		'service_type' => false,
		'network_type_code' => false,
		'customer_aggrement_ind' => false,
		'validate_ready_time' => false,
		'ship' => false,
		'packages' => false,
		'billing' => false,
		'special_services' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'get_rate_estimates' => 'GetRateEstimates',
        'get_detailed_rate_breakdown' => 'GetDetailedRateBreakdown',
        'include_additional_currencies' => 'IncludeAdditionalCurrencies',
        'drop_off_type' => 'DropOffType',
        'next_business_day' => 'NextBusinessDay',
        'ship_timestamp' => 'ShipTimestamp',
        'pickup_location_close_time' => 'PickupLocationCloseTime',
        'unit_of_measurement' => 'UnitOfMeasurement',
        'content' => 'Content',
        'declared_value' => 'DeclaredValue',
        'declared_value_currecy_code' => 'DeclaredValueCurrecyCode',
        'payment_info' => 'PaymentInfo',
        'account' => 'Account',
        'payer_country_code' => 'PayerCountryCode',
        'request_value_added_service' => 'RequestValueAddedService',
        'service_type' => 'ServiceType',
        'network_type_code' => 'NetworkTypeCode',
        'customer_aggrement_ind' => 'CustomerAggrementInd',
        'validate_ready_time' => 'ValidateReadyTime',
        'ship' => 'Ship',
        'packages' => 'Packages',
        'billing' => 'Billing',
        'special_services' => 'SpecialServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'get_rate_estimates' => 'setGetRateEstimates',
        'get_detailed_rate_breakdown' => 'setGetDetailedRateBreakdown',
        'include_additional_currencies' => 'setIncludeAdditionalCurrencies',
        'drop_off_type' => 'setDropOffType',
        'next_business_day' => 'setNextBusinessDay',
        'ship_timestamp' => 'setShipTimestamp',
        'pickup_location_close_time' => 'setPickupLocationCloseTime',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'content' => 'setContent',
        'declared_value' => 'setDeclaredValue',
        'declared_value_currecy_code' => 'setDeclaredValueCurrecyCode',
        'payment_info' => 'setPaymentInfo',
        'account' => 'setAccount',
        'payer_country_code' => 'setPayerCountryCode',
        'request_value_added_service' => 'setRequestValueAddedService',
        'service_type' => 'setServiceType',
        'network_type_code' => 'setNetworkTypeCode',
        'customer_aggrement_ind' => 'setCustomerAggrementInd',
        'validate_ready_time' => 'setValidateReadyTime',
        'ship' => 'setShip',
        'packages' => 'setPackages',
        'billing' => 'setBilling',
        'special_services' => 'setSpecialServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'get_rate_estimates' => 'getGetRateEstimates',
        'get_detailed_rate_breakdown' => 'getGetDetailedRateBreakdown',
        'include_additional_currencies' => 'getIncludeAdditionalCurrencies',
        'drop_off_type' => 'getDropOffType',
        'next_business_day' => 'getNextBusinessDay',
        'ship_timestamp' => 'getShipTimestamp',
        'pickup_location_close_time' => 'getPickupLocationCloseTime',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'content' => 'getContent',
        'declared_value' => 'getDeclaredValue',
        'declared_value_currecy_code' => 'getDeclaredValueCurrecyCode',
        'payment_info' => 'getPaymentInfo',
        'account' => 'getAccount',
        'payer_country_code' => 'getPayerCountryCode',
        'request_value_added_service' => 'getRequestValueAddedService',
        'service_type' => 'getServiceType',
        'network_type_code' => 'getNetworkTypeCode',
        'customer_aggrement_ind' => 'getCustomerAggrementInd',
        'validate_ready_time' => 'getValidateReadyTime',
        'ship' => 'getShip',
        'packages' => 'getPackages',
        'billing' => 'getBilling',
        'special_services' => 'getSpecialServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GET_RATE_ESTIMATES_Y = 'Y';
    public const GET_RATE_ESTIMATES_N = 'N';
    public const GET_DETAILED_RATE_BREAKDOWN_Y = 'Y';
    public const GET_DETAILED_RATE_BREAKDOWN_N = 'N';
    public const INCLUDE_ADDITIONAL_CURRENCIES_Y = 'Y';
    public const INCLUDE_ADDITIONAL_CURRENCIES_N = 'N';
    public const DROP_OFF_TYPE_REGULAR_PICKUP = 'REGULAR_PICKUP';
    public const DROP_OFF_TYPE_REQUEST_COURIER = 'REQUEST_COURIER';
    public const NEXT_BUSINESS_DAY_Y = 'Y';
    public const NEXT_BUSINESS_DAY_N = 'N';
    public const UNIT_OF_MEASUREMENT_SI = 'SI';
    public const UNIT_OF_MEASUREMENT_SU = 'SU';
    public const CONTENT_DOCUMENTS = 'DOCUMENTS';
    public const CONTENT_NON_DOCUMENTS = 'NON_DOCUMENTS';
    public const REQUEST_VALUE_ADDED_SERVICE_Y = 'Y';
    public const REQUEST_VALUE_ADDED_SERVICE_N = 'N';
    public const NETWORK_TYPE_CODE_AL = 'AL';
    public const NETWORK_TYPE_CODE_DD = 'DD';
    public const NETWORK_TYPE_CODE_TD = 'TD';
    public const CUSTOMER_AGGREMENT_IND_Y = 'Y';
    public const CUSTOMER_AGGREMENT_IND_N = 'N';
    public const VALIDATE_READY_TIME_Y = 'Y';
    public const VALIDATE_READY_TIME_N = 'N';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGetRateEstimatesAllowableValues()
    {
        return [
            self::GET_RATE_ESTIMATES_Y,
            self::GET_RATE_ESTIMATES_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGetDetailedRateBreakdownAllowableValues()
    {
        return [
            self::GET_DETAILED_RATE_BREAKDOWN_Y,
            self::GET_DETAILED_RATE_BREAKDOWN_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncludeAdditionalCurrenciesAllowableValues()
    {
        return [
            self::INCLUDE_ADDITIONAL_CURRENCIES_Y,
            self::INCLUDE_ADDITIONAL_CURRENCIES_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDropOffTypeAllowableValues()
    {
        return [
            self::DROP_OFF_TYPE_REGULAR_PICKUP,
            self::DROP_OFF_TYPE_REQUEST_COURIER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNextBusinessDayAllowableValues()
    {
        return [
            self::NEXT_BUSINESS_DAY_Y,
            self::NEXT_BUSINESS_DAY_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_SI,
            self::UNIT_OF_MEASUREMENT_SU,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentAllowableValues()
    {
        return [
            self::CONTENT_DOCUMENTS,
            self::CONTENT_NON_DOCUMENTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestValueAddedServiceAllowableValues()
    {
        return [
            self::REQUEST_VALUE_ADDED_SERVICE_Y,
            self::REQUEST_VALUE_ADDED_SERVICE_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeCodeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_CODE_AL,
            self::NETWORK_TYPE_CODE_DD,
            self::NETWORK_TYPE_CODE_TD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerAggrementIndAllowableValues()
    {
        return [
            self::CUSTOMER_AGGREMENT_IND_Y,
            self::CUSTOMER_AGGREMENT_IND_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidateReadyTimeAllowableValues()
    {
        return [
            self::VALIDATE_READY_TIME_Y,
            self::VALIDATE_READY_TIME_N,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('get_rate_estimates', $data ?? [], null);
        $this->setIfExists('get_detailed_rate_breakdown', $data ?? [], null);
        $this->setIfExists('include_additional_currencies', $data ?? [], null);
        $this->setIfExists('drop_off_type', $data ?? [], null);
        $this->setIfExists('next_business_day', $data ?? [], null);
        $this->setIfExists('ship_timestamp', $data ?? [], null);
        $this->setIfExists('pickup_location_close_time', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('declared_value', $data ?? [], null);
        $this->setIfExists('declared_value_currecy_code', $data ?? [], null);
        $this->setIfExists('payment_info', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('payer_country_code', $data ?? [], null);
        $this->setIfExists('request_value_added_service', $data ?? [], null);
        $this->setIfExists('service_type', $data ?? [], null);
        $this->setIfExists('network_type_code', $data ?? [], null);
        $this->setIfExists('customer_aggrement_ind', $data ?? [], null);
        $this->setIfExists('validate_ready_time', $data ?? [], null);
        $this->setIfExists('ship', $data ?? [], null);
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('special_services', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGetRateEstimatesAllowableValues();
        if (!is_null($this->container['get_rate_estimates']) && !in_array($this->container['get_rate_estimates'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'get_rate_estimates', must be one of '%s'",
                $this->container['get_rate_estimates'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGetDetailedRateBreakdownAllowableValues();
        if (!is_null($this->container['get_detailed_rate_breakdown']) && !in_array($this->container['get_detailed_rate_breakdown'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'get_detailed_rate_breakdown', must be one of '%s'",
                $this->container['get_detailed_rate_breakdown'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncludeAdditionalCurrenciesAllowableValues();
        if (!is_null($this->container['include_additional_currencies']) && !in_array($this->container['include_additional_currencies'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'include_additional_currencies', must be one of '%s'",
                $this->container['include_additional_currencies'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['drop_off_type'] === null) {
            $invalidProperties[] = "'drop_off_type' can't be null";
        }
        $allowedValues = $this->getDropOffTypeAllowableValues();
        if (!is_null($this->container['drop_off_type']) && !in_array($this->container['drop_off_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'drop_off_type', must be one of '%s'",
                $this->container['drop_off_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNextBusinessDayAllowableValues();
        if (!is_null($this->container['next_business_day']) && !in_array($this->container['next_business_day'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'next_business_day', must be one of '%s'",
                $this->container['next_business_day'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ship_timestamp'] === null) {
            $invalidProperties[] = "'ship_timestamp' can't be null";
        }
        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContentAllowableValues();
        if (!is_null($this->container['content']) && !in_array($this->container['content'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content', must be one of '%s'",
                $this->container['content'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRequestValueAddedServiceAllowableValues();
        if (!is_null($this->container['request_value_added_service']) && !in_array($this->container['request_value_added_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_value_added_service', must be one of '%s'",
                $this->container['request_value_added_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkTypeCodeAllowableValues();
        if (!is_null($this->container['network_type_code']) && !in_array($this->container['network_type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_type_code', must be one of '%s'",
                $this->container['network_type_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerAggrementIndAllowableValues();
        if (!is_null($this->container['customer_aggrement_ind']) && !in_array($this->container['customer_aggrement_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customer_aggrement_ind', must be one of '%s'",
                $this->container['customer_aggrement_ind'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValidateReadyTimeAllowableValues();
        if (!is_null($this->container['validate_ready_time']) && !in_array($this->container['validate_ready_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'validate_ready_time', must be one of '%s'",
                $this->container['validate_ready_time'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ship'] === null) {
            $invalidProperties[] = "'ship' can't be null";
        }
        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets get_rate_estimates
     *
     * @return string|null
     */
    public function getGetRateEstimates()
    {
        return $this->container['get_rate_estimates'];
    }

    /**
     * Sets get_rate_estimates
     *
     * @param string|null $get_rate_estimates get_rate_estimates
     *
     * @return self
     */
    public function setGetRateEstimates($get_rate_estimates)
    {
        $allowedValues = $this->getGetRateEstimatesAllowableValues();
        if (!is_null($get_rate_estimates) && !in_array($get_rate_estimates, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'get_rate_estimates', must be one of '%s'",
                    $get_rate_estimates,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($get_rate_estimates)) {
            throw new \InvalidArgumentException('non-nullable get_rate_estimates cannot be null');
        }

        $this->container['get_rate_estimates'] = $get_rate_estimates;

        return $this;
    }

    /**
     * Gets get_detailed_rate_breakdown
     *
     * @return string|null
     */
    public function getGetDetailedRateBreakdown()
    {
        return $this->container['get_detailed_rate_breakdown'];
    }

    /**
     * Sets get_detailed_rate_breakdown
     *
     * @param string|null $get_detailed_rate_breakdown get_detailed_rate_breakdown
     *
     * @return self
     */
    public function setGetDetailedRateBreakdown($get_detailed_rate_breakdown)
    {
        $allowedValues = $this->getGetDetailedRateBreakdownAllowableValues();
        if (!is_null($get_detailed_rate_breakdown) && !in_array($get_detailed_rate_breakdown, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'get_detailed_rate_breakdown', must be one of '%s'",
                    $get_detailed_rate_breakdown,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($get_detailed_rate_breakdown)) {
            throw new \InvalidArgumentException('non-nullable get_detailed_rate_breakdown cannot be null');
        }

        $this->container['get_detailed_rate_breakdown'] = $get_detailed_rate_breakdown;

        return $this;
    }

    /**
     * Gets include_additional_currencies
     *
     * @return string|null
     */
    public function getIncludeAdditionalCurrencies()
    {
        return $this->container['include_additional_currencies'];
    }

    /**
     * Sets include_additional_currencies
     *
     * @param string|null $include_additional_currencies include_additional_currencies
     *
     * @return self
     */
    public function setIncludeAdditionalCurrencies($include_additional_currencies)
    {
        $allowedValues = $this->getIncludeAdditionalCurrenciesAllowableValues();
        if (!is_null($include_additional_currencies) && !in_array($include_additional_currencies, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'include_additional_currencies', must be one of '%s'",
                    $include_additional_currencies,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($include_additional_currencies)) {
            throw new \InvalidArgumentException('non-nullable include_additional_currencies cannot be null');
        }

        $this->container['include_additional_currencies'] = $include_additional_currencies;

        return $this;
    }

    /**
     * Gets drop_off_type
     *
     * @return string
     */
    public function getDropOffType()
    {
        return $this->container['drop_off_type'];
    }

    /**
     * Sets drop_off_type
     *
     * @param string $drop_off_type drop_off_type
     *
     * @return self
     */
    public function setDropOffType($drop_off_type)
    {
        $allowedValues = $this->getDropOffTypeAllowableValues();
        if (!in_array($drop_off_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'drop_off_type', must be one of '%s'",
                    $drop_off_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($drop_off_type)) {
            throw new \InvalidArgumentException('non-nullable drop_off_type cannot be null');
        }

        $this->container['drop_off_type'] = $drop_off_type;

        return $this;
    }

    /**
     * Gets next_business_day
     *
     * @return string|null
     */
    public function getNextBusinessDay()
    {
        return $this->container['next_business_day'];
    }

    /**
     * Sets next_business_day
     *
     * @param string|null $next_business_day next_business_day
     *
     * @return self
     */
    public function setNextBusinessDay($next_business_day)
    {
        $allowedValues = $this->getNextBusinessDayAllowableValues();
        if (!is_null($next_business_day) && !in_array($next_business_day, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'next_business_day', must be one of '%s'",
                    $next_business_day,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($next_business_day)) {
            throw new \InvalidArgumentException('non-nullable next_business_day cannot be null');
        }

        $this->container['next_business_day'] = $next_business_day;

        return $this;
    }

    /**
     * Gets ship_timestamp
     *
     * @return string
     */
    public function getShipTimestamp()
    {
        return $this->container['ship_timestamp'];
    }

    /**
     * Sets ship_timestamp
     *
     * @param string $ship_timestamp ship_timestamp
     *
     * @return self
     */
    public function setShipTimestamp($ship_timestamp)
    {

        if (is_null($ship_timestamp)) {
            throw new \InvalidArgumentException('non-nullable ship_timestamp cannot be null');
        }

        $this->container['ship_timestamp'] = $ship_timestamp;

        return $this;
    }

    /**
     * Gets pickup_location_close_time
     *
     * @return string|null
     */
    public function getPickupLocationCloseTime()
    {
        return $this->container['pickup_location_close_time'];
    }

    /**
     * Sets pickup_location_close_time
     *
     * @param string|null $pickup_location_close_time pickup_location_close_time
     *
     * @return self
     */
    public function setPickupLocationCloseTime($pickup_location_close_time)
    {

        if (is_null($pickup_location_close_time)) {
            throw new \InvalidArgumentException('non-nullable pickup_location_close_time cannot be null');
        }

        $this->container['pickup_location_close_time'] = $pickup_location_close_time;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement unit_of_measurement
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }

        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        $allowedValues = $this->getContentAllowableValues();
        if (!is_null($content) && !in_array($content, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content', must be one of '%s'",
                    $content,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }

        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets declared_value
     *
     * @return float|null
     */
    public function getDeclaredValue()
    {
        return $this->container['declared_value'];
    }

    /**
     * Sets declared_value
     *
     * @param float|null $declared_value declared_value
     *
     * @return self
     */
    public function setDeclaredValue($declared_value)
    {

        if (is_null($declared_value)) {
            throw new \InvalidArgumentException('non-nullable declared_value cannot be null');
        }

        $this->container['declared_value'] = $declared_value;

        return $this;
    }

    /**
     * Gets declared_value_currecy_code
     *
     * @return string|null
     */
    public function getDeclaredValueCurrecyCode()
    {
        return $this->container['declared_value_currecy_code'];
    }

    /**
     * Sets declared_value_currecy_code
     *
     * @param string|null $declared_value_currecy_code declared_value_currecy_code
     *
     * @return self
     */
    public function setDeclaredValueCurrecyCode($declared_value_currecy_code)
    {

        if (is_null($declared_value_currecy_code)) {
            throw new \InvalidArgumentException('non-nullable declared_value_currecy_code cannot be null');
        }

        $this->container['declared_value_currecy_code'] = $declared_value_currecy_code;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return string|null
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param string|null $payment_info payment_info
     *
     * @return self
     */
    public function setPaymentInfo($payment_info)
    {

        if (is_null($payment_info)) {
            throw new \InvalidArgumentException('non-nullable payment_info cannot be null');
        }

        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {

        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }

        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets payer_country_code
     *
     * @return string|null
     */
    public function getPayerCountryCode()
    {
        return $this->container['payer_country_code'];
    }

    /**
     * Sets payer_country_code
     *
     * @param string|null $payer_country_code payer_country_code
     *
     * @return self
     */
    public function setPayerCountryCode($payer_country_code)
    {

        if (is_null($payer_country_code)) {
            throw new \InvalidArgumentException('non-nullable payer_country_code cannot be null');
        }

        $this->container['payer_country_code'] = $payer_country_code;

        return $this;
    }

    /**
     * Gets request_value_added_service
     *
     * @return string|null
     */
    public function getRequestValueAddedService()
    {
        return $this->container['request_value_added_service'];
    }

    /**
     * Sets request_value_added_service
     *
     * @param string|null $request_value_added_service request_value_added_service
     *
     * @return self
     */
    public function setRequestValueAddedService($request_value_added_service)
    {
        $allowedValues = $this->getRequestValueAddedServiceAllowableValues();
        if (!is_null($request_value_added_service) && !in_array($request_value_added_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_value_added_service', must be one of '%s'",
                    $request_value_added_service,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($request_value_added_service)) {
            throw new \InvalidArgumentException('non-nullable request_value_added_service cannot be null');
        }

        $this->container['request_value_added_service'] = $request_value_added_service;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string|null
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string|null $service_type service_type
     *
     * @return self
     */
    public function setServiceType($service_type)
    {

        if (is_null($service_type)) {
            throw new \InvalidArgumentException('non-nullable service_type cannot be null');
        }

        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets network_type_code
     *
     * @return string|null
     */
    public function getNetworkTypeCode()
    {
        return $this->container['network_type_code'];
    }

    /**
     * Sets network_type_code
     *
     * @param string|null $network_type_code network_type_code
     *
     * @return self
     */
    public function setNetworkTypeCode($network_type_code)
    {
        $allowedValues = $this->getNetworkTypeCodeAllowableValues();
        if (!is_null($network_type_code) && !in_array($network_type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_type_code', must be one of '%s'",
                    $network_type_code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($network_type_code)) {
            throw new \InvalidArgumentException('non-nullable network_type_code cannot be null');
        }

        $this->container['network_type_code'] = $network_type_code;

        return $this;
    }

    /**
     * Gets customer_aggrement_ind
     *
     * @return string|null
     */
    public function getCustomerAggrementInd()
    {
        return $this->container['customer_aggrement_ind'];
    }

    /**
     * Sets customer_aggrement_ind
     *
     * @param string|null $customer_aggrement_ind customer_aggrement_ind
     *
     * @return self
     */
    public function setCustomerAggrementInd($customer_aggrement_ind)
    {
        $allowedValues = $this->getCustomerAggrementIndAllowableValues();
        if (!is_null($customer_aggrement_ind) && !in_array($customer_aggrement_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customer_aggrement_ind', must be one of '%s'",
                    $customer_aggrement_ind,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($customer_aggrement_ind)) {
            throw new \InvalidArgumentException('non-nullable customer_aggrement_ind cannot be null');
        }

        $this->container['customer_aggrement_ind'] = $customer_aggrement_ind;

        return $this;
    }

    /**
     * Gets validate_ready_time
     *
     * @return string|null
     */
    public function getValidateReadyTime()
    {
        return $this->container['validate_ready_time'];
    }

    /**
     * Sets validate_ready_time
     *
     * @param string|null $validate_ready_time validate_ready_time
     *
     * @return self
     */
    public function setValidateReadyTime($validate_ready_time)
    {
        $allowedValues = $this->getValidateReadyTimeAllowableValues();
        if (!is_null($validate_ready_time) && !in_array($validate_ready_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'validate_ready_time', must be one of '%s'",
                    $validate_ready_time,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($validate_ready_time)) {
            throw new \InvalidArgumentException('non-nullable validate_ready_time cannot be null');
        }

        $this->container['validate_ready_time'] = $validate_ready_time;

        return $this;
    }

    /**
     * Gets ship
     *
     * @return \MyDHL\Model\RateRequestShip
     */
    public function getShip()
    {
        return $this->container['ship'];
    }

    /**
     * Sets ship
     *
     * @param \MyDHL\Model\RateRequestShip $ship ship
     *
     * @return self
     */
    public function setShip($ship)
    {

        if (is_null($ship)) {
            throw new \InvalidArgumentException('non-nullable ship cannot be null');
        }

        $this->container['ship'] = $ship;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \MyDHL\Model\RateRequestPackages
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \MyDHL\Model\RateRequestPackages $packages packages
     *
     * @return self
     */
    public function setPackages($packages)
    {

        if (is_null($packages)) {
            throw new \InvalidArgumentException('non-nullable packages cannot be null');
        }

        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \MyDHL\Model\Billing|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \MyDHL\Model\Billing|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {

        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }

        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets special_services
     *
     * @return \MyDHL\Model\SpecialServices|null
     */
    public function getSpecialServices()
    {
        return $this->container['special_services'];
    }

    /**
     * Sets special_services
     *
     * @param \MyDHL\Model\SpecialServices|null $special_services special_services
     *
     * @return self
     */
    public function setSpecialServices($special_services)
    {

        if (is_null($special_services)) {
            throw new \InvalidArgumentException('non-nullable special_services cannot be null');
        }

        $this->container['special_services'] = $special_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



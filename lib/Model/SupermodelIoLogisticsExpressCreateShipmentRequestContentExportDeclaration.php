<?php
/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration Class Doc Comment
 *
 * @category Class
 * @description Here you can find all details related to export declaration
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelFields
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelAttributes
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressCreateShipmentRequest_content_exportDeclaration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'line_items' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner[]',
        'invoice' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice',
        'remarks' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner[]',
        'additional_charges' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner[]',
        'destination_port_name' => 'string',
        'place_of_incoterm' => 'string',
        'payer_vat_number' => 'string',
        'recipient_reference' => 'string',
        'exporter' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter',
        'package_marks' => 'string',
        'declaration_notes' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner[]',
        'export_reference' => 'string',
        'export_reason' => 'string',
        'export_reason_type' => 'string',
        'licenses' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner[]',
        'shipment_type' => 'string',
        'customs_documents' => '\MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'line_items' => null,
        'invoice' => null,
        'remarks' => null,
        'additional_charges' => null,
        'destination_port_name' => null,
        'place_of_incoterm' => null,
        'payer_vat_number' => null,
        'recipient_reference' => null,
        'exporter' => null,
        'package_marks' => null,
        'declaration_notes' => null,
        'export_reference' => null,
        'export_reason' => null,
        'export_reason_type' => null,
        'licenses' => null,
        'shipment_type' => null,
        'customs_documents' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'line_items' => false,
		'invoice' => false,
		'remarks' => false,
		'additional_charges' => false,
		'destination_port_name' => false,
		'place_of_incoterm' => false,
		'payer_vat_number' => false,
		'recipient_reference' => false,
		'exporter' => false,
		'package_marks' => false,
		'declaration_notes' => false,
		'export_reference' => false,
		'export_reason' => false,
		'export_reason_type' => false,
		'licenses' => false,
		'shipment_type' => false,
		'customs_documents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_items' => 'lineItems',
        'invoice' => 'invoice',
        'remarks' => 'remarks',
        'additional_charges' => 'additionalCharges',
        'destination_port_name' => 'destinationPortName',
        'place_of_incoterm' => 'placeOfIncoterm',
        'payer_vat_number' => 'payerVATNumber',
        'recipient_reference' => 'recipientReference',
        'exporter' => 'exporter',
        'package_marks' => 'packageMarks',
        'declaration_notes' => 'declarationNotes',
        'export_reference' => 'exportReference',
        'export_reason' => 'exportReason',
        'export_reason_type' => 'exportReasonType',
        'licenses' => 'licenses',
        'shipment_type' => 'shipmentType',
        'customs_documents' => 'customsDocuments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_items' => 'setLineItems',
        'invoice' => 'setInvoice',
        'remarks' => 'setRemarks',
        'additional_charges' => 'setAdditionalCharges',
        'destination_port_name' => 'setDestinationPortName',
        'place_of_incoterm' => 'setPlaceOfIncoterm',
        'payer_vat_number' => 'setPayerVatNumber',
        'recipient_reference' => 'setRecipientReference',
        'exporter' => 'setExporter',
        'package_marks' => 'setPackageMarks',
        'declaration_notes' => 'setDeclarationNotes',
        'export_reference' => 'setExportReference',
        'export_reason' => 'setExportReason',
        'export_reason_type' => 'setExportReasonType',
        'licenses' => 'setLicenses',
        'shipment_type' => 'setShipmentType',
        'customs_documents' => 'setCustomsDocuments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_items' => 'getLineItems',
        'invoice' => 'getInvoice',
        'remarks' => 'getRemarks',
        'additional_charges' => 'getAdditionalCharges',
        'destination_port_name' => 'getDestinationPortName',
        'place_of_incoterm' => 'getPlaceOfIncoterm',
        'payer_vat_number' => 'getPayerVatNumber',
        'recipient_reference' => 'getRecipientReference',
        'exporter' => 'getExporter',
        'package_marks' => 'getPackageMarks',
        'declaration_notes' => 'getDeclarationNotes',
        'export_reference' => 'getExportReference',
        'export_reason' => 'getExportReason',
        'export_reason_type' => 'getExportReasonType',
        'licenses' => 'getLicenses',
        'shipment_type' => 'getShipmentType',
        'customs_documents' => 'getCustomsDocuments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPORT_REASON_TYPE_PERMANENT = 'permanent';
    public const EXPORT_REASON_TYPE_TEMPORARY = 'temporary';
    public const EXPORT_REASON_TYPE__RETURN = 'return';
    public const EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN = 'used_exhibition_goods_to_origin';
    public const EXPORT_REASON_TYPE_INTERCOMPANY_USE = 'intercompany_use';
    public const EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE = 'commercial_purpose_or_sale';
    public const EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE = 'personal_belongings_or_personal_use';
    public const EXPORT_REASON_TYPE_SAMPLE = 'sample';
    public const EXPORT_REASON_TYPE_GIFT = 'gift';
    public const EXPORT_REASON_TYPE_RETURN_TO_ORIGIN = 'return_to_origin';
    public const EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT = 'warranty_replacement';
    public const EXPORT_REASON_TYPE_DIPLOMATIC_GOODS = 'diplomatic_goods';
    public const EXPORT_REASON_TYPE_DEFENCE_MATERIAL = 'defence_material';
    public const SHIPMENT_TYPE_PERSONAL = 'personal';
    public const SHIPMENT_TYPE_COMMERCIAL = 'commercial';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportReasonTypeAllowableValues()
    {
        return [
            self::EXPORT_REASON_TYPE_PERMANENT,
            self::EXPORT_REASON_TYPE_TEMPORARY,
            self::EXPORT_REASON_TYPE__RETURN,
            self::EXPORT_REASON_TYPE_USED_EXHIBITION_GOODS_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_INTERCOMPANY_USE,
            self::EXPORT_REASON_TYPE_COMMERCIAL_PURPOSE_OR_SALE,
            self::EXPORT_REASON_TYPE_PERSONAL_BELONGINGS_OR_PERSONAL_USE,
            self::EXPORT_REASON_TYPE_SAMPLE,
            self::EXPORT_REASON_TYPE_GIFT,
            self::EXPORT_REASON_TYPE_RETURN_TO_ORIGIN,
            self::EXPORT_REASON_TYPE_WARRANTY_REPLACEMENT,
            self::EXPORT_REASON_TYPE_DIPLOMATIC_GOODS,
            self::EXPORT_REASON_TYPE_DEFENCE_MATERIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_PERSONAL,
            self::SHIPMENT_TYPE_COMMERCIAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('additional_charges', $data ?? [], null);
        $this->setIfExists('destination_port_name', $data ?? [], null);
        $this->setIfExists('place_of_incoterm', $data ?? [], null);
        $this->setIfExists('payer_vat_number', $data ?? [], null);
        $this->setIfExists('recipient_reference', $data ?? [], null);
        $this->setIfExists('exporter', $data ?? [], null);
        $this->setIfExists('package_marks', $data ?? [], null);
        $this->setIfExists('declaration_notes', $data ?? [], null);
        $this->setIfExists('export_reference', $data ?? [], null);
        $this->setIfExists('export_reason', $data ?? [], null);
        $this->setIfExists('export_reason_type', $data ?? [], null);
        $this->setIfExists('licenses', $data ?? [], null);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('customs_documents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ((count($this->container['line_items']) > 999)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be less than or equal to 999.";
        }

        if ((count($this->container['line_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['remarks']) && (count($this->container['remarks']) > 3)) {
            $invalidProperties[] = "invalid value for 'remarks', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['additional_charges']) && (count($this->container['additional_charges']) > 5)) {
            $invalidProperties[] = "invalid value for 'additional_charges', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['place_of_incoterm']) && (mb_strlen($this->container['place_of_incoterm']) > 256)) {
            $invalidProperties[] = "invalid value for 'place_of_incoterm', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['place_of_incoterm']) && (mb_strlen($this->container['place_of_incoterm']) < 1)) {
            $invalidProperties[] = "invalid value for 'place_of_incoterm', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declaration_notes']) && (count($this->container['declaration_notes']) > 3)) {
            $invalidProperties[] = "invalid value for 'declaration_notes', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) > 40)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['export_reference']) && (mb_strlen($this->container['export_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'export_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['export_reason']) && (mb_strlen($this->container['export_reason']) > 30)) {
            $invalidProperties[] = "invalid value for 'export_reason', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['export_reason']) && (mb_strlen($this->container['export_reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'export_reason', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!is_null($this->container['export_reason_type']) && !in_array($this->container['export_reason_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'export_reason_type', must be one of '%s'",
                $this->container['export_reason_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['licenses']) && (count($this->container['licenses']) > 2)) {
            $invalidProperties[] = "invalid value for 'licenses', number of items must be less than or equal to 2.";
        }

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_type', must be one of '%s'",
                $this->container['shipment_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customs_documents']) && (count($this->container['customs_documents']) > 50)) {
            $invalidProperties[] = "invalid value for 'customs_documents', number of items must be less than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_items
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItemsInner[] $line_items Please enter details for each export line item
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }

        if ((count($line_items) > 999)) {
            throw new \InvalidArgumentException('invalid value for $line_items when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 999.');
        }
        if ((count($line_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line_items when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be greater than or equal to 1.');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationInvoice|null $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner[]|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationRemarksInner[]|null $remarks Please enter up to three remarks. <BR>              If using Customs Invoice template COMMERCIAL_INVOICE_04, the invoice can only print the first remarks field. The recommended max length is 20 characters. <BR>              If using Customs Invoice template COMMERCIAL_INVOICE_L_10 or COMMERCIAL_INVOICE_P_10, the invoice can print all three remraks fields.  The recommended max length is 45 characters.
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }

        if ((count($remarks) > 3)) {
            throw new \InvalidArgumentException('invalid value for $remarks when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 3.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets additional_charges
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner[]|null
     */
    public function getAdditionalCharges()
    {
        return $this->container['additional_charges'];
    }

    /**
     * Sets additional_charges
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationAdditionalChargesInner[]|null $additional_charges Please enter additional charge to appear on the invoice<BR>              admin, Administration Charge<BR>              delivery, Delivery Charge<BR>              documentation, Documentation Charge<BR>              expedite, Expedite Charge<BR>              export, Export Charge<BR>              freight, Freight Charge<BR>              fuel_surcharge, Fuel Surcharge<BR>              logistic, Logistic Charge<BR>              other, Other Charge<BR>              packaging, Packaging Charge<BR>              pickup, Pickup Charge<BR>              handling, Handling Charge<BR>              vat, VAT Charge<BR>              insurance, Insurance Cost<BR>              reverse_charge, Reverse Charge
     *
     * @return self
     */
    public function setAdditionalCharges($additional_charges)
    {
        if (is_null($additional_charges)) {
            throw new \InvalidArgumentException('non-nullable additional_charges cannot be null');
        }

        if ((count($additional_charges) > 5)) {
            throw new \InvalidArgumentException('invalid value for $additional_charges when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 5.');
        }
        $this->container['additional_charges'] = $additional_charges;

        return $this;
    }

    /**
     * Gets destination_port_name
     *
     * @return string|null
     */
    public function getDestinationPortName()
    {
        return $this->container['destination_port_name'];
    }

    /**
     * Sets destination_port_name
     *
     * @param string|null $destination_port_name Please provide destination port details
     *
     * @return self
     */
    public function setDestinationPortName($destination_port_name)
    {
        if (is_null($destination_port_name)) {
            throw new \InvalidArgumentException('non-nullable destination_port_name cannot be null');
        }
        $this->container['destination_port_name'] = $destination_port_name;

        return $this;
    }

    /**
     * Gets place_of_incoterm
     *
     * @return string|null
     */
    public function getPlaceOfIncoterm()
    {
        return $this->container['place_of_incoterm'];
    }

    /**
     * Sets place_of_incoterm
     *
     * @param string|null $place_of_incoterm Name of port of departure, shipment or destination as required under the applicable delivery term.
     *
     * @return self
     */
    public function setPlaceOfIncoterm($place_of_incoterm)
    {
        if (is_null($place_of_incoterm)) {
            throw new \InvalidArgumentException('non-nullable place_of_incoterm cannot be null');
        }
        if ((mb_strlen($place_of_incoterm) > 256)) {
            throw new \InvalidArgumentException('invalid length for $place_of_incoterm when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($place_of_incoterm) < 1)) {
            throw new \InvalidArgumentException('invalid length for $place_of_incoterm when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be bigger than or equal to 1.');
        }

        $this->container['place_of_incoterm'] = $place_of_incoterm;

        return $this;
    }

    /**
     * Gets payer_vat_number
     *
     * @return string|null
     */
    public function getPayerVatNumber()
    {
        return $this->container['payer_vat_number'];
    }

    /**
     * Sets payer_vat_number
     *
     * @param string|null $payer_vat_number Please provide Payer VAT number
     *
     * @return self
     */
    public function setPayerVatNumber($payer_vat_number)
    {
        if (is_null($payer_vat_number)) {
            throw new \InvalidArgumentException('non-nullable payer_vat_number cannot be null');
        }
        $this->container['payer_vat_number'] = $payer_vat_number;

        return $this;
    }

    /**
     * Gets recipient_reference
     *
     * @return string|null
     */
    public function getRecipientReference()
    {
        return $this->container['recipient_reference'];
    }

    /**
     * Sets recipient_reference
     *
     * @param string|null $recipient_reference Please enter recipient reference
     *
     * @return self
     */
    public function setRecipientReference($recipient_reference)
    {
        if (is_null($recipient_reference)) {
            throw new \InvalidArgumentException('non-nullable recipient_reference cannot be null');
        }
        $this->container['recipient_reference'] = $recipient_reference;

        return $this;
    }

    /**
     * Gets exporter
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter|null
     */
    public function getExporter()
    {
        return $this->container['exporter'];
    }

    /**
     * Sets exporter
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationExporter|null $exporter exporter
     *
     * @return self
     */
    public function setExporter($exporter)
    {
        if (is_null($exporter)) {
            throw new \InvalidArgumentException('non-nullable exporter cannot be null');
        }
        $this->container['exporter'] = $exporter;

        return $this;
    }

    /**
     * Gets package_marks
     *
     * @return string|null
     */
    public function getPackageMarks()
    {
        return $this->container['package_marks'];
    }

    /**
     * Sets package_marks
     *
     * @param string|null $package_marks Please enter package marks
     *
     * @return self
     */
    public function setPackageMarks($package_marks)
    {
        if (is_null($package_marks)) {
            throw new \InvalidArgumentException('non-nullable package_marks cannot be null');
        }
        $this->container['package_marks'] = $package_marks;

        return $this;
    }

    /**
     * Gets declaration_notes
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner[]|null
     */
    public function getDeclarationNotes()
    {
        return $this->container['declaration_notes'];
    }

    /**
     * Sets declaration_notes
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationDeclarationNotesInner[]|null $declaration_notes Please provide up to three dcelaration notes
     *
     * @return self
     */
    public function setDeclarationNotes($declaration_notes)
    {
        if (is_null($declaration_notes)) {
            throw new \InvalidArgumentException('non-nullable declaration_notes cannot be null');
        }

        if ((count($declaration_notes) > 3)) {
            throw new \InvalidArgumentException('invalid value for $declaration_notes when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 3.');
        }
        $this->container['declaration_notes'] = $declaration_notes;

        return $this;
    }

    /**
     * Gets export_reference
     *
     * @return string|null
     */
    public function getExportReference()
    {
        return $this->container['export_reference'];
    }

    /**
     * Sets export_reference
     *
     * @param string|null $export_reference Please enter export reference
     *
     * @return self
     */
    public function setExportReference($export_reference)
    {
        if (is_null($export_reference)) {
            throw new \InvalidArgumentException('non-nullable export_reference cannot be null');
        }
        if ((mb_strlen($export_reference) > 40)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($export_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $export_reference when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be bigger than or equal to 0.');
        }

        $this->container['export_reference'] = $export_reference;

        return $this;
    }

    /**
     * Gets export_reason
     *
     * @return string|null
     */
    public function getExportReason()
    {
        return $this->container['export_reason'];
    }

    /**
     * Sets export_reason
     *
     * @param string|null $export_reason Please enter export reason
     *
     * @return self
     */
    public function setExportReason($export_reason)
    {
        if (is_null($export_reason)) {
            throw new \InvalidArgumentException('non-nullable export_reason cannot be null');
        }
        if ((mb_strlen($export_reason) > 30)) {
            throw new \InvalidArgumentException('invalid length for $export_reason when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($export_reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for $export_reason when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., must be bigger than or equal to 1.');
        }

        $this->container['export_reason'] = $export_reason;

        return $this;
    }

    /**
     * Gets export_reason_type
     *
     * @return string|null
     */
    public function getExportReasonType()
    {
        return $this->container['export_reason_type'];
    }

    /**
     * Sets export_reason_type
     *
     * @param string|null $export_reason_type Please provide the reason for export
     *
     * @return self
     */
    public function setExportReasonType($export_reason_type)
    {
        if (is_null($export_reason_type)) {
            throw new \InvalidArgumentException('non-nullable export_reason_type cannot be null');
        }
        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!in_array($export_reason_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'export_reason_type', must be one of '%s'",
                    $export_reason_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_reason_type'] = $export_reason_type;

        return $this;
    }

    /**
     * Gets licenses
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner[]|null
     */
    public function getLicenses()
    {
        return $this->container['licenses'];
    }

    /**
     * Sets licenses
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLicensesInner[]|null $licenses Please provide details about export and import licenses
     *
     * @return self
     */
    public function setLicenses($licenses)
    {
        if (is_null($licenses)) {
            throw new \InvalidArgumentException('non-nullable licenses cannot be null');
        }

        if ((count($licenses) > 2)) {
            throw new \InvalidArgumentException('invalid value for $licenses when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 2.');
        }
        $this->container['licenses'] = $licenses;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string|null $shipment_type Please provide the shipment was sent for Personal (Gift) or Commercial (Sale) reasons
     *
     * @return self
     */
    public function setShipmentType($shipment_type)
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_type', must be one of '%s'",
                    $shipment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets customs_documents
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner[]|null
     */
    public function getCustomsDocuments()
    {
        return $this->container['customs_documents'];
    }

    /**
     * Sets customs_documents
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocumentsInner[]|null $customs_documents Please provide the Customs Documents at invoice level
     *
     * @return self
     */
    public function setCustomsDocuments($customs_documents)
    {
        if (is_null($customs_documents)) {
            throw new \InvalidArgumentException('non-nullable customs_documents cannot be null');
        }

        if ((count($customs_documents) > 50)) {
            throw new \InvalidArgumentException('invalid value for $customs_documents when calling SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclaration., number of items must be less than or equal to 50.');
        }
        $this->container['customs_documents'] = $customs_documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



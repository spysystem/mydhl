<?php
/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelFields
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelAttributes
    {
        return new SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInnerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressCreateShipmentRequest_outputImageProperties_imageOptions_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type_code' => 'string',
        'template_name' => 'string',
        'is_requested' => 'bool',
        'hide_account_number' => 'bool',
        'number_of_copies' => 'float',
        'invoice_type' => 'string',
        'language_code' => 'string',
        'language_country_code' => 'string',
        'encoding_format' => 'string',
        'render_dhl_logo' => 'bool',
        'fit_labels_to_a4' => 'bool',
        'label_free_text' => 'string',
        'label_customer_data_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type_code' => null,
        'template_name' => null,
        'is_requested' => null,
        'hide_account_number' => null,
        'number_of_copies' => null,
        'invoice_type' => null,
        'language_code' => null,
        'language_country_code' => null,
        'encoding_format' => null,
        'render_dhl_logo' => null,
        'fit_labels_to_a4' => null,
        'label_free_text' => null,
        'label_customer_data_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type_code' => false,
		'template_name' => false,
		'is_requested' => false,
		'hide_account_number' => false,
		'number_of_copies' => false,
		'invoice_type' => false,
		'language_code' => false,
		'language_country_code' => false,
		'encoding_format' => false,
		'render_dhl_logo' => false,
		'fit_labels_to_a4' => false,
		'label_free_text' => false,
		'label_customer_data_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_code' => 'typeCode',
        'template_name' => 'templateName',
        'is_requested' => 'isRequested',
        'hide_account_number' => 'hideAccountNumber',
        'number_of_copies' => 'numberOfCopies',
        'invoice_type' => 'invoiceType',
        'language_code' => 'languageCode',
        'language_country_code' => 'languageCountryCode',
        'encoding_format' => 'encodingFormat',
        'render_dhl_logo' => 'renderDHLLogo',
        'fit_labels_to_a4' => 'fitLabelsToA4',
        'label_free_text' => 'labelFreeText',
        'label_customer_data_text' => 'labelCustomerDataText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_code' => 'setTypeCode',
        'template_name' => 'setTemplateName',
        'is_requested' => 'setIsRequested',
        'hide_account_number' => 'setHideAccountNumber',
        'number_of_copies' => 'setNumberOfCopies',
        'invoice_type' => 'setInvoiceType',
        'language_code' => 'setLanguageCode',
        'language_country_code' => 'setLanguageCountryCode',
        'encoding_format' => 'setEncodingFormat',
        'render_dhl_logo' => 'setRenderDhlLogo',
        'fit_labels_to_a4' => 'setFitLabelsToA4',
        'label_free_text' => 'setLabelFreeText',
        'label_customer_data_text' => 'setLabelCustomerDataText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_code' => 'getTypeCode',
        'template_name' => 'getTemplateName',
        'is_requested' => 'getIsRequested',
        'hide_account_number' => 'getHideAccountNumber',
        'number_of_copies' => 'getNumberOfCopies',
        'invoice_type' => 'getInvoiceType',
        'language_code' => 'getLanguageCode',
        'language_country_code' => 'getLanguageCountryCode',
        'encoding_format' => 'getEncodingFormat',
        'render_dhl_logo' => 'getRenderDhlLogo',
        'fit_labels_to_a4' => 'getFitLabelsToA4',
        'label_free_text' => 'getLabelFreeText',
        'label_customer_data_text' => 'getLabelCustomerDataText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CODE_LABEL = 'label';
    public const TYPE_CODE_WAYBILL_DOC = 'waybillDoc';
    public const TYPE_CODE_INVOICE = 'invoice';
    public const TYPE_CODE_RECEIPT = 'receipt';
    public const TYPE_CODE_QR_CODE = 'qr-code';
    public const INVOICE_TYPE_COMMERCIAL = 'commercial';
    public const INVOICE_TYPE_PROFORMA = 'proforma';
    public const INVOICE_TYPE_RETURNS = 'returns';
    public const ENCODING_FORMAT_PNG = 'png';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeCodeAllowableValues()
    {
        return [
            self::TYPE_CODE_LABEL,
            self::TYPE_CODE_WAYBILL_DOC,
            self::TYPE_CODE_INVOICE,
            self::TYPE_CODE_RECEIPT,
            self::TYPE_CODE_QR_CODE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_COMMERCIAL,
            self::INVOICE_TYPE_PROFORMA,
            self::INVOICE_TYPE_RETURNS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncodingFormatAllowableValues()
    {
        return [
            self::ENCODING_FORMAT_PNG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type_code', $data ?? [], null);
        $this->setIfExists('template_name', $data ?? [], null);
        $this->setIfExists('is_requested', $data ?? [], null);
        $this->setIfExists('hide_account_number', $data ?? [], null);
        $this->setIfExists('number_of_copies', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('language_code', $data ?? [], null);
        $this->setIfExists('language_country_code', $data ?? [], null);
        $this->setIfExists('encoding_format', $data ?? [], null);
        $this->setIfExists('render_dhl_logo', $data ?? [], null);
        $this->setIfExists('fit_labels_to_a4', $data ?? [], null);
        $this->setIfExists('label_free_text', $data ?? [], null);
        $this->setIfExists('label_customer_data_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type_code'] === null) {
            $invalidProperties[] = "'type_code' can't be null";
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!is_null($this->container['type_code']) && !in_array($this->container['type_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_code', must be one of '%s'",
                $this->container['type_code'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['template_name']) && (mb_strlen($this->container['template_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'template_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['number_of_copies']) && ($this->container['number_of_copies'] > 2)) {
            $invalidProperties[] = "invalid value for 'number_of_copies', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['number_of_copies']) && ($this->container['number_of_copies'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_copies', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_type', must be one of '%s'",
                $this->container['invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['language_code']) && (mb_strlen($this->container['language_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'language_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['language_code']) && (mb_strlen($this->container['language_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'language_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['language_country_code']) && (mb_strlen($this->container['language_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'language_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['language_country_code']) && (mb_strlen($this->container['language_country_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'language_country_code', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getEncodingFormatAllowableValues();
        if (!is_null($this->container['encoding_format']) && !in_array($this->container['encoding_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encoding_format', must be one of '%s'",
                $this->container['encoding_format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['label_free_text']) && (mb_strlen($this->container['label_free_text']) > 150)) {
            $invalidProperties[] = "invalid value for 'label_free_text', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['label_customer_data_text']) && (mb_strlen($this->container['label_customer_data_text']) > 250)) {
            $invalidProperties[] = "invalid value for 'label_customer_data_text', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['label_customer_data_text']) && (mb_strlen($this->container['label_customer_data_text']) < 1)) {
            $invalidProperties[] = "invalid value for 'label_customer_data_text', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_code
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string $type_code Please enter the document type you want to wish set properties for
     *
     * @return self
     */
    public function setTypeCode($type_code)
    {
        if (is_null($type_code)) {
            throw new \InvalidArgumentException('non-nullable type_code cannot be null');
        }
        $allowedValues = $this->getTypeCodeAllowableValues();
        if (!in_array($type_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_code', must be one of '%s'",
                    $type_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string|null $template_name Please enter DHL Express document template name. <BR>                Sample Transport label templates:<BR>                ECOM26_84_A4_001 <BR>                ECOM26_84_001 - default<BR>                ECOM_TC_A4<BR>                ECOM26_A6_002<BR>                ECOM26_84CI_001<BR>                ECOM26_84CI_002 - supported single customer barcode<BR>                ECOM26_84CI_003 - to be used if customer barcodes are used<BR>                ECOM_A4_RU_002<BR>                <BR>                Sample WaybillDoc templates<BR>                ARCH_8X4_A4_002<BR>                ARCH_8X4 - default<BR>                ARCH_6X4<BR>                ARCH_A4_RU_002<BR>                <BR>                Sample Commercial invoice templates:<BR>                COMMERCIAL_INVOICE_04 - This template can print the Shipper, Recipient, and Buyer and Importer address details and is on portrait orientation, exclusive use for preparing Loose BBX shipment.<BR>                COMMERCIAL_INVOICE_P_10 - (default) This template can print the Shipper, Recipient and upto two more additional address details in portrait orientation. Note: If customer provided more than four address roles in the request message and this template is selected, the rendered invoice will only contain four address roles based on order of priority: Shipper, Recipient, Seller, Importer, Exporter, Buyer. <BR>                COMMERCIAL_INVOICE_L_10 - This template can print the Shipper,Recipient, Buyer, and Importer and Exporter address details and is on landscape orientation..<BR>                RET_COM_INVOICE_A4_01 - This template can print the Shipper, Recipient and Importer of record address details and is on landscape orientation. This template is for exclusive use for certain shipment where the goods are actual 'returns'. The Shipper is the party that earlier has received the goods, but now wishes to return the goods to its originating party. The Recipient in this shipment scenario will receive the 'returned goods'. Therefore such request of shipment with an invoice rendering may utilize the specific invoice template for 'Returns Invoice'.<BR>                <BR>                Sample Shipment Receipt template<BR>                SHIP_RECPT_A4_RU_002 - default<BR>                Sample QR Code template template<BR>                <BR>                QR_1_00_LL_PNG_001 - default
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (is_null($template_name)) {
            throw new \InvalidArgumentException('non-nullable template_name cannot be null');
        }
        if ((mb_strlen($template_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $template_name when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 25.');
        }

        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets is_requested
     *
     * @return bool|null
     */
    public function getIsRequested()
    {
        return $this->container['is_requested'];
    }

    /**
     * Sets is_requested
     *
     * @param bool|null $is_requested To be used for waybillDoc, invoice, receipt and QRcode. If set to true then the document is provided otherwise not
     *
     * @return self
     */
    public function setIsRequested($is_requested)
    {
        if (is_null($is_requested)) {
            throw new \InvalidArgumentException('non-nullable is_requested cannot be null');
        }
        $this->container['is_requested'] = $is_requested;

        return $this;
    }

    /**
     * Gets hide_account_number
     *
     * @return bool|null
     */
    public function getHideAccountNumber()
    {
        return $this->container['hide_account_number'];
    }

    /**
     * Sets hide_account_number
     *
     * @param bool|null $hide_account_number To be used for waybillDoc. If set to true then account information will not be printed on the waybillDoc
     *
     * @return self
     */
    public function setHideAccountNumber($hide_account_number)
    {
        if (is_null($hide_account_number)) {
            throw new \InvalidArgumentException('non-nullable hide_account_number cannot be null');
        }
        $this->container['hide_account_number'] = $hide_account_number;

        return $this;
    }

    /**
     * Gets number_of_copies
     *
     * @return float|null
     */
    public function getNumberOfCopies()
    {
        return $this->container['number_of_copies'];
    }

    /**
     * Sets number_of_copies
     *
     * @param float|null $number_of_copies You can ask up to 2 waybillDoc copies to be provided
     *
     * @return self
     */
    public function setNumberOfCopies($number_of_copies)
    {
        if (is_null($number_of_copies)) {
            throw new \InvalidArgumentException('non-nullable number_of_copies cannot be null');
        }

        if (($number_of_copies > 2)) {
            throw new \InvalidArgumentException('invalid value for $number_of_copies when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 2.');
        }
        if (($number_of_copies < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_copies when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be bigger than or equal to 1.');
        }

        $this->container['number_of_copies'] = $number_of_copies;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string|null $invoice_type Please advise what type of customs documentation is required
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_type', must be one of '%s'",
                    $invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code Please enter ISO 3 letters language code for invoice
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        if (is_null($language_code)) {
            throw new \InvalidArgumentException('non-nullable language_code cannot be null');
        }
        if ((mb_strlen($language_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $language_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($language_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $language_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be bigger than or equal to 3.');
        }

        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets language_country_code
     *
     * @return string|null
     */
    public function getLanguageCountryCode()
    {
        return $this->container['language_country_code'];
    }

    /**
     * Sets language_country_code
     *
     * @param string|null $language_country_code Please enter ISO 2 letters language country code for invoice
     *
     * @return self
     */
    public function setLanguageCountryCode($language_country_code)
    {
        if (is_null($language_country_code)) {
            throw new \InvalidArgumentException('non-nullable language_country_code cannot be null');
        }
        if ((mb_strlen($language_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language_country_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($language_country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $language_country_code when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be bigger than or equal to 2.');
        }

        $this->container['language_country_code'] = $language_country_code;

        return $this;
    }

    /**
     * Gets encoding_format
     *
     * @return string|null
     */
    public function getEncodingFormat()
    {
        return $this->container['encoding_format'];
    }

    /**
     * Sets encoding_format
     *
     * @param string|null $encoding_format Please provide the format of the QR Code output format.
     *
     * @return self
     */
    public function setEncodingFormat($encoding_format)
    {
        if (is_null($encoding_format)) {
            throw new \InvalidArgumentException('non-nullable encoding_format cannot be null');
        }
        $allowedValues = $this->getEncodingFormatAllowableValues();
        if (!in_array($encoding_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encoding_format', must be one of '%s'",
                    $encoding_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encoding_format'] = $encoding_format;

        return $this;
    }

    /**
     * Gets render_dhl_logo
     *
     * @return bool|null
     */
    public function getRenderDhlLogo()
    {
        return $this->container['render_dhl_logo'];
    }

    /**
     * Sets render_dhl_logo
     *
     * @param bool|null $render_dhl_logo DHL Logo to be printed in Transport Label or Waybill Document
     *
     * @return self
     */
    public function setRenderDhlLogo($render_dhl_logo)
    {
        if (is_null($render_dhl_logo)) {
            throw new \InvalidArgumentException('non-nullable render_dhl_logo cannot be null');
        }
        $this->container['render_dhl_logo'] = $render_dhl_logo;

        return $this;
    }

    /**
     * Gets fit_labels_to_a4
     *
     * @return bool|null
     */
    public function getFitLabelsToA4()
    {
        return $this->container['fit_labels_to_a4'];
    }

    /**
     * Sets fit_labels_to_a4
     *
     * @param bool|null $fit_labels_to_a4 To print respective Transport Label and Waybill document into A4 margin PDF.<BR>                Note: ECOM26_A6_002,ECOM26_84CI_001,ECOM26_84CI_002,ARCH_6X4,ARCH_8X4 template. <BR>                This option is applicable only for PDF encodingFormat selection.<BR>                false: Transport Label and Waybill document will use default margin settings (default behavior) <BR>                true: Transport Label and Waybill document will print into A4 margin PDF
     *
     * @return self
     */
    public function setFitLabelsToA4($fit_labels_to_a4)
    {
        if (is_null($fit_labels_to_a4)) {
            throw new \InvalidArgumentException('non-nullable fit_labels_to_a4 cannot be null');
        }
        $this->container['fit_labels_to_a4'] = $fit_labels_to_a4;

        return $this;
    }

    /**
     * Gets label_free_text
     *
     * @return string|null
     */
    public function getLabelFreeText()
    {
        return $this->container['label_free_text'];
    }

    /**
     * Sets label_free_text
     *
     * @param string|null $label_free_text Additional customer label free text that can be printed in certain label.Note: Applicable only to ECOM26_A6_002, ECOM_TC_A4 and ECOM26_84CI_001.
     *
     * @return self
     */
    public function setLabelFreeText($label_free_text)
    {
        if (is_null($label_free_text)) {
            throw new \InvalidArgumentException('non-nullable label_free_text cannot be null');
        }
        if ((mb_strlen($label_free_text) > 150)) {
            throw new \InvalidArgumentException('invalid length for $label_free_text when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 150.');
        }

        $this->container['label_free_text'] = $label_free_text;

        return $this;
    }

    /**
     * Gets label_customer_data_text
     *
     * @return string|null
     */
    public function getLabelCustomerDataText()
    {
        return $this->container['label_customer_data_text'];
    }

    /**
     * Sets label_customer_data_text
     *
     * @param string|null $label_customer_data_text Additional customer label text that can be printed in certain label.Note: Applicable only to ECOM26_84_A4_001, ECOM_TC_A4 and ECOM26_84CI_001
     *
     * @return self
     */
    public function setLabelCustomerDataText($label_customer_data_text)
    {
        if (is_null($label_customer_data_text)) {
            throw new \InvalidArgumentException('non-nullable label_customer_data_text cannot be null');
        }
        if ((mb_strlen($label_customer_data_text) > 250)) {
            throw new \InvalidArgumentException('invalid length for $label_customer_data_text when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($label_customer_data_text) < 1)) {
            throw new \InvalidArgumentException('invalid length for $label_customer_data_text when calling SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptionsInner., must be bigger than or equal to 1.');
        }

        $this->container['label_customer_data_text'] = $label_customer_data_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



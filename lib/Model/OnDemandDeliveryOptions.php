<?php
/**
 * OnDemandDeliveryOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * OnDemandDeliveryOptions Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OnDemandDeliveryOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return OnDemandDeliveryOptionsModelFields
      */
    public static function GetModelFields(): OnDemandDeliveryOptionsModelFields
    {
        return new OnDemandDeliveryOptionsModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return OnDemandDeliveryOptionsModelAttributes
      */
    public static function GetModelAttributes(): OnDemandDeliveryOptionsModelAttributes
    {
        return new OnDemandDeliveryOptionsModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OnDemandDeliveryOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_option' => 'string',
        'location' => 'string',
        'instructions' => 'string',
        'gate_code' => 'string',
        'lwn_type_code' => 'string',
        'neighbour_name' => 'string',
        'neighbour_house_number' => 'string',
        'authorizer_name' => 'string',
        'selected_service_point_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_option' => null,
        'location' => null,
        'instructions' => null,
        'gate_code' => null,
        'lwn_type_code' => null,
        'neighbour_name' => null,
        'neighbour_house_number' => null,
        'authorizer_name' => null,
        'selected_service_point_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_option' => false,
		'location' => false,
		'instructions' => false,
		'gate_code' => false,
		'lwn_type_code' => false,
		'neighbour_name' => false,
		'neighbour_house_number' => false,
		'authorizer_name' => false,
		'selected_service_point_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_option' => 'DeliveryOption',
        'location' => 'Location',
        'instructions' => 'Instructions',
        'gate_code' => 'GateCode',
        'lwn_type_code' => 'LWNTypeCode',
        'neighbour_name' => 'NeighbourName',
        'neighbour_house_number' => 'NeighbourHouseNumber',
        'authorizer_name' => 'AuthorizerName',
        'selected_service_point_id' => 'SelectedServicePointID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_option' => 'setDeliveryOption',
        'location' => 'setLocation',
        'instructions' => 'setInstructions',
        'gate_code' => 'setGateCode',
        'lwn_type_code' => 'setLwnTypeCode',
        'neighbour_name' => 'setNeighbourName',
        'neighbour_house_number' => 'setNeighbourHouseNumber',
        'authorizer_name' => 'setAuthorizerName',
        'selected_service_point_id' => 'setSelectedServicePointId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_option' => 'getDeliveryOption',
        'location' => 'getLocation',
        'instructions' => 'getInstructions',
        'gate_code' => 'getGateCode',
        'lwn_type_code' => 'getLwnTypeCode',
        'neighbour_name' => 'getNeighbourName',
        'neighbour_house_number' => 'getNeighbourHouseNumber',
        'authorizer_name' => 'getAuthorizerName',
        'selected_service_point_id' => 'getSelectedServicePointId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DELIVERY_OPTION_TV = 'TV';
    public const DELIVERY_OPTION_SW = 'SW';
    public const DELIVERY_OPTION_SX = 'SX';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryOptionAllowableValues()
    {
        return [
            self::DELIVERY_OPTION_TV,
            self::DELIVERY_OPTION_SW,
            self::DELIVERY_OPTION_SX,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_option', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('gate_code', $data ?? [], null);
        $this->setIfExists('lwn_type_code', $data ?? [], null);
        $this->setIfExists('neighbour_name', $data ?? [], null);
        $this->setIfExists('neighbour_house_number', $data ?? [], null);
        $this->setIfExists('authorizer_name', $data ?? [], null);
        $this->setIfExists('selected_service_point_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['delivery_option'] === null) {
            $invalidProperties[] = "'delivery_option' can't be null";
        }
        $allowedValues = $this->getDeliveryOptionAllowableValues();
        if (!is_null($this->container['delivery_option']) && !in_array($this->container['delivery_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_option', must be one of '%s'",
                $this->container['delivery_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_option
     *
     * @return string
     */
    public function getDeliveryOption()
    {
        return $this->container['delivery_option'];
    }

    /**
     * Sets delivery_option
     *
     * @param string $delivery_option delivery_option
     *
     * @return self
     */
    public function setDeliveryOption($delivery_option)
    {
        $allowedValues = $this->getDeliveryOptionAllowableValues();
        if (!in_array($delivery_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_option', must be one of '%s'",
                    $delivery_option,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($delivery_option)) {
            throw new \InvalidArgumentException('non-nullable delivery_option cannot be null');
        }

        $this->container['delivery_option'] = $delivery_option;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {

        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions instructions
     *
     * @return self
     */
    public function setInstructions($instructions)
    {

        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }

        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets gate_code
     *
     * @return string|null
     */
    public function getGateCode()
    {
        return $this->container['gate_code'];
    }

    /**
     * Sets gate_code
     *
     * @param string|null $gate_code gate_code
     *
     * @return self
     */
    public function setGateCode($gate_code)
    {

        if (is_null($gate_code)) {
            throw new \InvalidArgumentException('non-nullable gate_code cannot be null');
        }

        $this->container['gate_code'] = $gate_code;

        return $this;
    }

    /**
     * Gets lwn_type_code
     *
     * @return string|null
     */
    public function getLwnTypeCode()
    {
        return $this->container['lwn_type_code'];
    }

    /**
     * Sets lwn_type_code
     *
     * @param string|null $lwn_type_code lwn_type_code
     *
     * @return self
     */
    public function setLwnTypeCode($lwn_type_code)
    {

        if (is_null($lwn_type_code)) {
            throw new \InvalidArgumentException('non-nullable lwn_type_code cannot be null');
        }

        $this->container['lwn_type_code'] = $lwn_type_code;

        return $this;
    }

    /**
     * Gets neighbour_name
     *
     * @return string|null
     */
    public function getNeighbourName()
    {
        return $this->container['neighbour_name'];
    }

    /**
     * Sets neighbour_name
     *
     * @param string|null $neighbour_name neighbour_name
     *
     * @return self
     */
    public function setNeighbourName($neighbour_name)
    {

        if (is_null($neighbour_name)) {
            throw new \InvalidArgumentException('non-nullable neighbour_name cannot be null');
        }

        $this->container['neighbour_name'] = $neighbour_name;

        return $this;
    }

    /**
     * Gets neighbour_house_number
     *
     * @return string|null
     */
    public function getNeighbourHouseNumber()
    {
        return $this->container['neighbour_house_number'];
    }

    /**
     * Sets neighbour_house_number
     *
     * @param string|null $neighbour_house_number neighbour_house_number
     *
     * @return self
     */
    public function setNeighbourHouseNumber($neighbour_house_number)
    {

        if (is_null($neighbour_house_number)) {
            throw new \InvalidArgumentException('non-nullable neighbour_house_number cannot be null');
        }

        $this->container['neighbour_house_number'] = $neighbour_house_number;

        return $this;
    }

    /**
     * Gets authorizer_name
     *
     * @return string|null
     */
    public function getAuthorizerName()
    {
        return $this->container['authorizer_name'];
    }

    /**
     * Sets authorizer_name
     *
     * @param string|null $authorizer_name authorizer_name
     *
     * @return self
     */
    public function setAuthorizerName($authorizer_name)
    {

        if (is_null($authorizer_name)) {
            throw new \InvalidArgumentException('non-nullable authorizer_name cannot be null');
        }

        $this->container['authorizer_name'] = $authorizer_name;

        return $this;
    }

    /**
     * Gets selected_service_point_id
     *
     * @return string|null
     */
    public function getSelectedServicePointId()
    {
        return $this->container['selected_service_point_id'];
    }

    /**
     * Sets selected_service_point_id
     *
     * @param string|null $selected_service_point_id selected_service_point_id
     *
     * @return self
     */
    public function setSelectedServicePointId($selected_service_point_id)
    {

        if (is_null($selected_service_point_id)) {
            throw new \InvalidArgumentException('non-nullable selected_service_point_id cannot be null');
        }

        $this->container['selected_service_point_id'] = $selected_service_point_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ExportLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * ExportLineItem Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExportLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commodity_code' => 'string',
        'eccn' => 'string',
        'export_reason_type' => 'string',
        'item_number' => 'int',
        'quantity' => 'int',
        'quantity_unit_of_measurement' => 'string',
        'item_description' => 'string',
        'unit_price' => 'float',
        'net_weight' => 'float',
        'gross_weight' => 'float',
        'manufacturing_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'commodity_code' => null,
        'eccn' => null,
        'export_reason_type' => null,
        'item_number' => null,
        'quantity' => null,
        'quantity_unit_of_measurement' => null,
        'item_description' => null,
        'unit_price' => null,
        'net_weight' => null,
        'gross_weight' => null,
        'manufacturing_country_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'commodity_code' => false,
        'eccn' => false,
        'export_reason_type' => false,
        'item_number' => false,
        'quantity' => false,
        'quantity_unit_of_measurement' => false,
        'item_description' => false,
        'unit_price' => false,
        'net_weight' => false,
        'gross_weight' => false,
        'manufacturing_country_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commodity_code' => 'CommodityCode',
        'eccn' => 'ECCN',
        'export_reason_type' => 'ExportReasonType',
        'item_number' => 'ItemNumber',
        'quantity' => 'Quantity',
        'quantity_unit_of_measurement' => 'QuantityUnitOfMeasurement',
        'item_description' => 'ItemDescription',
        'unit_price' => 'UnitPrice',
        'net_weight' => 'NetWeight',
        'gross_weight' => 'GrossWeight',
        'manufacturing_country_code' => 'ManufacturingCountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commodity_code' => 'setCommodityCode',
        'eccn' => 'setEccn',
        'export_reason_type' => 'setExportReasonType',
        'item_number' => 'setItemNumber',
        'quantity' => 'setQuantity',
        'quantity_unit_of_measurement' => 'setQuantityUnitOfMeasurement',
        'item_description' => 'setItemDescription',
        'unit_price' => 'setUnitPrice',
        'net_weight' => 'setNetWeight',
        'gross_weight' => 'setGrossWeight',
        'manufacturing_country_code' => 'setManufacturingCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commodity_code' => 'getCommodityCode',
        'eccn' => 'getEccn',
        'export_reason_type' => 'getExportReasonType',
        'item_number' => 'getItemNumber',
        'quantity' => 'getQuantity',
        'quantity_unit_of_measurement' => 'getQuantityUnitOfMeasurement',
        'item_description' => 'getItemDescription',
        'unit_price' => 'getUnitPrice',
        'net_weight' => 'getNetWeight',
        'gross_weight' => 'getGrossWeight',
        'manufacturing_country_code' => 'getManufacturingCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EXPORT_REASON_TYPE_PERMANENT = 'PERMANENT';
    const EXPORT_REASON_TYPE_TEMPORARY = 'TEMPORARY';
    const EXPORT_REASON_TYPE__RETURN = 'RETURN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportReasonTypeAllowableValues()
    {
        return [
            self::EXPORT_REASON_TYPE_PERMANENT,
            self::EXPORT_REASON_TYPE_TEMPORARY,
            self::EXPORT_REASON_TYPE__RETURN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('commodity_code', $data, null);
        $this->setIfExists('eccn', $data, null);
        $this->setIfExists('export_reason_type', $data, 'PERMANENT');
        $this->setIfExists('item_number', $data, null);
        $this->setIfExists('quantity', $data, null);
        $this->setIfExists('quantity_unit_of_measurement', $data, null);
        $this->setIfExists('item_description', $data, null);
        $this->setIfExists('unit_price', $data, null);
        $this->setIfExists('net_weight', $data, null);
        $this->setIfExists('gross_weight', $data, null);
        $this->setIfExists('manufacturing_country_code', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!is_null($this->container['export_reason_type']) && !in_array($this->container['export_reason_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_reason_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item_number'] === null) {
            $invalidProperties[] = "'item_number' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['quantity_unit_of_measurement'] === null) {
            $invalidProperties[] = "'quantity_unit_of_measurement' can't be null";
        }
        if ($this->container['item_description'] === null) {
            $invalidProperties[] = "'item_description' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['net_weight'] === null) {
            $invalidProperties[] = "'net_weight' can't be null";
        }
        if ($this->container['gross_weight'] === null) {
            $invalidProperties[] = "'gross_weight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code commodity_code
     *
     * @return $this
     */
    public function setCommodityCode($commodity_code)
    {

        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }

        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets eccn
     *
     * @return string|null
     */
    public function getEccn()
    {
        return $this->container['eccn'];
    }

    /**
     * Sets eccn
     *
     * @param string|null $eccn eccn
     *
     * @return $this
     */
    public function setEccn($eccn)
    {

        if (is_null($eccn)) {
            throw new \InvalidArgumentException('non-nullable eccn cannot be null');
        }

        $this->container['eccn'] = $eccn;

        return $this;
    }

    /**
     * Gets export_reason_type
     *
     * @return string|null
     */
    public function getExportReasonType()
    {
        return $this->container['export_reason_type'];
    }

    /**
     * Sets export_reason_type
     *
     * @param string|null $export_reason_type export_reason_type
     *
     * @return $this
     */
    public function setExportReasonType($export_reason_type)
    {
        $allowedValues = $this->getExportReasonTypeAllowableValues();
        if (!is_null($export_reason_type) && !in_array($export_reason_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_reason_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($export_reason_type)) {
            throw new \InvalidArgumentException('non-nullable export_reason_type cannot be null');
        }

        $this->container['export_reason_type'] = $export_reason_type;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return int
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param int $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {

        if (is_null($item_number)) {
            throw new \InvalidArgumentException('non-nullable item_number cannot be null');
        }

        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_unit_of_measurement
     *
     * @return string
     */
    public function getQuantityUnitOfMeasurement()
    {
        return $this->container['quantity_unit_of_measurement'];
    }

    /**
     * Sets quantity_unit_of_measurement
     *
     * @param string $quantity_unit_of_measurement quantity_unit_of_measurement
     *
     * @return $this
     */
    public function setQuantityUnitOfMeasurement($quantity_unit_of_measurement)
    {

        if (is_null($quantity_unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable quantity_unit_of_measurement cannot be null');
        }

        $this->container['quantity_unit_of_measurement'] = $quantity_unit_of_measurement;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string $item_description item_description
     *
     * @return $this
     */
    public function setItemDescription($item_description)
    {

        if (is_null($item_description)) {
            throw new \InvalidArgumentException('non-nullable item_description cannot be null');
        }

        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {

        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets net_weight
     *
     * @return float
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     *
     * @param float $net_weight net_weight
     *
     * @return $this
     */
    public function setNetWeight($net_weight)
    {

        if (is_null($net_weight)) {
            throw new \InvalidArgumentException('non-nullable net_weight cannot be null');
        }

        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets gross_weight
     *
     * @return float
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param float $gross_weight gross_weight
     *
     * @return $this
     */
    public function setGrossWeight($gross_weight)
    {

        if (is_null($gross_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_weight cannot be null');
        }

        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets manufacturing_country_code
     *
     * @return string|null
     */
    public function getManufacturingCountryCode()
    {
        return $this->container['manufacturing_country_code'];
    }

    /**
     * Sets manufacturing_country_code
     *
     * @param string|null $manufacturing_country_code manufacturing_country_code
     *
     * @return $this
     */
    public function setManufacturingCountryCode($manufacturing_country_code)
    {

        if (is_null($manufacturing_country_code)) {
            throw new \InvalidArgumentException('non-nullable manufacturing_country_code cannot be null');
        }

        $this->container['manufacturing_country_code'] = $manufacturing_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Integration for DHL Express MyDHL Service
 *
 * OpenAPI description for the Integration with MyDHL
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'street_lines' => 'string',
        'street_name' => 'string',
        'building_name' => 'string',
        'street_number' => 'string',
        'street_lines2' => 'string',
        'street_lines3' => 'string',
        'city' => 'string',
        'state_or_province_code' => 'string',
        'postal_code' => 'string',
        'country_code' => 'string',
        'suburb' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'street_lines' => null,
        'street_name' => null,
        'building_name' => null,
        'street_number' => null,
        'street_lines2' => null,
        'street_lines3' => null,
        'city' => null,
        'state_or_province_code' => null,
        'postal_code' => null,
        'country_code' => null,
        'suburb' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'street_lines' => false,
        'street_name' => false,
        'building_name' => false,
        'street_number' => false,
        'street_lines2' => false,
        'street_lines3' => false,
        'city' => false,
        'state_or_province_code' => false,
        'postal_code' => false,
        'country_code' => false,
        'suburb' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street_lines' => 'StreetLines',
        'street_name' => 'StreetName',
        'building_name' => 'BuildingName',
        'street_number' => 'StreetNumber',
        'street_lines2' => 'StreetLines2',
        'street_lines3' => 'StreetLines3',
        'city' => 'City',
        'state_or_province_code' => 'StateOrProvinceCode',
        'postal_code' => 'PostalCode',
        'country_code' => 'CountryCode',
        'suburb' => 'Suburb'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street_lines' => 'setStreetLines',
        'street_name' => 'setStreetName',
        'building_name' => 'setBuildingName',
        'street_number' => 'setStreetNumber',
        'street_lines2' => 'setStreetLines2',
        'street_lines3' => 'setStreetLines3',
        'city' => 'setCity',
        'state_or_province_code' => 'setStateOrProvinceCode',
        'postal_code' => 'setPostalCode',
        'country_code' => 'setCountryCode',
        'suburb' => 'setSuburb'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street_lines' => 'getStreetLines',
        'street_name' => 'getStreetName',
        'building_name' => 'getBuildingName',
        'street_number' => 'getStreetNumber',
        'street_lines2' => 'getStreetLines2',
        'street_lines3' => 'getStreetLines3',
        'city' => 'getCity',
        'state_or_province_code' => 'getStateOrProvinceCode',
        'postal_code' => 'getPostalCode',
        'country_code' => 'getCountryCode',
        'suburb' => 'getSuburb'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('street_lines', $data, null);
        $this->setIfExists('street_name', $data, null);
        $this->setIfExists('building_name', $data, null);
        $this->setIfExists('street_number', $data, null);
        $this->setIfExists('street_lines2', $data, null);
        $this->setIfExists('street_lines3', $data, null);
        $this->setIfExists('city', $data, null);
        $this->setIfExists('state_or_province_code', $data, null);
        $this->setIfExists('postal_code', $data, null);
        $this->setIfExists('country_code', $data, null);
        $this->setIfExists('suburb', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['street_lines'] === null) {
            $invalidProperties[] = "'street_lines' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street_lines
     *
     * @return string
     */
    public function getStreetLines()
    {
        return $this->container['street_lines'];
    }

    /**
     * Sets street_lines
     *
     * @param string $street_lines street_lines
     *
     * @return $this
     */
    public function setStreetLines($street_lines)
    {

        if (is_null($street_lines)) {
            throw new \InvalidArgumentException('non-nullable street_lines cannot be null');
        }

        $this->container['street_lines'] = $street_lines;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {

        if (is_null($street_name)) {
            throw new \InvalidArgumentException('non-nullable street_name cannot be null');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets building_name
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['building_name'];
    }

    /**
     * Sets building_name
     *
     * @param string|null $building_name building_name
     *
     * @return $this
     */
    public function setBuildingName($building_name)
    {

        if (is_null($building_name)) {
            throw new \InvalidArgumentException('non-nullable building_name cannot be null');
        }

        $this->container['building_name'] = $building_name;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string|null $street_number street_number
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {

        if (is_null($street_number)) {
            throw new \InvalidArgumentException('non-nullable street_number cannot be null');
        }

        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street_lines2
     *
     * @return string|null
     */
    public function getStreetLines2()
    {
        return $this->container['street_lines2'];
    }

    /**
     * Sets street_lines2
     *
     * @param string|null $street_lines2 street_lines2
     *
     * @return $this
     */
    public function setStreetLines2($street_lines2)
    {

        if (is_null($street_lines2)) {
            throw new \InvalidArgumentException('non-nullable street_lines2 cannot be null');
        }

        $this->container['street_lines2'] = $street_lines2;

        return $this;
    }

    /**
     * Gets street_lines3
     *
     * @return string|null
     */
    public function getStreetLines3()
    {
        return $this->container['street_lines3'];
    }

    /**
     * Sets street_lines3
     *
     * @param string|null $street_lines3 street_lines3
     *
     * @return $this
     */
    public function setStreetLines3($street_lines3)
    {

        if (is_null($street_lines3)) {
            throw new \InvalidArgumentException('non-nullable street_lines3 cannot be null');
        }

        $this->container['street_lines3'] = $street_lines3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_or_province_code
     *
     * @return string|null
     */
    public function getStateOrProvinceCode()
    {
        return $this->container['state_or_province_code'];
    }

    /**
     * Sets state_or_province_code
     *
     * @param string|null $state_or_province_code state_or_province_code
     *
     * @return $this
     */
    public function setStateOrProvinceCode($state_or_province_code)
    {

        if (is_null($state_or_province_code)) {
            throw new \InvalidArgumentException('non-nullable state_or_province_code cannot be null');
        }

        $this->container['state_or_province_code'] = $state_or_province_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {

        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {

        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets suburb
     *
     * @return string|null
     */
    public function getSuburb()
    {
        return $this->container['suburb'];
    }

    /**
     * Sets suburb
     *
     * @param string|null $suburb suburb
     *
     * @return $this
     */
    public function setSuburb($suburb)
    {

        if (is_null($suburb)) {
            throw new \InvalidArgumentException('non-nullable suburb cannot be null');
        }

        $this->container['suburb'] = $suburb;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity Class Doc Comment
 *
 * @category Class
 * @description Please enter information about quantity for this line item
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelFields
    {
        return new SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelAttributes
    {
        return new SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantityModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressExportDeclaration_lineItems_inner_quantity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'int',
        'unit_of_measurement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'unit_of_measurement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
		'unit_of_measurement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'unit_of_measurement' => 'unitOfMeasurement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'unit_of_measurement' => 'setUnitOfMeasurement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'unit_of_measurement' => 'getUnitOfMeasurement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UNIT_OF_MEASUREMENT_BOX = 'BOX';
    public const UNIT_OF_MEASUREMENT__2_GM = '2GM';
    public const UNIT_OF_MEASUREMENT__2_M3 = '2M3';
    public const UNIT_OF_MEASUREMENT__3_M3 = '3M3';
    public const UNIT_OF_MEASUREMENT_M3 = 'M3';
    public const UNIT_OF_MEASUREMENT_DPR = 'DPR';
    public const UNIT_OF_MEASUREMENT_DOZ = 'DOZ';
    public const UNIT_OF_MEASUREMENT__2_NO = '2NO';
    public const UNIT_OF_MEASUREMENT_PCS = 'PCS';
    public const UNIT_OF_MEASUREMENT_GM = 'GM';
    public const UNIT_OF_MEASUREMENT_GRS = 'GRS';
    public const UNIT_OF_MEASUREMENT_KG = 'KG';
    public const UNIT_OF_MEASUREMENT_L = 'L';
    public const UNIT_OF_MEASUREMENT_M = 'M';
    public const UNIT_OF_MEASUREMENT__3_GM = '3GM';
    public const UNIT_OF_MEASUREMENT__3_L = '3L';
    public const UNIT_OF_MEASUREMENT_X = 'X';
    public const UNIT_OF_MEASUREMENT_NO = 'NO';
    public const UNIT_OF_MEASUREMENT__2_KG = '2KG';
    public const UNIT_OF_MEASUREMENT_PRS = 'PRS';
    public const UNIT_OF_MEASUREMENT__2_L = '2L';
    public const UNIT_OF_MEASUREMENT__3_KG = '3KG';
    public const UNIT_OF_MEASUREMENT_CM2 = 'CM2';
    public const UNIT_OF_MEASUREMENT__2_M2 = '2M2';
    public const UNIT_OF_MEASUREMENT__3_M2 = '3M2';
    public const UNIT_OF_MEASUREMENT_M2 = 'M2';
    public const UNIT_OF_MEASUREMENT__4_M2 = '4M2';
    public const UNIT_OF_MEASUREMENT__3_M = '3M';
    public const UNIT_OF_MEASUREMENT_CM = 'CM';
    public const UNIT_OF_MEASUREMENT_CONE = 'CONE';
    public const UNIT_OF_MEASUREMENT_CT = 'CT';
    public const UNIT_OF_MEASUREMENT_EA = 'EA';
    public const UNIT_OF_MEASUREMENT_LBS = 'LBS';
    public const UNIT_OF_MEASUREMENT_RILL = 'RILL';
    public const UNIT_OF_MEASUREMENT_ROLL = 'ROLL';
    public const UNIT_OF_MEASUREMENT_SET = 'SET';
    public const UNIT_OF_MEASUREMENT_TU = 'TU';
    public const UNIT_OF_MEASUREMENT_YDS = 'YDS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitOfMeasurementAllowableValues()
    {
        return [
            self::UNIT_OF_MEASUREMENT_BOX,
            self::UNIT_OF_MEASUREMENT__2_GM,
            self::UNIT_OF_MEASUREMENT__2_M3,
            self::UNIT_OF_MEASUREMENT__3_M3,
            self::UNIT_OF_MEASUREMENT_M3,
            self::UNIT_OF_MEASUREMENT_DPR,
            self::UNIT_OF_MEASUREMENT_DOZ,
            self::UNIT_OF_MEASUREMENT__2_NO,
            self::UNIT_OF_MEASUREMENT_PCS,
            self::UNIT_OF_MEASUREMENT_GM,
            self::UNIT_OF_MEASUREMENT_GRS,
            self::UNIT_OF_MEASUREMENT_KG,
            self::UNIT_OF_MEASUREMENT_L,
            self::UNIT_OF_MEASUREMENT_M,
            self::UNIT_OF_MEASUREMENT__3_GM,
            self::UNIT_OF_MEASUREMENT__3_L,
            self::UNIT_OF_MEASUREMENT_X,
            self::UNIT_OF_MEASUREMENT_NO,
            self::UNIT_OF_MEASUREMENT__2_KG,
            self::UNIT_OF_MEASUREMENT_PRS,
            self::UNIT_OF_MEASUREMENT__2_L,
            self::UNIT_OF_MEASUREMENT__3_KG,
            self::UNIT_OF_MEASUREMENT_CM2,
            self::UNIT_OF_MEASUREMENT__2_M2,
            self::UNIT_OF_MEASUREMENT__3_M2,
            self::UNIT_OF_MEASUREMENT_M2,
            self::UNIT_OF_MEASUREMENT__4_M2,
            self::UNIT_OF_MEASUREMENT__3_M,
            self::UNIT_OF_MEASUREMENT_CM,
            self::UNIT_OF_MEASUREMENT_CONE,
            self::UNIT_OF_MEASUREMENT_CT,
            self::UNIT_OF_MEASUREMENT_EA,
            self::UNIT_OF_MEASUREMENT_LBS,
            self::UNIT_OF_MEASUREMENT_RILL,
            self::UNIT_OF_MEASUREMENT_ROLL,
            self::UNIT_OF_MEASUREMENT_SET,
            self::UNIT_OF_MEASUREMENT_TU,
            self::UNIT_OF_MEASUREMENT_YDS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (($this->container['value'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'value', must be smaller than or equal to 1000000000.";
        }

        if (($this->container['value'] < 1)) {
            $invalidProperties[] = "invalid value for 'value', must be bigger than or equal to 1.";
        }

        if ($this->container['unit_of_measurement'] === null) {
            $invalidProperties[] = "'unit_of_measurement' can't be null";
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!is_null($this->container['unit_of_measurement']) && !in_array($this->container['unit_of_measurement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                $this->container['unit_of_measurement'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['unit_of_measurement']) > 3)) {
            $invalidProperties[] = "invalid value for 'unit_of_measurement', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int $value Please enter number of pieces in the line item
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        if (($value > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $value when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity., must be smaller than or equal to 1000000000.');
        }
        if (($value < 1)) {
            throw new \InvalidArgumentException('invalid value for $value when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity., must be bigger than or equal to 1.');
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string $unit_of_measurement Please provide correct unit of measurement<BR>                <BR>                Possible values;<BR>                BOX Boxes<BR>                2GM Centigram<BR>              2M3 Cubic Centimeters<BR>                3M3 Cubic Feet<BR>                M3 Cubic Meters<BR>                DPR Dozen Pairs<BR>                DOZ Dozen<BR>                2NO Each<BR>                PCS Pieces<BR>                GM Grams<BR>                GRS Gross<BR>                KG Kilograms<BR>                L Liters<BR>                M Meters<BR>                3GM Milligrams<BR>                3L Milliliters<BR>                X No Unit Required<BR>                NO Number<BR>                2KG Ounces<BR>                PRS Pairs<BR>                2L Gallons<BR>                3KG Pounds<BR>                CM2 Square Centimeters<BR>                2M2 Square Feet<BR>                3M2 Square Inches<BR>                M2 Square Meters<BR>                4M2 Square Yards<BR>                3M Yards<BR>                CM Centimeters<BR>                CONE Cone<BR>                CT Carat<BR>                EA Each<BR>                LBS Pounds<BR>                RILL Rill<BR>                ROLL Roll<BR>                SET Set<BR>                TU Time Unit<BR>                YDS Yard
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $allowedValues = $this->getUnitOfMeasurementAllowableValues();
        if (!in_array($unit_of_measurement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_of_measurement', must be one of '%s'",
                    $unit_of_measurement,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($unit_of_measurement) > 3)) {
            throw new \InvalidArgumentException('invalid length for $unit_of_measurement when calling SupermodelIoLogisticsExpressExportDeclarationLineItemsInnerQuantity., must be smaller than or equal to 3.');
        }

        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SupermodelIoLogisticsExpressExportDeclarationInvoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Model;

use \ArrayAccess;
use \MyDHL\ObjectSerializer;

/**
 * SupermodelIoLogisticsExpressExportDeclarationInvoice Class Doc Comment
 *
 * @category Class
 * @description Please provide invoice related information
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupermodelIoLogisticsExpressExportDeclarationInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationInvoiceModelFields
      */
    public static function GetModelFields(): SupermodelIoLogisticsExpressExportDeclarationInvoiceModelFields
    {
        return new SupermodelIoLogisticsExpressExportDeclarationInvoiceModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupermodelIoLogisticsExpressExportDeclarationInvoiceModelAttributes
      */
    public static function GetModelAttributes(): SupermodelIoLogisticsExpressExportDeclarationInvoiceModelAttributes
    {
        return new SupermodelIoLogisticsExpressExportDeclarationInvoiceModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'supermodelIoLogisticsExpressExportDeclaration_invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'date' => 'string',
        'function' => 'string',
        'customer_references' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner[]',
        'indicative_customs_values' => '\MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'date' => null,
        'function' => null,
        'customer_references' => null,
        'indicative_customs_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => false,
		'date' => false,
		'function' => false,
		'customer_references' => false,
		'indicative_customs_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'date' => 'date',
        'function' => 'function',
        'customer_references' => 'customerReferences',
        'indicative_customs_values' => 'indicativeCustomsValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'date' => 'setDate',
        'function' => 'setFunction',
        'customer_references' => 'setCustomerReferences',
        'indicative_customs_values' => 'setIndicativeCustomsValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'date' => 'getDate',
        'function' => 'getFunction',
        'customer_references' => 'getCustomerReferences',
        'indicative_customs_values' => 'getIndicativeCustomsValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODEL_FUNCTION_IMPORT = 'import';
    public const MODEL_FUNCTION_EXPORT = 'export';
    public const MODEL_FUNCTION_BOTH = 'both';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFunctionAllowableValues()
    {
        return [
            self::MODEL_FUNCTION_IMPORT,
            self::MODEL_FUNCTION_EXPORT,
            self::MODEL_FUNCTION_BOTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('function', $data ?? [], null);
        $this->setIfExists('customer_references', $data ?? [], null);
        $this->setIfExists('indicative_customs_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 35)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['number']) < 1)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ((mb_strlen($this->container['date']) > 35)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['date']) < 1)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/", $this->container['date'])) {
            $invalidProperties[] = "invalid value for 'date', must be conform to the pattern /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['function'] === null) {
            $invalidProperties[] = "'function' can't be null";
        }
        $allowedValues = $this->getFunctionAllowableValues();
        if (!is_null($this->container['function']) && !in_array($this->container['function'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'function', must be one of '%s'",
                $this->container['function'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_references']) && (count($this->container['customer_references']) > 100)) {
            $invalidProperties[] = "invalid value for 'customer_references', number of items must be less than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Please enter commercial invoice number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        if ((mb_strlen($number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., must be bigger than or equal to 1.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Please enter commercial invoice date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        if ((mb_strlen($date) > 35)) {
            throw new \InvalidArgumentException('invalid length for $date when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $date when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/", $date))) {
            throw new \InvalidArgumentException("invalid value for \$date when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., must conform to the pattern /^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$/.");
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string $function Please provide the purpose was the document details captured and are planned to be used. Note: export and import is only applicable for approve Sale In Transit customers
     *
     * @return self
     */
    public function setFunction($function)
    {
        if (is_null($function)) {
            throw new \InvalidArgumentException('non-nullable function cannot be null');
        }
        $allowedValues = $this->getFunctionAllowableValues();
        if (!in_array($function, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'function', must be one of '%s'",
                    $function,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets customer_references
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner[]|null
     */
    public function getCustomerReferences()
    {
        return $this->container['customer_references'];
    }

    /**
     * Sets customer_references
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceCustomerReferencesInner[]|null $customer_references Please provide the customer references at invoice level.   Note: customerReference/0/value with typeCode 'CU' is mandatory if using POST method and no shipmentTrackingNumber is provided in request. It is recommended to provide less than 20 customer references of 'MRN' type code
     *
     * @return self
     */
    public function setCustomerReferences($customer_references)
    {
        if (is_null($customer_references)) {
            throw new \InvalidArgumentException('non-nullable customer_references cannot be null');
        }

        if ((count($customer_references) > 100)) {
            throw new \InvalidArgumentException('invalid value for $customer_references when calling SupermodelIoLogisticsExpressExportDeclarationInvoice., number of items must be less than or equal to 100.');
        }
        $this->container['customer_references'] = $customer_references;

        return $this;
    }

    /**
     * Gets indicative_customs_values
     *
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues|null
     */
    public function getIndicativeCustomsValues()
    {
        return $this->container['indicative_customs_values'];
    }

    /**
     * Sets indicative_customs_values
     *
     * @param \MyDHL\Model\SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues|null $indicative_customs_values indicative_customs_values
     *
     * @return self
     */
    public function setIndicativeCustomsValues($indicative_customs_values)
    {
        if (is_null($indicative_customs_values)) {
            throw new \InvalidArgumentException('non-nullable indicative_customs_values cannot be null');
        }
        $this->container['indicative_customs_values'] = $indicative_customs_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * RatingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyDHL\ApiException;
use MyDHL\Configuration;
use MyDHL\HeaderSelector;
use MyDHL\ObjectSerializer;

/**
 * RatingApi Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RatingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '2.7.2';
	}
	#endregion

    /**
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'expApiLandedCost' => [
            'application/json',
        ],
        'expApiRates' => [
            'application/json',
        ],
        'expApiRatesMany' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation expApiLandedCost
     *
     * Landed Cost
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequest $supermodel_io_logistics_express_landed_cost_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiLandedCost'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse
     */
    public function expApiLandedCost($supermodel_io_logistics_express_landed_cost_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiLandedCost'][0])
    {
        list($response) = $this->expApiLandedCostWithHttpInfo($supermodel_io_logistics_express_landed_cost_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);
        return $response;
    }

    /**
     * Operation expApiLandedCostWithHttpInfo
     *
     * Landed Cost
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequest $supermodel_io_logistics_express_landed_cost_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiLandedCost'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function expApiLandedCostWithHttpInfo($supermodel_io_logistics_express_landed_cost_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiLandedCost'][0])
    {
        $request = $this->expApiLandedCostRequest($supermodel_io_logistics_express_landed_cost_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressRates', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressRates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expApiLandedCostAsync
     *
     * Landed Cost
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequest $supermodel_io_logistics_express_landed_cost_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiLandedCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiLandedCostAsync($supermodel_io_logistics_express_landed_cost_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiLandedCost'][0])
    {
        return $this->expApiLandedCostAsyncWithHttpInfo($supermodel_io_logistics_express_landed_cost_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expApiLandedCostAsyncWithHttpInfo
     *
     * Landed Cost
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequest $supermodel_io_logistics_express_landed_cost_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiLandedCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiLandedCostAsyncWithHttpInfo($supermodel_io_logistics_express_landed_cost_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiLandedCost'][0])
    {
        $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
        $request = $this->expApiLandedCostRequest($supermodel_io_logistics_express_landed_cost_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expApiLandedCost'
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressLandedCostRequest $supermodel_io_logistics_express_landed_cost_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiLandedCost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expApiLandedCostRequest($supermodel_io_logistics_express_landed_cost_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiLandedCost'][0])
    {

        // verify the required parameter 'supermodel_io_logistics_express_landed_cost_request' is set
        if ($supermodel_io_logistics_express_landed_cost_request === null || (is_array($supermodel_io_logistics_express_landed_cost_request) && count($supermodel_io_logistics_express_landed_cost_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supermodel_io_logistics_express_landed_cost_request when calling expApiLandedCost'
            );
        }

        if ($message_reference !== null && strlen($message_reference) > 36) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 36.');
        }
        if ($message_reference !== null && strlen($message_reference) < 28) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiLandedCost, must be bigger than or equal to 28.');
        }
        

        if ($plugin_name !== null && strlen($plugin_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$plugin_name" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 20.');
        }
        
        if ($plugin_version !== null && strlen($plugin_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$plugin_version" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 15.');
        }
        
        if ($shipping_system_platform_name !== null && strlen($shipping_system_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_name" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 20.');
        }
        
        if ($shipping_system_platform_version !== null && strlen($shipping_system_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_version" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 15.');
        }
        
        if ($webstore_platform_name !== null && strlen($webstore_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_name" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 20.');
        }
        
        if ($webstore_platform_version !== null && strlen($webstore_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_version" when calling RatingApi.expApiLandedCost, must be smaller than or equal to 15.');
        }
        

        $resourcePath = '/landed-cost';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($message_reference !== null) {
            $headerParams['Message-Reference'] = ObjectSerializer::toHeaderValue($message_reference);
        }
        // header params
        if ($message_reference_date !== null) {
            $headerParams['Message-Reference-Date'] = ObjectSerializer::toHeaderValue($message_reference_date);
        }
        // header params
        if ($plugin_name !== null) {
            $headerParams['Plugin-Name'] = ObjectSerializer::toHeaderValue($plugin_name);
        }
        // header params
        if ($plugin_version !== null) {
            $headerParams['Plugin-Version'] = ObjectSerializer::toHeaderValue($plugin_version);
        }
        // header params
        if ($shipping_system_platform_name !== null) {
            $headerParams['Shipping-System-Platform-Name'] = ObjectSerializer::toHeaderValue($shipping_system_platform_name);
        }
        // header params
        if ($shipping_system_platform_version !== null) {
            $headerParams['Shipping-System-Platform-Version'] = ObjectSerializer::toHeaderValue($shipping_system_platform_version);
        }
        // header params
        if ($webstore_platform_name !== null) {
            $headerParams['Webstore-Platform-Name'] = ObjectSerializer::toHeaderValue($webstore_platform_name);
        }
        // header params
        if ($webstore_platform_version !== null) {
            $headerParams['Webstore-Platform-Version'] = ObjectSerializer::toHeaderValue($webstore_platform_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supermodel_io_logistics_express_landed_cost_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supermodel_io_logistics_express_landed_cost_request));
            } else {
                $httpBody = $supermodel_io_logistics_express_landed_cost_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation expApiRates
     *
     * Retrieve Rates for a one piece Shipment
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $origin_country_code A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $origin_city_name Text specifying the city name (required)
     * @param  string $destination_country_code A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $destination_city_name Text specifying the city name (required)
     * @param  float $weight Gross weight of the shipment including packaging. (required)
     * @param  float $length Total length of the shipment including packaging. (required)
     * @param  float $width Total width of the shipment including packaging. (required)
     * @param  float $height Total height of the shipment including packaging. (required)
     * @param  string $planned_shipping_date Timestamp represents the date you plan to ship your prospected shipment (required)
     * @param  bool $is_customs_declarable is_customs_declarable (required)
     * @param  string $unit_of_measurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. (required)
     * @param  string $origin_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  string $destination_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  bool $next_business_day When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  bool $get_all_value_added_services Option to return list of all value added services and its rule groups if applicable (optional, default to false)
     * @param  bool $request_estimated_delivery_date Option to return Estimated Delivery Date in response (optional, default to true)
     * @param  string $estimated_delivery_date_type Estimated Delivery Date Type. QDDF: is the fastest &#39;docs&#39; transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL&#39;s service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. (optional, default to 'QDDF')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRates'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse
     */
    public function expApiRates($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code = null, $destination_postal_code = null, $next_business_day = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, $get_all_value_added_services = false, $request_estimated_delivery_date = true, $estimated_delivery_date_type = 'QDDF', string $contentType = self::contentTypes['expApiRates'][0])
    {
        list($response) = $this->expApiRatesWithHttpInfo($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code, $destination_postal_code, $next_business_day, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $get_all_value_added_services, $request_estimated_delivery_date, $estimated_delivery_date_type, $contentType);
        return $response;
    }

    /**
     * Operation expApiRatesWithHttpInfo
     *
     * Retrieve Rates for a one piece Shipment
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $origin_country_code A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $origin_city_name Text specifying the city name (required)
     * @param  string $destination_country_code A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $destination_city_name Text specifying the city name (required)
     * @param  float $weight Gross weight of the shipment including packaging. (required)
     * @param  float $length Total length of the shipment including packaging. (required)
     * @param  float $width Total width of the shipment including packaging. (required)
     * @param  float $height Total height of the shipment including packaging. (required)
     * @param  string $planned_shipping_date Timestamp represents the date you plan to ship your prospected shipment (required)
     * @param  bool $is_customs_declarable (required)
     * @param  string $unit_of_measurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. (required)
     * @param  string $origin_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  string $destination_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  bool $next_business_day When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  bool $get_all_value_added_services Option to return list of all value added services and its rule groups if applicable (optional, default to false)
     * @param  bool $request_estimated_delivery_date Option to return Estimated Delivery Date in response (optional, default to true)
     * @param  string $estimated_delivery_date_type Estimated Delivery Date Type. QDDF: is the fastest &#39;docs&#39; transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL&#39;s service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. (optional, default to 'QDDF')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRates'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function expApiRatesWithHttpInfo($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code = null, $destination_postal_code = null, $next_business_day = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, $get_all_value_added_services = false, $request_estimated_delivery_date = true, $estimated_delivery_date_type = 'QDDF', string $contentType = self::contentTypes['expApiRates'][0])
    {
        $request = $this->expApiRatesRequest($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code, $destination_postal_code, $next_business_day, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $get_all_value_added_services, $request_estimated_delivery_date, $estimated_delivery_date_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressRates', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressRates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expApiRatesAsync
     *
     * Retrieve Rates for a one piece Shipment
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $origin_country_code A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $origin_city_name Text specifying the city name (required)
     * @param  string $destination_country_code A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $destination_city_name Text specifying the city name (required)
     * @param  float $weight Gross weight of the shipment including packaging. (required)
     * @param  float $length Total length of the shipment including packaging. (required)
     * @param  float $width Total width of the shipment including packaging. (required)
     * @param  float $height Total height of the shipment including packaging. (required)
     * @param  string $planned_shipping_date Timestamp represents the date you plan to ship your prospected shipment (required)
     * @param  bool $is_customs_declarable (required)
     * @param  string $unit_of_measurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. (required)
     * @param  string $origin_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  string $destination_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  bool $next_business_day When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  bool $get_all_value_added_services Option to return list of all value added services and its rule groups if applicable (optional, default to false)
     * @param  bool $request_estimated_delivery_date Option to return Estimated Delivery Date in response (optional, default to true)
     * @param  string $estimated_delivery_date_type Estimated Delivery Date Type. QDDF: is the fastest &#39;docs&#39; transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL&#39;s service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. (optional, default to 'QDDF')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiRatesAsync($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code = null, $destination_postal_code = null, $next_business_day = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, $get_all_value_added_services = false, $request_estimated_delivery_date = true, $estimated_delivery_date_type = 'QDDF', string $contentType = self::contentTypes['expApiRates'][0])
    {
        return $this->expApiRatesAsyncWithHttpInfo($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code, $destination_postal_code, $next_business_day, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $get_all_value_added_services, $request_estimated_delivery_date, $estimated_delivery_date_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expApiRatesAsyncWithHttpInfo
     *
     * Retrieve Rates for a one piece Shipment
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $origin_country_code A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $origin_city_name Text specifying the city name (required)
     * @param  string $destination_country_code A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $destination_city_name Text specifying the city name (required)
     * @param  float $weight Gross weight of the shipment including packaging. (required)
     * @param  float $length Total length of the shipment including packaging. (required)
     * @param  float $width Total width of the shipment including packaging. (required)
     * @param  float $height Total height of the shipment including packaging. (required)
     * @param  string $planned_shipping_date Timestamp represents the date you plan to ship your prospected shipment (required)
     * @param  bool $is_customs_declarable (required)
     * @param  string $unit_of_measurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. (required)
     * @param  string $origin_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  string $destination_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  bool $next_business_day When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  bool $get_all_value_added_services Option to return list of all value added services and its rule groups if applicable (optional, default to false)
     * @param  bool $request_estimated_delivery_date Option to return Estimated Delivery Date in response (optional, default to true)
     * @param  string $estimated_delivery_date_type Estimated Delivery Date Type. QDDF: is the fastest &#39;docs&#39; transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL&#39;s service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. (optional, default to 'QDDF')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiRatesAsyncWithHttpInfo($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code = null, $destination_postal_code = null, $next_business_day = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, $get_all_value_added_services = false, $request_estimated_delivery_date = true, $estimated_delivery_date_type = 'QDDF', string $contentType = self::contentTypes['expApiRates'][0])
    {
        $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
        $request = $this->expApiRatesRequest($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code, $destination_postal_code, $next_business_day, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $get_all_value_added_services, $request_estimated_delivery_date, $estimated_delivery_date_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expApiRates'
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $origin_country_code A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $origin_city_name Text specifying the city name (required)
     * @param  string $destination_country_code A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
     * @param  string $destination_city_name Text specifying the city name (required)
     * @param  float $weight Gross weight of the shipment including packaging. (required)
     * @param  float $length Total length of the shipment including packaging. (required)
     * @param  float $width Total width of the shipment including packaging. (required)
     * @param  float $height Total height of the shipment including packaging. (required)
     * @param  string $planned_shipping_date Timestamp represents the date you plan to ship your prospected shipment (required)
     * @param  bool $is_customs_declarable (required)
     * @param  string $unit_of_measurement The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing. (required)
     * @param  string $origin_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  string $destination_postal_code Text specifying the postal code for an address. https://gs1.org/voc/postalCode (optional)
     * @param  bool $next_business_day When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  bool $get_all_value_added_services Option to return list of all value added services and its rule groups if applicable (optional, default to false)
     * @param  bool $request_estimated_delivery_date Option to return Estimated Delivery Date in response (optional, default to true)
     * @param  string $estimated_delivery_date_type Estimated Delivery Date Type. QDDF: is the fastest &#39;docs&#39; transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL&#39;s service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. (optional, default to 'QDDF')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expApiRatesRequest($account_number, $origin_country_code, $origin_city_name, $destination_country_code, $destination_city_name, $weight, $length, $width, $height, $planned_shipping_date, $is_customs_declarable, $unit_of_measurement, $origin_postal_code = null, $destination_postal_code = null, $next_business_day = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, $get_all_value_added_services = false, $request_estimated_delivery_date = true, $estimated_delivery_date_type = 'QDDF', string $contentType = self::contentTypes['expApiRates'][0])
    {

        // verify the required parameter 'account_number' is set
        if ($account_number === null || (is_array($account_number) && count($account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_number when calling expApiRates'
            );
        }

        // verify the required parameter 'origin_country_code' is set
        if ($origin_country_code === null || (is_array($origin_country_code) && count($origin_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_code when calling expApiRates'
            );
        }

        // verify the required parameter 'origin_city_name' is set
        if ($origin_city_name === null || (is_array($origin_city_name) && count($origin_city_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_city_name when calling expApiRates'
            );
        }

        // verify the required parameter 'destination_country_code' is set
        if ($destination_country_code === null || (is_array($destination_country_code) && count($destination_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_country_code when calling expApiRates'
            );
        }

        // verify the required parameter 'destination_city_name' is set
        if ($destination_city_name === null || (is_array($destination_city_name) && count($destination_city_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_city_name when calling expApiRates'
            );
        }

        // verify the required parameter 'weight' is set
        if ($weight === null || (is_array($weight) && count($weight) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weight when calling expApiRates'
            );
        }
        if ($weight > 999999999999) {
            throw new \InvalidArgumentException('invalid value for "$weight" when calling RatingApi.expApiRates, must be smaller than or equal to 999999999999.');
        }
        if ($weight < 0) {
            throw new \InvalidArgumentException('invalid value for "$weight" when calling RatingApi.expApiRates, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'length' is set
        if ($length === null || (is_array($length) && count($length) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $length when calling expApiRates'
            );
        }
        if ($length > 9999999999) {
            throw new \InvalidArgumentException('invalid value for "$length" when calling RatingApi.expApiRates, must be smaller than or equal to 9999999999.');
        }
        if ($length < 1) {
            throw new \InvalidArgumentException('invalid value for "$length" when calling RatingApi.expApiRates, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'width' is set
        if ($width === null || (is_array($width) && count($width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling expApiRates'
            );
        }
        if ($width > 9999999999) {
            throw new \InvalidArgumentException('invalid value for "$width" when calling RatingApi.expApiRates, must be smaller than or equal to 9999999999.');
        }
        if ($width < 1) {
            throw new \InvalidArgumentException('invalid value for "$width" when calling RatingApi.expApiRates, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling expApiRates'
            );
        }
        if ($height > 9999999999) {
            throw new \InvalidArgumentException('invalid value for "$height" when calling RatingApi.expApiRates, must be smaller than or equal to 9999999999.');
        }
        if ($height < 1) {
            throw new \InvalidArgumentException('invalid value for "$height" when calling RatingApi.expApiRates, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'planned_shipping_date' is set
        if ($planned_shipping_date === null || (is_array($planned_shipping_date) && count($planned_shipping_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $planned_shipping_date when calling expApiRates'
            );
        }

        // verify the required parameter 'is_customs_declarable' is set
        if ($is_customs_declarable === null || (is_array($is_customs_declarable) && count($is_customs_declarable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_customs_declarable when calling expApiRates'
            );
        }

        // verify the required parameter 'unit_of_measurement' is set
        if ($unit_of_measurement === null || (is_array($unit_of_measurement) && count($unit_of_measurement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_of_measurement when calling expApiRates'
            );
        }




        if ($message_reference !== null && strlen($message_reference) > 36) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiRates, must be smaller than or equal to 36.');
        }
        if ($message_reference !== null && strlen($message_reference) < 28) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiRates, must be bigger than or equal to 28.');
        }
        

        if ($plugin_name !== null && strlen($plugin_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$plugin_name" when calling RatingApi.expApiRates, must be smaller than or equal to 20.');
        }
        
        if ($plugin_version !== null && strlen($plugin_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$plugin_version" when calling RatingApi.expApiRates, must be smaller than or equal to 15.');
        }
        
        if ($shipping_system_platform_name !== null && strlen($shipping_system_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_name" when calling RatingApi.expApiRates, must be smaller than or equal to 20.');
        }
        
        if ($shipping_system_platform_version !== null && strlen($shipping_system_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_version" when calling RatingApi.expApiRates, must be smaller than or equal to 15.');
        }
        
        if ($webstore_platform_name !== null && strlen($webstore_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_name" when calling RatingApi.expApiRates, must be smaller than or equal to 20.');
        }
        
        if ($webstore_platform_version !== null && strlen($webstore_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_version" when calling RatingApi.expApiRates, must be smaller than or equal to 15.');
        }
        





        $resourcePath = '/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_number,
            'accountNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origin_country_code,
            'originCountryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origin_postal_code,
            'originPostalCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origin_city_name,
            'originCityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destination_country_code,
            'destinationCountryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destination_postal_code,
            'destinationPostalCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destination_city_name,
            'destinationCityName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $weight,
            'weight', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $length,
            'length', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $planned_shipping_date,
            'plannedShippingDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_customs_declarable,
            'isCustomsDeclarable', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unit_of_measurement,
            'unitOfMeasurement', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_business_day,
            'nextBusinessDay', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $strict_validation,
            'strictValidation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $get_all_value_added_services,
            'getAllValueAddedServices', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_estimated_delivery_date,
            'requestEstimatedDeliveryDate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $estimated_delivery_date_type,
            'estimatedDeliveryDateType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($message_reference !== null) {
            $headerParams['Message-Reference'] = ObjectSerializer::toHeaderValue($message_reference);
        }
        // header params
        if ($message_reference_date !== null) {
            $headerParams['Message-Reference-Date'] = ObjectSerializer::toHeaderValue($message_reference_date);
        }
        // header params
        if ($plugin_name !== null) {
            $headerParams['Plugin-Name'] = ObjectSerializer::toHeaderValue($plugin_name);
        }
        // header params
        if ($plugin_version !== null) {
            $headerParams['Plugin-Version'] = ObjectSerializer::toHeaderValue($plugin_version);
        }
        // header params
        if ($shipping_system_platform_name !== null) {
            $headerParams['Shipping-System-Platform-Name'] = ObjectSerializer::toHeaderValue($shipping_system_platform_name);
        }
        // header params
        if ($shipping_system_platform_version !== null) {
            $headerParams['Shipping-System-Platform-Version'] = ObjectSerializer::toHeaderValue($shipping_system_platform_version);
        }
        // header params
        if ($webstore_platform_name !== null) {
            $headerParams['Webstore-Platform-Name'] = ObjectSerializer::toHeaderValue($webstore_platform_name);
        }
        // header params
        if ($webstore_platform_version !== null) {
            $headerParams['Webstore-Platform-Version'] = ObjectSerializer::toHeaderValue($webstore_platform_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation expApiRatesMany
     *
     * Retrieve Rates for Multi-piece Shipments
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressRateRequest $supermodel_io_logistics_express_rate_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRatesMany'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse
     */
    public function expApiRatesMany($supermodel_io_logistics_express_rate_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, string $contentType = self::contentTypes['expApiRatesMany'][0])
    {
        list($response) = $this->expApiRatesManyWithHttpInfo($supermodel_io_logistics_express_rate_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $contentType);
        return $response;
    }

    /**
     * Operation expApiRatesManyWithHttpInfo
     *
     * Retrieve Rates for Multi-piece Shipments
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressRateRequest $supermodel_io_logistics_express_rate_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRatesMany'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyDHL\Model\SupermodelIoLogisticsExpressRates|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function expApiRatesManyWithHttpInfo($supermodel_io_logistics_express_rate_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, string $contentType = self::contentTypes['expApiRatesMany'][0])
    {
        $request = $this->expApiRatesManyRequest($supermodel_io_logistics_express_rate_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressRates' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressRates', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressRates',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expApiRatesManyAsync
     *
     * Retrieve Rates for Multi-piece Shipments
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressRateRequest $supermodel_io_logistics_express_rate_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRatesMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiRatesManyAsync($supermodel_io_logistics_express_rate_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, string $contentType = self::contentTypes['expApiRatesMany'][0])
    {
        return $this->expApiRatesManyAsyncWithHttpInfo($supermodel_io_logistics_express_rate_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expApiRatesManyAsyncWithHttpInfo
     *
     * Retrieve Rates for Multi-piece Shipments
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressRateRequest $supermodel_io_logistics_express_rate_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRatesMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiRatesManyAsyncWithHttpInfo($supermodel_io_logistics_express_rate_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, string $contentType = self::contentTypes['expApiRatesMany'][0])
    {
        $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressRates';
        $request = $this->expApiRatesManyRequest($supermodel_io_logistics_express_rate_request, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $strict_validation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expApiRatesMany'
     *
     * @param  \MyDHL\Model\SupermodelIoLogisticsExpressRateRequest $supermodel_io_logistics_express_rate_request Details about the requested shipment (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  bool $strict_validation If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiRatesMany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expApiRatesManyRequest($supermodel_io_logistics_express_rate_request, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, $strict_validation = false, string $contentType = self::contentTypes['expApiRatesMany'][0])
    {

        // verify the required parameter 'supermodel_io_logistics_express_rate_request' is set
        if ($supermodel_io_logistics_express_rate_request === null || (is_array($supermodel_io_logistics_express_rate_request) && count($supermodel_io_logistics_express_rate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supermodel_io_logistics_express_rate_request when calling expApiRatesMany'
            );
        }

        if ($message_reference !== null && strlen($message_reference) > 36) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 36.');
        }
        if ($message_reference !== null && strlen($message_reference) < 28) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling RatingApi.expApiRatesMany, must be bigger than or equal to 28.');
        }
        

        if ($plugin_name !== null && strlen($plugin_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$plugin_name" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 20.');
        }
        
        if ($plugin_version !== null && strlen($plugin_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$plugin_version" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 15.');
        }
        
        if ($shipping_system_platform_name !== null && strlen($shipping_system_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_name" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 20.');
        }
        
        if ($shipping_system_platform_version !== null && strlen($shipping_system_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_version" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 15.');
        }
        
        if ($webstore_platform_name !== null && strlen($webstore_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_name" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 20.');
        }
        
        if ($webstore_platform_version !== null && strlen($webstore_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_version" when calling RatingApi.expApiRatesMany, must be smaller than or equal to 15.');
        }
        


        $resourcePath = '/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $strict_validation,
            'strictValidation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($message_reference !== null) {
            $headerParams['Message-Reference'] = ObjectSerializer::toHeaderValue($message_reference);
        }
        // header params
        if ($message_reference_date !== null) {
            $headerParams['Message-Reference-Date'] = ObjectSerializer::toHeaderValue($message_reference_date);
        }
        // header params
        if ($plugin_name !== null) {
            $headerParams['Plugin-Name'] = ObjectSerializer::toHeaderValue($plugin_name);
        }
        // header params
        if ($plugin_version !== null) {
            $headerParams['Plugin-Version'] = ObjectSerializer::toHeaderValue($plugin_version);
        }
        // header params
        if ($shipping_system_platform_name !== null) {
            $headerParams['Shipping-System-Platform-Name'] = ObjectSerializer::toHeaderValue($shipping_system_platform_name);
        }
        // header params
        if ($shipping_system_platform_version !== null) {
            $headerParams['Shipping-System-Platform-Version'] = ObjectSerializer::toHeaderValue($shipping_system_platform_version);
        }
        // header params
        if ($webstore_platform_name !== null) {
            $headerParams['Webstore-Platform-Name'] = ObjectSerializer::toHeaderValue($webstore_platform_name);
        }
        // header params
        if ($webstore_platform_version !== null) {
            $headerParams['Webstore-Platform-Version'] = ObjectSerializer::toHeaderValue($webstore_platform_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($supermodel_io_logistics_express_rate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($supermodel_io_logistics_express_rate_request));
            } else {
                $httpBody = $supermodel_io_logistics_express_rate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '2.7.2',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}

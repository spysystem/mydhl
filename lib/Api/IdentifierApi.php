<?php
/**
 * IdentifierApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.  Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.7.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyDHL\ApiException;
use MyDHL\Configuration;
use MyDHL\HeaderSelector;
use MyDHL\ObjectSerializer;

/**
 * IdentifierApi Class Doc Comment
 *
 * @category Class
 * @package  MyDHL
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentifierApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '2.7.2';
	}
	#endregion

    /**
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'expApiIdentifiers' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation expApiIdentifiers
     *
     * Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $type Type of DHL Express identifier to retrieve (required)
     * @param  string $size Number of identifiers to be retrieved (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiIdentifiers'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse
     */
    public function expApiIdentifiers($account_number, $type, $size, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiIdentifiers'][0])
    {
        list($response) = $this->expApiIdentifiersWithHttpInfo($account_number, $type, $size, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);
        return $response;
    }

    /**
     * Operation expApiIdentifiersWithHttpInfo
     *
     * Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $type Type of DHL Express identifier to retrieve (required)
     * @param  string $size Number of identifiers to be retrieved (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiIdentifiers'] to see the possible values for this operation
     *
     * @throws \MyDHL\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse|\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function expApiIdentifiersWithHttpInfo($account_number, $type, $size, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiIdentifiers'][0])
    {
        $request = $this->expApiIdentifiersRequest($account_number, $type, $size, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Model\SupermodelIoLogisticsExpressErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expApiIdentifiersAsync
     *
     * Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $type Type of DHL Express identifier to retrieve (required)
     * @param  string $size Number of identifiers to be retrieved (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiIdentifiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiIdentifiersAsync($account_number, $type, $size, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiIdentifiers'][0])
    {
        return $this->expApiIdentifiersAsyncWithHttpInfo($account_number, $type, $size, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expApiIdentifiersAsyncWithHttpInfo
     *
     * Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $type Type of DHL Express identifier to retrieve (required)
     * @param  string $size Number of identifiers to be retrieved (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiIdentifiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiIdentifiersAsyncWithHttpInfo($account_number, $type, $size, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiIdentifiers'][0])
    {
        $returnType = '\MyDHL\Model\SupermodelIoLogisticsExpressIdentifierResponse';
        $request = $this->expApiIdentifiersRequest($account_number, $type, $size, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expApiIdentifiers'
     *
     * @param  string $account_number DHL Express customer account number (required)
     * @param  string $type Type of DHL Express identifier to retrieve (required)
     * @param  string $size Number of identifiers to be retrieved (required)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiIdentifiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expApiIdentifiersRequest($account_number, $type, $size, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiIdentifiers'][0])
    {

        // verify the required parameter 'account_number' is set
        if ($account_number === null || (is_array($account_number) && count($account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_number when calling expApiIdentifiers'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling expApiIdentifiers'
            );
        }

        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling expApiIdentifiers'
            );
        }

        if ($message_reference !== null && strlen($message_reference) > 36) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 36.');
        }
        if ($message_reference !== null && strlen($message_reference) < 28) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling IdentifierApi.expApiIdentifiers, must be bigger than or equal to 28.');
        }
        

        if ($plugin_name !== null && strlen($plugin_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$plugin_name" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 20.');
        }
        
        if ($plugin_version !== null && strlen($plugin_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$plugin_version" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 15.');
        }
        
        if ($shipping_system_platform_name !== null && strlen($shipping_system_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_name" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 20.');
        }
        
        if ($shipping_system_platform_version !== null && strlen($shipping_system_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_version" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 15.');
        }
        
        if ($webstore_platform_name !== null && strlen($webstore_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_name" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 20.');
        }
        
        if ($webstore_platform_version !== null && strlen($webstore_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_version" when calling IdentifierApi.expApiIdentifiers, must be smaller than or equal to 15.');
        }
        

        $resourcePath = '/identifiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_number,
            'accountNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($message_reference !== null) {
            $headerParams['Message-Reference'] = ObjectSerializer::toHeaderValue($message_reference);
        }
        // header params
        if ($message_reference_date !== null) {
            $headerParams['Message-Reference-Date'] = ObjectSerializer::toHeaderValue($message_reference_date);
        }
        // header params
        if ($plugin_name !== null) {
            $headerParams['Plugin-Name'] = ObjectSerializer::toHeaderValue($plugin_name);
        }
        // header params
        if ($plugin_version !== null) {
            $headerParams['Plugin-Version'] = ObjectSerializer::toHeaderValue($plugin_version);
        }
        // header params
        if ($shipping_system_platform_name !== null) {
            $headerParams['Shipping-System-Platform-Name'] = ObjectSerializer::toHeaderValue($shipping_system_platform_name);
        }
        // header params
        if ($shipping_system_platform_version !== null) {
            $headerParams['Shipping-System-Platform-Version'] = ObjectSerializer::toHeaderValue($shipping_system_platform_version);
        }
        // header params
        if ($webstore_platform_name !== null) {
            $headerParams['Webstore-Platform-Name'] = ObjectSerializer::toHeaderValue($webstore_platform_name);
        }
        // header params
        if ($webstore_platform_version !== null) {
            $headerParams['Webstore-Platform-Version'] = ObjectSerializer::toHeaderValue($webstore_platform_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '2.7.2',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}
